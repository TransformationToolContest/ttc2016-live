/*
 * generated by Xtext 2.9.2
 */
package eu.ttc.dataflow.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DataflowDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//	{Model} elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} elements+=Element*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_1_0() { return cElementsElementParserRuleCall_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllInstancesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSortParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCopyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProductParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGetFeatureParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSetFeatureParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cNewContainerParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cAddToContainerParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cForEachParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cCollectByParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cEvaluateParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Element:
		//	AllInstances | NewInstance | Filter | Sort | Copy | Product | GetFeature | SetFeature | NewContainer | AddToContainer
		//	| ForEach | CollectBy | Evaluate;
		@Override public ParserRule getRule() { return rule; }
		
		//AllInstances | NewInstance | Filter | Sort | Copy | Product | GetFeature | SetFeature | NewContainer | AddToContainer |
		//ForEach | CollectBy | Evaluate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AllInstances
		public RuleCall getAllInstancesParserRuleCall_0() { return cAllInstancesParserRuleCall_0; }
		
		//NewInstance
		public RuleCall getNewInstanceParserRuleCall_1() { return cNewInstanceParserRuleCall_1; }
		
		//Filter
		public RuleCall getFilterParserRuleCall_2() { return cFilterParserRuleCall_2; }
		
		//Sort
		public RuleCall getSortParserRuleCall_3() { return cSortParserRuleCall_3; }
		
		//Copy
		public RuleCall getCopyParserRuleCall_4() { return cCopyParserRuleCall_4; }
		
		//Product
		public RuleCall getProductParserRuleCall_5() { return cProductParserRuleCall_5; }
		
		//GetFeature
		public RuleCall getGetFeatureParserRuleCall_6() { return cGetFeatureParserRuleCall_6; }
		
		//SetFeature
		public RuleCall getSetFeatureParserRuleCall_7() { return cSetFeatureParserRuleCall_7; }
		
		//NewContainer
		public RuleCall getNewContainerParserRuleCall_8() { return cNewContainerParserRuleCall_8; }
		
		//AddToContainer
		public RuleCall getAddToContainerParserRuleCall_9() { return cAddToContainerParserRuleCall_9; }
		
		//ForEach
		public RuleCall getForEachParserRuleCall_10() { return cForEachParserRuleCall_10; }
		
		//CollectBy
		public RuleCall getCollectByParserRuleCall_11() { return cCollectByParserRuleCall_11; }
		
		//Evaluate
		public RuleCall getEvaluateParserRuleCall_12() { return cEvaluateParserRuleCall_12; }
	}
	public class AllInstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.AllInstances");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllInstancesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFieldKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_3_0_1_0 = (RuleCall)cFieldAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cTypeKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Assignment cModelAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cModelIDTerminalRuleCall_3_1_1_0_0 = (RuleCall)cModelAssignment_3_1_1_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Assignment cPackageNameAssignment_3_1_2_0 = (Assignment)cGroup_3_1_2.eContents().get(0);
		private final RuleCall cPackageNameIDTerminalRuleCall_3_1_2_0_0 = (RuleCall)cPackageNameAssignment_3_1_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_3_1_2_1 = (Keyword)cGroup_3_1_2.eContents().get(1);
		private final Assignment cTypeNameAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cTypeNameIDTerminalRuleCall_3_1_3_0 = (RuleCall)cTypeNameAssignment_3_1_3.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cTargetKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTargetAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_2_1_0 = (CrossReference)cTargetAssignment_3_2_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cTargetElementCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AllInstances:
		//	'AllInstances'
		//	name=ID
		//	'{' ('field' field=ID
		//	| 'type' (model=ID '!')? (packageName=ID '::')? typeName=ID
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AllInstances' name=ID '{' ('field' field=ID | 'type' (model=ID '!')? (packageName=ID '::')? typeName=ID | 'target'
		//target=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'AllInstances'
		public Keyword getAllInstancesKeyword_0() { return cAllInstancesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('field' field=ID | 'type' (model=ID '!')? (packageName=ID '::')? typeName=ID | 'target' target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'field' field=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'field'
		public Keyword getFieldKeyword_3_0_0() { return cFieldKeyword_3_0_0; }
		
		//field=ID
		public Assignment getFieldAssignment_3_0_1() { return cFieldAssignment_3_0_1; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_3_0_1_0() { return cFieldIDTerminalRuleCall_3_0_1_0; }
		
		//'type' (model=ID '!')? (packageName=ID '::')? typeName=ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'type'
		public Keyword getTypeKeyword_3_1_0() { return cTypeKeyword_3_1_0; }
		
		//(model=ID '!')?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//model=ID
		public Assignment getModelAssignment_3_1_1_0() { return cModelAssignment_3_1_1_0; }
		
		//ID
		public RuleCall getModelIDTerminalRuleCall_3_1_1_0_0() { return cModelIDTerminalRuleCall_3_1_1_0_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_3_1_1_1() { return cExclamationMarkKeyword_3_1_1_1; }
		
		//(packageName=ID '::')?
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//packageName=ID
		public Assignment getPackageNameAssignment_3_1_2_0() { return cPackageNameAssignment_3_1_2_0; }
		
		//ID
		public RuleCall getPackageNameIDTerminalRuleCall_3_1_2_0_0() { return cPackageNameIDTerminalRuleCall_3_1_2_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_3_1_2_1() { return cColonColonKeyword_3_1_2_1; }
		
		//typeName=ID
		public Assignment getTypeNameAssignment_3_1_3() { return cTypeNameAssignment_3_1_3; }
		
		//ID
		public RuleCall getTypeNameIDTerminalRuleCall_3_1_3_0() { return cTypeNameIDTerminalRuleCall_3_1_3_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'target'
		public Keyword getTargetKeyword_3_2_0() { return cTargetKeyword_3_2_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_2_1() { return cTargetAssignment_3_2_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_2_1_0() { return cTargetElementCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_2_1_0_1() { return cTargetElementIDTerminalRuleCall_3_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NewInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.NewInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFieldKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cInstanceFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cInstanceFieldIDTerminalRuleCall_3_0_1_0 = (RuleCall)cInstanceFieldAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cKeyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cKeyAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cKeyConditionalExpressionParserRuleCall_3_1_1_0 = (RuleCall)cKeyAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cTypeKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cGroup_3_2.eContents().get(1);
		private final Assignment cModelAssignment_3_2_1_0 = (Assignment)cGroup_3_2_1.eContents().get(0);
		private final RuleCall cModelIDTerminalRuleCall_3_2_1_0_0 = (RuleCall)cModelAssignment_3_2_1_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_3_2_1_1 = (Keyword)cGroup_3_2_1.eContents().get(1);
		private final Group cGroup_3_2_2 = (Group)cGroup_3_2.eContents().get(2);
		private final Assignment cPackageNameAssignment_3_2_2_0 = (Assignment)cGroup_3_2_2.eContents().get(0);
		private final RuleCall cPackageNameIDTerminalRuleCall_3_2_2_0_0 = (RuleCall)cPackageNameAssignment_3_2_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_3_2_2_1 = (Keyword)cGroup_3_2_2.eContents().get(1);
		private final Assignment cTypeNameAssignment_3_2_3 = (Assignment)cGroup_3_2.eContents().get(3);
		private final RuleCall cTypeNameIDTerminalRuleCall_3_2_3_0 = (RuleCall)cTypeNameAssignment_3_2_3.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cTargetKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTargetAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_3_1_0 = (CrossReference)cTargetAssignment_3_3_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cTargetElementCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NewInstance:
		//	'NewInstance'
		//	name=ID
		//	'{' ('field' instanceField=ID
		//	| 'key' key=ConditionalExpression
		//	| 'type' (model=ID '!')? (packageName=ID '::')? typeName=ID
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'NewInstance' name=ID '{' ('field' instanceField=ID | 'key' key=ConditionalExpression | 'type' (model=ID '!')?
		//(packageName=ID '::')? typeName=ID | 'target' target=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'NewInstance'
		public Keyword getNewInstanceKeyword_0() { return cNewInstanceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('field' instanceField=ID | 'key' key=ConditionalExpression | 'type' (model=ID '!')? (packageName=ID '::')? typeName=ID
		//| 'target' target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'field' instanceField=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'field'
		public Keyword getFieldKeyword_3_0_0() { return cFieldKeyword_3_0_0; }
		
		//instanceField=ID
		public Assignment getInstanceFieldAssignment_3_0_1() { return cInstanceFieldAssignment_3_0_1; }
		
		//ID
		public RuleCall getInstanceFieldIDTerminalRuleCall_3_0_1_0() { return cInstanceFieldIDTerminalRuleCall_3_0_1_0; }
		
		//'key' key=ConditionalExpression
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'key'
		public Keyword getKeyKeyword_3_1_0() { return cKeyKeyword_3_1_0; }
		
		//key=ConditionalExpression
		public Assignment getKeyAssignment_3_1_1() { return cKeyAssignment_3_1_1; }
		
		//ConditionalExpression
		public RuleCall getKeyConditionalExpressionParserRuleCall_3_1_1_0() { return cKeyConditionalExpressionParserRuleCall_3_1_1_0; }
		
		//'type' (model=ID '!')? (packageName=ID '::')? typeName=ID
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'type'
		public Keyword getTypeKeyword_3_2_0() { return cTypeKeyword_3_2_0; }
		
		//(model=ID '!')?
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }
		
		//model=ID
		public Assignment getModelAssignment_3_2_1_0() { return cModelAssignment_3_2_1_0; }
		
		//ID
		public RuleCall getModelIDTerminalRuleCall_3_2_1_0_0() { return cModelIDTerminalRuleCall_3_2_1_0_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_3_2_1_1() { return cExclamationMarkKeyword_3_2_1_1; }
		
		//(packageName=ID '::')?
		public Group getGroup_3_2_2() { return cGroup_3_2_2; }
		
		//packageName=ID
		public Assignment getPackageNameAssignment_3_2_2_0() { return cPackageNameAssignment_3_2_2_0; }
		
		//ID
		public RuleCall getPackageNameIDTerminalRuleCall_3_2_2_0_0() { return cPackageNameIDTerminalRuleCall_3_2_2_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_3_2_2_1() { return cColonColonKeyword_3_2_2_1; }
		
		//typeName=ID
		public Assignment getTypeNameAssignment_3_2_3() { return cTypeNameAssignment_3_2_3; }
		
		//ID
		public RuleCall getTypeNameIDTerminalRuleCall_3_2_3_0() { return cTypeNameIDTerminalRuleCall_3_2_3_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'target'
		public Keyword getTargetKeyword_3_3_0() { return cTargetKeyword_3_3_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_3_1() { return cTargetAssignment_3_3_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_3_1_0() { return cTargetElementCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_3_1_0_1() { return cTargetElementIDTerminalRuleCall_3_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFilterByKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cFilterByAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cFilterByConditionalExpressionParserRuleCall_3_0_1_0 = (RuleCall)cFilterByAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cTargetKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTargetAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_1_1_0 = (CrossReference)cTargetAssignment_3_1_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cTargetElementCrossReference_3_1_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cRejectTargetKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cRejectTargetAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cRejectTargetElementCrossReference_3_2_1_0 = (CrossReference)cRejectTargetAssignment_3_2_1.eContents().get(0);
		private final RuleCall cRejectTargetElementIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cRejectTargetElementCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Filter:
		//	'Filter'
		//	name=ID
		//	'{' ('filterBy' filterBy=ConditionalExpression
		//	| 'target' target=[Element] | 'rejectTarget' rejectTarget=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Filter' name=ID '{' ('filterBy' filterBy=ConditionalExpression | 'target' target=[Element] | 'rejectTarget'
		//rejectTarget=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'Filter'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('filterBy' filterBy=ConditionalExpression | 'target' target=[Element] | 'rejectTarget' rejectTarget=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'filterBy' filterBy=ConditionalExpression
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'filterBy'
		public Keyword getFilterByKeyword_3_0_0() { return cFilterByKeyword_3_0_0; }
		
		//filterBy=ConditionalExpression
		public Assignment getFilterByAssignment_3_0_1() { return cFilterByAssignment_3_0_1; }
		
		//ConditionalExpression
		public RuleCall getFilterByConditionalExpressionParserRuleCall_3_0_1_0() { return cFilterByConditionalExpressionParserRuleCall_3_0_1_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'target'
		public Keyword getTargetKeyword_3_1_0() { return cTargetKeyword_3_1_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_1_1() { return cTargetAssignment_3_1_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_1_1_0() { return cTargetElementCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_1_1_0_1() { return cTargetElementIDTerminalRuleCall_3_1_1_0_1; }
		
		//'rejectTarget' rejectTarget=[Element]
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'rejectTarget'
		public Keyword getRejectTargetKeyword_3_2_0() { return cRejectTargetKeyword_3_2_0; }
		
		//rejectTarget=[Element]
		public Assignment getRejectTargetAssignment_3_2_1() { return cRejectTargetAssignment_3_2_1; }
		
		//[Element]
		public CrossReference getRejectTargetElementCrossReference_3_2_1_0() { return cRejectTargetElementCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getRejectTargetElementIDTerminalRuleCall_3_2_1_0_1() { return cRejectTargetElementIDTerminalRuleCall_3_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cTargetKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTargetAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_0_1_0 = (CrossReference)cTargetAssignment_3_0_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cTargetElementCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cCopyTargetKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCopyTargetAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cCopyTargetElementCrossReference_3_1_1_0 = (CrossReference)cCopyTargetAssignment_3_1_1.eContents().get(0);
		private final RuleCall cCopyTargetElementIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cCopyTargetElementCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Copy:
		//	'Copy'
		//	name=ID
		//	'{' ('target' target=[Element] | 'copyTarget' copyTarget=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Copy' name=ID '{' ('target' target=[Element] | 'copyTarget' copyTarget=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'Copy'
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('target' target=[Element] | 'copyTarget' copyTarget=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'target' target=[Element]
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'target'
		public Keyword getTargetKeyword_3_0_0() { return cTargetKeyword_3_0_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_0_1() { return cTargetAssignment_3_0_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_0_1_0() { return cTargetElementCrossReference_3_0_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_0_1_0_1() { return cTargetElementIDTerminalRuleCall_3_0_1_0_1; }
		
		//'copyTarget' copyTarget=[Element]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'copyTarget'
		public Keyword getCopyTargetKeyword_3_1_0() { return cCopyTargetKeyword_3_1_0; }
		
		//copyTarget=[Element]
		public Assignment getCopyTargetAssignment_3_1_1() { return cCopyTargetAssignment_3_1_1; }
		
		//[Element]
		public CrossReference getCopyTargetElementCrossReference_3_1_1_0() { return cCopyTargetElementCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getCopyTargetElementIDTerminalRuleCall_3_1_1_0_1() { return cCopyTargetElementIDTerminalRuleCall_3_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.Sort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cSortByKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSortByAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSortByConditionalExpressionParserRuleCall_3_0_1_0 = (RuleCall)cSortByAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cTargetKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTargetAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_1_1_0 = (CrossReference)cTargetAssignment_3_1_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cTargetElementCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sort:
		//	'Sort'
		//	name=ID
		//	'{' ('sortBy' sortBy=ConditionalExpression
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sort' name=ID '{' ('sortBy' sortBy=ConditionalExpression | 'target' target=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'Sort'
		public Keyword getSortKeyword_0() { return cSortKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('sortBy' sortBy=ConditionalExpression | 'target' target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'sortBy' sortBy=ConditionalExpression
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'sortBy'
		public Keyword getSortByKeyword_3_0_0() { return cSortByKeyword_3_0_0; }
		
		//sortBy=ConditionalExpression
		public Assignment getSortByAssignment_3_0_1() { return cSortByAssignment_3_0_1; }
		
		//ConditionalExpression
		public RuleCall getSortByConditionalExpressionParserRuleCall_3_0_1_0() { return cSortByConditionalExpressionParserRuleCall_3_0_1_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'target'
		public Keyword getTargetKeyword_3_1_0() { return cTargetKeyword_3_1_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_1_1() { return cTargetAssignment_3_1_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_1_1_0() { return cTargetElementCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_1_1_0_1() { return cTargetElementIDTerminalRuleCall_3_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTargetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTargetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_1_0 = (CrossReference)cTargetAssignment_3_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTargetElementCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Product:
		//	'Product'
		//	name=ID
		//	'{' ('target' target=[Element])?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Product' name=ID '{' ('target' target=[Element])? '}'
		public Group getGroup() { return cGroup; }
		
		//'Product'
		public Keyword getProductKeyword_0() { return cProductKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('target' target=[Element])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'target'
		public Keyword getTargetKeyword_3_0() { return cTargetKeyword_3_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_1() { return cTargetAssignment_3_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_1_0() { return cTargetElementCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_1_0_1() { return cTargetElementIDTerminalRuleCall_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GetFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.GetFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cObjectFieldKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cObjectFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cObjectFieldIDTerminalRuleCall_3_0_1_0 = (RuleCall)cObjectFieldAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cValueFieldKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValueFieldAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValueFieldIDTerminalRuleCall_3_1_1_0 = (RuleCall)cValueFieldAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cFeatureKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFeatureAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cFeatureIDTerminalRuleCall_3_2_1_0 = (RuleCall)cFeatureAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cTargetKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTargetAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_3_1_0 = (CrossReference)cTargetAssignment_3_3_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cTargetElementCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GetFeature:
		//	'GetFeature'
		//	name=ID
		//	'{' ('objectField' objectField=ID
		//	| 'valueField' valueField=ID
		//	| 'feature' feature=ID
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GetFeature' name=ID '{' ('objectField' objectField=ID | 'valueField' valueField=ID | 'feature' feature=ID | 'target'
		//target=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'GetFeature'
		public Keyword getGetFeatureKeyword_0() { return cGetFeatureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('objectField' objectField=ID | 'valueField' valueField=ID | 'feature' feature=ID | 'target' target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'objectField' objectField=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'objectField'
		public Keyword getObjectFieldKeyword_3_0_0() { return cObjectFieldKeyword_3_0_0; }
		
		//objectField=ID
		public Assignment getObjectFieldAssignment_3_0_1() { return cObjectFieldAssignment_3_0_1; }
		
		//ID
		public RuleCall getObjectFieldIDTerminalRuleCall_3_0_1_0() { return cObjectFieldIDTerminalRuleCall_3_0_1_0; }
		
		//'valueField' valueField=ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'valueField'
		public Keyword getValueFieldKeyword_3_1_0() { return cValueFieldKeyword_3_1_0; }
		
		//valueField=ID
		public Assignment getValueFieldAssignment_3_1_1() { return cValueFieldAssignment_3_1_1; }
		
		//ID
		public RuleCall getValueFieldIDTerminalRuleCall_3_1_1_0() { return cValueFieldIDTerminalRuleCall_3_1_1_0; }
		
		//'feature' feature=ID
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'feature'
		public Keyword getFeatureKeyword_3_2_0() { return cFeatureKeyword_3_2_0; }
		
		//feature=ID
		public Assignment getFeatureAssignment_3_2_1() { return cFeatureAssignment_3_2_1; }
		
		//ID
		public RuleCall getFeatureIDTerminalRuleCall_3_2_1_0() { return cFeatureIDTerminalRuleCall_3_2_1_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'target'
		public Keyword getTargetKeyword_3_3_0() { return cTargetKeyword_3_3_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_3_1() { return cTargetAssignment_3_3_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_3_1_0() { return cTargetElementCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_3_1_0_1() { return cTargetElementIDTerminalRuleCall_3_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SetFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.SetFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFieldKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cObjectFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cObjectFieldIDTerminalRuleCall_3_0_1_0 = (RuleCall)cObjectFieldAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cValueKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValueConditionalExpressionParserRuleCall_3_1_1_0 = (RuleCall)cValueAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cFeatureKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFeatureAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cFeatureIDTerminalRuleCall_3_2_1_0 = (RuleCall)cFeatureAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cTargetKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTargetAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_3_1_0 = (CrossReference)cTargetAssignment_3_3_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cTargetElementCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetFeature:
		//	'SetFeature'
		//	name=ID
		//	'{' ('field' objectField=ID
		//	| 'value' value=ConditionalExpression
		//	| 'feature' feature=ID
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SetFeature' name=ID '{' ('field' objectField=ID | 'value' value=ConditionalExpression | 'feature' feature=ID | 'target'
		//target=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'SetFeature'
		public Keyword getSetFeatureKeyword_0() { return cSetFeatureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('field' objectField=ID | 'value' value=ConditionalExpression | 'feature' feature=ID | 'target' target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'field' objectField=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'field'
		public Keyword getFieldKeyword_3_0_0() { return cFieldKeyword_3_0_0; }
		
		//objectField=ID
		public Assignment getObjectFieldAssignment_3_0_1() { return cObjectFieldAssignment_3_0_1; }
		
		//ID
		public RuleCall getObjectFieldIDTerminalRuleCall_3_0_1_0() { return cObjectFieldIDTerminalRuleCall_3_0_1_0; }
		
		//'value' value=ConditionalExpression
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'value'
		public Keyword getValueKeyword_3_1_0() { return cValueKeyword_3_1_0; }
		
		//value=ConditionalExpression
		public Assignment getValueAssignment_3_1_1() { return cValueAssignment_3_1_1; }
		
		//ConditionalExpression
		public RuleCall getValueConditionalExpressionParserRuleCall_3_1_1_0() { return cValueConditionalExpressionParserRuleCall_3_1_1_0; }
		
		//'feature' feature=ID
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'feature'
		public Keyword getFeatureKeyword_3_2_0() { return cFeatureKeyword_3_2_0; }
		
		//feature=ID
		public Assignment getFeatureAssignment_3_2_1() { return cFeatureAssignment_3_2_1; }
		
		//ID
		public RuleCall getFeatureIDTerminalRuleCall_3_2_1_0() { return cFeatureIDTerminalRuleCall_3_2_1_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'target'
		public Keyword getTargetKeyword_3_3_0() { return cTargetKeyword_3_3_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_3_1() { return cTargetAssignment_3_3_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_3_1_0() { return cTargetElementCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_3_1_0_1() { return cTargetElementIDTerminalRuleCall_3_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NewContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.NewContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFieldKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cListFieldAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cListFieldIDTerminalRuleCall_3_1_0 = (RuleCall)cListFieldAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContainerTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainerTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainerTypeContainerTypeEnumRuleCall_4_1_0 = (RuleCall)cContainerTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTargetKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTargetAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_5_1_0 = (CrossReference)cTargetAssignment_5_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_5_1_0_1 = (RuleCall)cTargetElementCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NewContainer:
		//	'NewContainer'
		//	name=ID
		//	'{' ('field' listField=ID)? ('containerType' containerType=ContainerType)? ('target' target=[Element])?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'NewContainer' name=ID '{' ('field' listField=ID)? ('containerType' containerType=ContainerType)? ('target'
		//target=[Element])? '}'
		public Group getGroup() { return cGroup; }
		
		//'NewContainer'
		public Keyword getNewContainerKeyword_0() { return cNewContainerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('field' listField=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'field'
		public Keyword getFieldKeyword_3_0() { return cFieldKeyword_3_0; }
		
		//listField=ID
		public Assignment getListFieldAssignment_3_1() { return cListFieldAssignment_3_1; }
		
		//ID
		public RuleCall getListFieldIDTerminalRuleCall_3_1_0() { return cListFieldIDTerminalRuleCall_3_1_0; }
		
		//('containerType' containerType=ContainerType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'containerType'
		public Keyword getContainerTypeKeyword_4_0() { return cContainerTypeKeyword_4_0; }
		
		//containerType=ContainerType
		public Assignment getContainerTypeAssignment_4_1() { return cContainerTypeAssignment_4_1; }
		
		//ContainerType
		public RuleCall getContainerTypeContainerTypeEnumRuleCall_4_1_0() { return cContainerTypeContainerTypeEnumRuleCall_4_1_0; }
		
		//('target' target=[Element])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'target'
		public Keyword getTargetKeyword_5_0() { return cTargetKeyword_5_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_5_1() { return cTargetAssignment_5_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_5_1_0() { return cTargetElementCrossReference_5_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_5_1_0_1() { return cTargetElementIDTerminalRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AddToContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.AddToContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddToContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFieldKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cListFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cListFieldIDTerminalRuleCall_3_0_1_0 = (RuleCall)cListFieldAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cValueKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValueConditionalExpressionParserRuleCall_3_1_1_0 = (RuleCall)cValueAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cPositionKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cPositionAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cPositionConditionalExpressionParserRuleCall_3_2_1_0 = (RuleCall)cPositionAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cTargetKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTargetAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_3_1_0 = (CrossReference)cTargetAssignment_3_3_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cTargetElementCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AddToContainer:
		//	'AddToContainer'
		//	name=ID
		//	'{' ('field' listField=ID
		//	| 'value' value=ConditionalExpression
		//	| 'position' position=ConditionalExpression
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AddToContainer' name=ID '{' ('field' listField=ID | 'value' value=ConditionalExpression | 'position'
		//position=ConditionalExpression | 'target' target=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'AddToContainer'
		public Keyword getAddToContainerKeyword_0() { return cAddToContainerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('field' listField=ID | 'value' value=ConditionalExpression | 'position' position=ConditionalExpression | 'target'
		//target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'field' listField=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'field'
		public Keyword getFieldKeyword_3_0_0() { return cFieldKeyword_3_0_0; }
		
		//listField=ID
		public Assignment getListFieldAssignment_3_0_1() { return cListFieldAssignment_3_0_1; }
		
		//ID
		public RuleCall getListFieldIDTerminalRuleCall_3_0_1_0() { return cListFieldIDTerminalRuleCall_3_0_1_0; }
		
		//'value' value=ConditionalExpression
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'value'
		public Keyword getValueKeyword_3_1_0() { return cValueKeyword_3_1_0; }
		
		//value=ConditionalExpression
		public Assignment getValueAssignment_3_1_1() { return cValueAssignment_3_1_1; }
		
		//ConditionalExpression
		public RuleCall getValueConditionalExpressionParserRuleCall_3_1_1_0() { return cValueConditionalExpressionParserRuleCall_3_1_1_0; }
		
		//'position' position=ConditionalExpression
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'position'
		public Keyword getPositionKeyword_3_2_0() { return cPositionKeyword_3_2_0; }
		
		//position=ConditionalExpression
		public Assignment getPositionAssignment_3_2_1() { return cPositionAssignment_3_2_1; }
		
		//ConditionalExpression
		public RuleCall getPositionConditionalExpressionParserRuleCall_3_2_1_0() { return cPositionConditionalExpressionParserRuleCall_3_2_1_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'target'
		public Keyword getTargetKeyword_3_3_0() { return cTargetKeyword_3_3_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_3_1() { return cTargetAssignment_3_3_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_3_1_0() { return cTargetElementCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_3_1_0_1() { return cTargetElementIDTerminalRuleCall_3_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.ForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForEachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cListFieldKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cListFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cListFieldIDTerminalRuleCall_3_0_1_0 = (RuleCall)cListFieldAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cItemFieldKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cItemFieldAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cItemFieldIDTerminalRuleCall_3_1_1_0 = (RuleCall)cItemFieldAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cPositionFieldKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cPositionFieldAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cPositionFieldIDTerminalRuleCall_3_2_1_0 = (RuleCall)cPositionFieldAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cTargetKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTargetAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_3_1_0 = (CrossReference)cTargetAssignment_3_3_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cTargetElementCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForEach:
		//	'ForEach'
		//	name=ID
		//	'{' ('listField' listField=ID
		//	| 'itemField' itemField=ID
		//	| 'positionField' positionField=ID
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ForEach' name=ID '{' ('listField' listField=ID | 'itemField' itemField=ID | 'positionField' positionField=ID | 'target'
		//target=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'ForEach'
		public Keyword getForEachKeyword_0() { return cForEachKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('listField' listField=ID | 'itemField' itemField=ID | 'positionField' positionField=ID | 'target' target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'listField' listField=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'listField'
		public Keyword getListFieldKeyword_3_0_0() { return cListFieldKeyword_3_0_0; }
		
		//listField=ID
		public Assignment getListFieldAssignment_3_0_1() { return cListFieldAssignment_3_0_1; }
		
		//ID
		public RuleCall getListFieldIDTerminalRuleCall_3_0_1_0() { return cListFieldIDTerminalRuleCall_3_0_1_0; }
		
		//'itemField' itemField=ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'itemField'
		public Keyword getItemFieldKeyword_3_1_0() { return cItemFieldKeyword_3_1_0; }
		
		//itemField=ID
		public Assignment getItemFieldAssignment_3_1_1() { return cItemFieldAssignment_3_1_1; }
		
		//ID
		public RuleCall getItemFieldIDTerminalRuleCall_3_1_1_0() { return cItemFieldIDTerminalRuleCall_3_1_1_0; }
		
		//'positionField' positionField=ID
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'positionField'
		public Keyword getPositionFieldKeyword_3_2_0() { return cPositionFieldKeyword_3_2_0; }
		
		//positionField=ID
		public Assignment getPositionFieldAssignment_3_2_1() { return cPositionFieldAssignment_3_2_1; }
		
		//ID
		public RuleCall getPositionFieldIDTerminalRuleCall_3_2_1_0() { return cPositionFieldIDTerminalRuleCall_3_2_1_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'target'
		public Keyword getTargetKeyword_3_3_0() { return cTargetKeyword_3_3_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_3_1() { return cTargetAssignment_3_3_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_3_1_0() { return cTargetElementCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_3_1_0_1() { return cTargetElementIDTerminalRuleCall_3_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CollectByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.CollectBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollectByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFieldKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cElementFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cElementFieldIDTerminalRuleCall_3_0_1_0 = (RuleCall)cElementFieldAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cCollectByKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCollectByAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCollectByConditionalExpressionParserRuleCall_3_1_1_0 = (RuleCall)cCollectByAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cTargetKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTargetAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_2_1_0 = (CrossReference)cTargetAssignment_3_2_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cTargetElementCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CollectBy:
		//	'CollectBy'
		//	name=ID
		//	'{' ('field' elementField=ID
		//	| 'collectBy' collectBy=ConditionalExpression
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CollectBy' name=ID '{' ('field' elementField=ID | 'collectBy' collectBy=ConditionalExpression | 'target'
		//target=[Element])* '}'
		public Group getGroup() { return cGroup; }
		
		//'CollectBy'
		public Keyword getCollectByKeyword_0() { return cCollectByKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('field' elementField=ID | 'collectBy' collectBy=ConditionalExpression | 'target' target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'field' elementField=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'field'
		public Keyword getFieldKeyword_3_0_0() { return cFieldKeyword_3_0_0; }
		
		//elementField=ID
		public Assignment getElementFieldAssignment_3_0_1() { return cElementFieldAssignment_3_0_1; }
		
		//ID
		public RuleCall getElementFieldIDTerminalRuleCall_3_0_1_0() { return cElementFieldIDTerminalRuleCall_3_0_1_0; }
		
		//'collectBy' collectBy=ConditionalExpression
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'collectBy'
		public Keyword getCollectByKeyword_3_1_0() { return cCollectByKeyword_3_1_0; }
		
		//collectBy=ConditionalExpression
		public Assignment getCollectByAssignment_3_1_1() { return cCollectByAssignment_3_1_1; }
		
		//ConditionalExpression
		public RuleCall getCollectByConditionalExpressionParserRuleCall_3_1_1_0() { return cCollectByConditionalExpressionParserRuleCall_3_1_1_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'target'
		public Keyword getTargetKeyword_3_2_0() { return cTargetKeyword_3_2_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_2_1() { return cTargetAssignment_3_2_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_2_1_0() { return cTargetElementCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_2_1_0_1() { return cTargetElementIDTerminalRuleCall_3_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EvaluateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.Evaluate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEvaluateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFieldKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cFieldAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_3_0_1_0 = (RuleCall)cFieldAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cExpressionKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExpressionConditionalExpressionParserRuleCall_3_1_1_0 = (RuleCall)cExpressionAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cTargetKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTargetAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cTargetElementCrossReference_3_2_1_0 = (CrossReference)cTargetAssignment_3_2_1.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cTargetElementCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Evaluate:
		//	'Evaluate'
		//	name=ID
		//	'{' ('field' field=ID
		//	| 'expression' expression=ConditionalExpression
		//	| 'target' target=[Element])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Evaluate' name=ID '{' ('field' field=ID | 'expression' expression=ConditionalExpression | 'target' target=[Element])*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Evaluate'
		public Keyword getEvaluateKeyword_0() { return cEvaluateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('field' field=ID | 'expression' expression=ConditionalExpression | 'target' target=[Element])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'field' field=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'field'
		public Keyword getFieldKeyword_3_0_0() { return cFieldKeyword_3_0_0; }
		
		//field=ID
		public Assignment getFieldAssignment_3_0_1() { return cFieldAssignment_3_0_1; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_3_0_1_0() { return cFieldIDTerminalRuleCall_3_0_1_0; }
		
		//'expression' expression=ConditionalExpression
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_3_1_0() { return cExpressionKeyword_3_1_0; }
		
		//expression=ConditionalExpression
		public Assignment getExpressionAssignment_3_1_1() { return cExpressionAssignment_3_1_1; }
		
		//ConditionalExpression
		public RuleCall getExpressionConditionalExpressionParserRuleCall_3_1_1_0() { return cExpressionConditionalExpressionParserRuleCall_3_1_1_0; }
		
		//'target' target=[Element]
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'target'
		public Keyword getTargetKeyword_3_2_0() { return cTargetKeyword_3_2_0; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3_2_1() { return cTargetAssignment_3_2_1; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_2_1_0() { return cTargetElementCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_2_1_0_1() { return cTargetElementIDTerminalRuleCall_3_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.ConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOrExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Action cConditionalExpressionConditionExpressionAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Keyword cThenKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cThenExpressionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cThenExpressionOrExpressionParserRuleCall_0_4_0 = (RuleCall)cThenExpressionAssignment_0_4.eContents().get(0);
		private final Keyword cElseKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cElseExpressionAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cElseExpressionOrExpressionParserRuleCall_0_6_0 = (RuleCall)cElseExpressionAssignment_0_6.eContents().get(0);
		private final RuleCall cOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionalExpression Expression:
		//	'if' OrExpression {ConditionalExpression.conditionExpression=current} 'then' thenExpression=OrExpression 'else'
		//	elseExpression=OrExpression
		//	| OrExpression
		@Override public ParserRule getRule() { return rule; }
		
		//'if' OrExpression {ConditionalExpression.conditionExpression=current} 'then' thenExpression=OrExpression 'else'
		//elseExpression=OrExpression | OrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'if' OrExpression {ConditionalExpression.conditionExpression=current} 'then' thenExpression=OrExpression 'else'
		//elseExpression=OrExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0_1() { return cOrExpressionParserRuleCall_0_1; }
		
		//{ConditionalExpression.conditionExpression=current}
		public Action getConditionalExpressionConditionExpressionAction_0_2() { return cConditionalExpressionConditionExpressionAction_0_2; }
		
		//'then'
		public Keyword getThenKeyword_0_3() { return cThenKeyword_0_3; }
		
		//thenExpression=OrExpression
		public Assignment getThenExpressionAssignment_0_4() { return cThenExpressionAssignment_0_4; }
		
		//OrExpression
		public RuleCall getThenExpressionOrExpressionParserRuleCall_0_4_0() { return cThenExpressionOrExpressionParserRuleCall_0_4_0; }
		
		//'else'
		public Keyword getElseKeyword_0_5() { return cElseKeyword_0_5; }
		
		//elseExpression=OrExpression
		public Assignment getElseExpressionAssignment_0_6() { return cElseExpressionAssignment_0_6; }
		
		//OrExpression
		public RuleCall getElseExpressionOrExpressionParserRuleCall_0_6_0() { return cElseExpressionOrExpressionParserRuleCall_0_6_0; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1() { return cOrExpressionParserRuleCall_1; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOrOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression ({BinaryOperation.leftExpression=current} operator=OrOperator rightExpression=AndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({BinaryOperation.leftExpression=current} operator=OrOperator rightExpression=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({BinaryOperation.leftExpression=current} operator=OrOperator rightExpression=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation.leftExpression=current}
		public Action getBinaryOperationLeftExpressionAction_1_0() { return cBinaryOperationLeftExpressionAction_1_0; }
		
		//operator=OrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//OrOperator
		public RuleCall getOperatorOrOperatorEnumRuleCall_1_1_0() { return cOperatorOrOperatorEnumRuleCall_1_1_0; }
		
		//rightExpression=AndExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightExpressionAndExpressionParserRuleCall_1_2_0() { return cRightExpressionAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	EqualityExpression ({BinaryOperation.leftExpression=current} operator=AndOperator rightExpression=EqualityExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({BinaryOperation.leftExpression=current} operator=AndOperator rightExpression=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({BinaryOperation.leftExpression=current} operator=AndOperator rightExpression=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation.leftExpression=current}
		public Action getBinaryOperationLeftExpressionAction_1_0() { return cBinaryOperationLeftExpressionAction_1_0; }
		
		//operator=AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AndOperator
		public RuleCall getOperatorAndOperatorEnumRuleCall_1_1_0() { return cOperatorAndOperatorEnumRuleCall_1_1_0; }
		
		//rightExpression=EqualityExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightExpressionEqualityExpressionParserRuleCall_1_2_0() { return cRightExpressionEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//EqualityExpression Expression:
		//	RelationalExpression ({BinaryOperation.leftExpression=current} operator=EqualityOperator
		//	rightExpression=RelationalExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({BinaryOperation.leftExpression=current} operator=EqualityOperator
		//rightExpression=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({BinaryOperation.leftExpression=current} operator=EqualityOperator rightExpression=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation.leftExpression=current}
		public Action getBinaryOperationLeftExpressionAction_1_0() { return cBinaryOperationLeftExpressionAction_1_0; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorEnumRuleCall_1_1_0() { return cOperatorEqualityOperatorEnumRuleCall_1_1_0; }
		
		//rightExpression=RelationalExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//RelationalExpression
		public RuleCall getRightExpressionRelationalExpressionParserRuleCall_1_2_0() { return cRightExpressionRelationalExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//RelationalExpression Expression:
		//	AdditiveExpression ({BinaryOperation.leftExpression=current} operator=RelationalOperator
		//	rightExpression=AdditiveExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({BinaryOperation.leftExpression=current} operator=RelationalOperator
		//rightExpression=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({BinaryOperation.leftExpression=current} operator=RelationalOperator rightExpression=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation.leftExpression=current}
		public Action getBinaryOperationLeftExpressionAction_1_0() { return cBinaryOperationLeftExpressionAction_1_0; }
		
		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_1_0() { return cOperatorRelationalOperatorEnumRuleCall_1_1_0; }
		
		//rightExpression=AdditiveExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightExpressionAdditiveExpressionParserRuleCall_1_2_0() { return cRightExpressionAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	MultiplicativeExpression ({BinaryOperation.leftExpression=current} operator=AdditiveOperator
		//	rightExpression=MultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({BinaryOperation.leftExpression=current} operator=AdditiveOperator
		//rightExpression=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({BinaryOperation.leftExpression=current} operator=AdditiveOperator rightExpression=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation.leftExpression=current}
		public Action getBinaryOperationLeftExpressionAction_1_0() { return cBinaryOperationLeftExpressionAction_1_0; }
		
		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_1_0; }
		
		//rightExpression=MultiplicativeExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getRightExpressionMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightExpressionMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	UnaryExpression ({BinaryOperation.leftExpression=current} operator=MultiplicativeOperator
		//	rightExpression=UnaryExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({BinaryOperation.leftExpression=current} operator=MultiplicativeOperator
		//rightExpression=UnaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({BinaryOperation.leftExpression=current} operator=MultiplicativeOperator rightExpression=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation.leftExpression=current}
		public Action getBinaryOperationLeftExpressionAction_1_0() { return cBinaryOperationLeftExpressionAction_1_0; }
		
		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }
		
		//rightExpression=UnaryExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//UnaryExpression
		public RuleCall getRightExpressionUnaryExpressionParserRuleCall_1_2_0() { return cRightExpressionUnaryExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final RuleCall cFeatureCallExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpression Expression:
		//	{UnaryOperation} operator=UnaryOperator expression=UnaryExpression
		//	| FeatureCallExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryOperation} operator=UnaryOperator expression=UnaryExpression | FeatureCallExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UnaryOperation} operator=UnaryOperator expression=UnaryExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }
		
		//operator=UnaryOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_0_1_0() { return cOperatorUnaryOperatorEnumRuleCall_0_1_0; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_0_2_0() { return cExpressionUnaryExpressionParserRuleCall_0_2_0; }
		
		//FeatureCallExpression
		public RuleCall getFeatureCallExpressionParserRuleCall_1() { return cFeatureCallExpressionParserRuleCall_1; }
	}
	public class FeatureCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.FeatureCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFeatureCallTargetExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFeatureAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFeatureIDTerminalRuleCall_1_2_0 = (RuleCall)cFeatureAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cParametersAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cParametersOrExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cParametersAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cParametersAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//FeatureCallExpression Expression:
		//	PrimaryExpression ({FeatureCall.targetExpression=current} '.' feature=ID ('(' (parameters+=OrExpression (','
		//	parameters+=OrExpression)*)? ')')?)*
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({FeatureCall.targetExpression=current} '.' feature=ID ('(' (parameters+=OrExpression (','
		//parameters+=OrExpression)*)? ')')?)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({FeatureCall.targetExpression=current} '.' feature=ID ('(' (parameters+=OrExpression (',' parameters+=OrExpression)*)?
		//')')?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{FeatureCall.targetExpression=current}
		public Action getFeatureCallTargetExpressionAction_1_0() { return cFeatureCallTargetExpressionAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//feature=ID
		public Assignment getFeatureAssignment_1_2() { return cFeatureAssignment_1_2; }
		
		//ID
		public RuleCall getFeatureIDTerminalRuleCall_1_2_0() { return cFeatureIDTerminalRuleCall_1_2_0; }
		
		//('(' (parameters+=OrExpression (',' parameters+=OrExpression)*)? ')')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3_0() { return cLeftParenthesisKeyword_1_3_0; }
		
		//(parameters+=OrExpression (',' parameters+=OrExpression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//parameters+=OrExpression
		public Assignment getParametersAssignment_1_3_1_0() { return cParametersAssignment_1_3_1_0; }
		
		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_1_3_1_0_0() { return cParametersOrExpressionParserRuleCall_1_3_1_0_0; }
		
		//(',' parameters+=OrExpression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }
		
		//parameters+=OrExpression
		public Assignment getParametersAssignment_1_3_1_1_1() { return cParametersAssignment_1_3_1_1_1; }
		
		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_1_3_1_1_1_0() { return cParametersOrExpressionParserRuleCall_1_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntegerLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFieldReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cFieldAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_4_1_0 = (RuleCall)cFieldAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cOrExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//PrimaryExpression Expression:
		//	{IntegerLiteral} value=EInt
		//	| {BooleanLiteral} value=EBoolean
		//	| {RealLiteral} value=EDouble
		//	| {StringLiteral} value=STRING
		//	| {FieldReference} field=ID
		//	| '(' OrExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerLiteral} value=EInt | {BooleanLiteral} value=EBoolean | {RealLiteral} value=EDouble | {StringLiteral}
		//value=STRING | {FieldReference} field=ID | '(' OrExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntegerLiteral} value=EInt
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntegerLiteral}
		public Action getIntegerLiteralAction_0_0() { return cIntegerLiteralAction_0_0; }
		
		//value=EInt
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0_1_0() { return cValueEIntParserRuleCall_0_1_0; }
		
		//{BooleanLiteral} value=EBoolean
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }
		
		//value=EBoolean
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_1_1_0() { return cValueEBooleanParserRuleCall_1_1_0; }
		
		//{RealLiteral} value=EDouble
		public Group getGroup_2() { return cGroup_2; }
		
		//{RealLiteral}
		public Action getRealLiteralAction_2_0() { return cRealLiteralAction_2_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_2_1_0() { return cValueEDoubleParserRuleCall_2_1_0; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_3_0() { return cStringLiteralAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{FieldReference} field=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//{FieldReference}
		public Action getFieldReferenceAction_4_0() { return cFieldReferenceAction_4_0; }
		
		//field=ID
		public Assignment getFieldAssignment_4_1() { return cFieldAssignment_4_1; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_4_1_0() { return cFieldIDTerminalRuleCall_4_1_0; }
		
		//'(' OrExpression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_5_1() { return cOrExpressionParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt ecore::EInt:
		//	INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//EDouble ecore::EDouble:
		//	INT? '.' INT (('E' | 'e') '-'? INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'E'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }
		
		//'e'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_3_1() { return cHyphenMinusKeyword_3_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}
	
	public class ContainerTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.ContainerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLISTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLISTListKeyword_0_0 = (Keyword)cLISTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSETEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSETSetKeyword_1_0 = (Keyword)cSETEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ContainerType:
		//	LIST='list' | SET='set';
		public EnumRule getRule() { return rule; }
		
		//LIST='list' | SET='set'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LIST='list'
		public EnumLiteralDeclaration getLISTEnumLiteralDeclaration_0() { return cLISTEnumLiteralDeclaration_0; }
		
		//'list'
		public Keyword getLISTListKeyword_0_0() { return cLISTListKeyword_0_0; }
		
		//SET='set'
		public EnumLiteralDeclaration getSETEnumLiteralDeclaration_1() { return cSETEnumLiteralDeclaration_1; }
		
		//'set'
		public Keyword getSETSetKeyword_1_0() { return cSETSetKeyword_1_0; }
	}
	public class OrOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.OrOperator");
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOROrKeyword_0 = (Keyword)cOREnumLiteralDeclaration.eContents().get(0);
		
		//enum OrOperator returns BinaryOperator:
		//	OR='or';
		public EnumRule getRule() { return rule; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration() { return cOREnumLiteralDeclaration; }
		
		//'or'
		public Keyword getOROrKeyword_0() { return cOROrKeyword_0; }
	}
	public class AndOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.AndOperator");
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cANDAndKeyword_0 = (Keyword)cANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum AndOperator returns BinaryOperator:
		//	AND='and';
		public EnumRule getRule() { return rule; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration() { return cANDEnumLiteralDeclaration; }
		
		//'and'
		public Keyword getANDAndKeyword_0() { return cANDAndKeyword_0; }
	}
	public class EqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator returns BinaryOperator:
		//	EQ='=' | NE='!=';
		public EnumRule getRule() { return rule; }
		
		//EQ='=' | NE='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ='='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }
		
		//NE='!='
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_1() { return cNEEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNEExclamationMarkEqualsSignKeyword_1_0() { return cNEExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGTGreaterThanSignKeyword_0_0 = (Keyword)cGTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLTLessThanSignKeyword_2_0 = (Keyword)cLTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLELessThanSignEqualsSignKeyword_3_0 = (Keyword)cLEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RelationalOperator returns BinaryOperator:
		//	GT='>' | GE='>=' | LT='<' | LE='<=';
		public EnumRule getRule() { return rule; }
		
		//GT='>' | GE='>=' | LT='<' | LE='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_0() { return cGTEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGTGreaterThanSignKeyword_0_0() { return cGTGreaterThanSignKeyword_0_0; }
		
		//GE='>='
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_1() { return cGEEnumLiteralDeclaration_1; }
		
		//'>='
		public Keyword getGEGreaterThanSignEqualsSignKeyword_1_0() { return cGEGreaterThanSignEqualsSignKeyword_1_0; }
		
		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_2() { return cLTEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLTLessThanSignKeyword_2_0() { return cLTLessThanSignKeyword_2_0; }
		
		//LE='<='
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_3() { return cLEEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLELessThanSignEqualsSignKeyword_3_0() { return cLELessThanSignEqualsSignKeyword_3_0; }
	}
	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator returns BinaryOperator:
		//	ADD='+' | SUBTRACT='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUBTRACT='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBTRACT='-'
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
	}
	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLYAsteriskKeyword_0_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODULOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODULOPercentSignKeyword_2_0 = (Keyword)cMODULOEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator returns BinaryOperator:
		//	MULTIPLY='*' | DIVIDE='/' | MODULO='%';
		public EnumRule getRule() { return rule; }
		
		//MULTIPLY='*' | DIVIDE='/' | MODULO='%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTIPLY='*'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_0() { return cMULTIPLYEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMULTIPLYAsteriskKeyword_0_0() { return cMULTIPLYAsteriskKeyword_0_0; }
		
		//DIVIDE='/'
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_1() { return cDIVIDEEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }
		
		//MODULO='%'
		public EnumLiteralDeclaration getMODULOEnumLiteralDeclaration_2() { return cMODULOEnumLiteralDeclaration_2; }
		
		//'%'
		public Keyword getMODULOPercentSignKeyword_2_0() { return cMODULOPercentSignKeyword_2_0; }
	}
	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.ttc.dataflow.DataflowDSL.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOTNotKeyword_0_0 = (Keyword)cNOTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEGATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEGATIONHyphenMinusKeyword_1_0 = (Keyword)cNEGATIONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOperator:
		//	NOT='not' | NEGATION='-';
		public EnumRule getRule() { return rule; }
		
		//NOT='not' | NEGATION='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOT='not'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_0() { return cNOTEnumLiteralDeclaration_0; }
		
		//'not'
		public Keyword getNOTNotKeyword_0_0() { return cNOTNotKeyword_0_0; }
		
		//NEGATION='-'
		public EnumLiteralDeclaration getNEGATIONEnumLiteralDeclaration_1() { return cNEGATIONEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getNEGATIONHyphenMinusKeyword_1_0() { return cNEGATIONHyphenMinusKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final AllInstancesElements pAllInstances;
	private final NewInstanceElements pNewInstance;
	private final FilterElements pFilter;
	private final CopyElements pCopy;
	private final SortElements pSort;
	private final ProductElements pProduct;
	private final GetFeatureElements pGetFeature;
	private final SetFeatureElements pSetFeature;
	private final NewContainerElements pNewContainer;
	private final AddToContainerElements pAddToContainer;
	private final ForEachElements pForEach;
	private final CollectByElements pCollectBy;
	private final EvaluateElements pEvaluate;
	private final ContainerTypeElements eContainerType;
	private final ConditionalExpressionElements pConditionalExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final FeatureCallExpressionElements pFeatureCallExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	private final EDoubleElements pEDouble;
	private final OrOperatorElements eOrOperator;
	private final AndOperatorElements eAndOperator;
	private final EqualityOperatorElements eEqualityOperator;
	private final RelationalOperatorElements eRelationalOperator;
	private final AdditiveOperatorElements eAdditiveOperator;
	private final MultiplicativeOperatorElements eMultiplicativeOperator;
	private final UnaryOperatorElements eUnaryOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DataflowDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pAllInstances = new AllInstancesElements();
		this.pNewInstance = new NewInstanceElements();
		this.pFilter = new FilterElements();
		this.pCopy = new CopyElements();
		this.pSort = new SortElements();
		this.pProduct = new ProductElements();
		this.pGetFeature = new GetFeatureElements();
		this.pSetFeature = new SetFeatureElements();
		this.pNewContainer = new NewContainerElements();
		this.pAddToContainer = new AddToContainerElements();
		this.pForEach = new ForEachElements();
		this.pCollectBy = new CollectByElements();
		this.pEvaluate = new EvaluateElements();
		this.eContainerType = new ContainerTypeElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pFeatureCallExpression = new FeatureCallExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
		this.pEDouble = new EDoubleElements();
		this.eOrOperator = new OrOperatorElements();
		this.eAndOperator = new AndOperatorElements();
		this.eEqualityOperator = new EqualityOperatorElements();
		this.eRelationalOperator = new RelationalOperatorElements();
		this.eAdditiveOperator = new AdditiveOperatorElements();
		this.eMultiplicativeOperator = new MultiplicativeOperatorElements();
		this.eUnaryOperator = new UnaryOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.ttc.dataflow.DataflowDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} elements+=Element*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Element:
	//	AllInstances | NewInstance | Filter | Sort | Copy | Product | GetFeature | SetFeature | NewContainer | AddToContainer
	//	| ForEach | CollectBy | Evaluate;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//AllInstances:
	//	'AllInstances'
	//	name=ID
	//	'{' ('field' field=ID
	//	| 'type' (model=ID '!')? (packageName=ID '::')? typeName=ID
	//	| 'target' target=[Element])*
	//	'}';
	public AllInstancesElements getAllInstancesAccess() {
		return pAllInstances;
	}
	
	public ParserRule getAllInstancesRule() {
		return getAllInstancesAccess().getRule();
	}
	
	//NewInstance:
	//	'NewInstance'
	//	name=ID
	//	'{' ('field' instanceField=ID
	//	| 'key' key=ConditionalExpression
	//	| 'type' (model=ID '!')? (packageName=ID '::')? typeName=ID
	//	| 'target' target=[Element])*
	//	'}';
	public NewInstanceElements getNewInstanceAccess() {
		return pNewInstance;
	}
	
	public ParserRule getNewInstanceRule() {
		return getNewInstanceAccess().getRule();
	}
	
	//Filter:
	//	'Filter'
	//	name=ID
	//	'{' ('filterBy' filterBy=ConditionalExpression
	//	| 'target' target=[Element] | 'rejectTarget' rejectTarget=[Element])*
	//	'}';
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//Copy:
	//	'Copy'
	//	name=ID
	//	'{' ('target' target=[Element] | 'copyTarget' copyTarget=[Element])*
	//	'}';
	public CopyElements getCopyAccess() {
		return pCopy;
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}
	
	//Sort:
	//	'Sort'
	//	name=ID
	//	'{' ('sortBy' sortBy=ConditionalExpression
	//	| 'target' target=[Element])*
	//	'}';
	public SortElements getSortAccess() {
		return pSort;
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}
	
	//Product:
	//	'Product'
	//	name=ID
	//	'{' ('target' target=[Element])?
	//	'}';
	public ProductElements getProductAccess() {
		return pProduct;
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}
	
	//GetFeature:
	//	'GetFeature'
	//	name=ID
	//	'{' ('objectField' objectField=ID
	//	| 'valueField' valueField=ID
	//	| 'feature' feature=ID
	//	| 'target' target=[Element])*
	//	'}';
	public GetFeatureElements getGetFeatureAccess() {
		return pGetFeature;
	}
	
	public ParserRule getGetFeatureRule() {
		return getGetFeatureAccess().getRule();
	}
	
	//SetFeature:
	//	'SetFeature'
	//	name=ID
	//	'{' ('field' objectField=ID
	//	| 'value' value=ConditionalExpression
	//	| 'feature' feature=ID
	//	| 'target' target=[Element])*
	//	'}';
	public SetFeatureElements getSetFeatureAccess() {
		return pSetFeature;
	}
	
	public ParserRule getSetFeatureRule() {
		return getSetFeatureAccess().getRule();
	}
	
	//NewContainer:
	//	'NewContainer'
	//	name=ID
	//	'{' ('field' listField=ID)? ('containerType' containerType=ContainerType)? ('target' target=[Element])?
	//	'}';
	public NewContainerElements getNewContainerAccess() {
		return pNewContainer;
	}
	
	public ParserRule getNewContainerRule() {
		return getNewContainerAccess().getRule();
	}
	
	//AddToContainer:
	//	'AddToContainer'
	//	name=ID
	//	'{' ('field' listField=ID
	//	| 'value' value=ConditionalExpression
	//	| 'position' position=ConditionalExpression
	//	| 'target' target=[Element])*
	//	'}';
	public AddToContainerElements getAddToContainerAccess() {
		return pAddToContainer;
	}
	
	public ParserRule getAddToContainerRule() {
		return getAddToContainerAccess().getRule();
	}
	
	//ForEach:
	//	'ForEach'
	//	name=ID
	//	'{' ('listField' listField=ID
	//	| 'itemField' itemField=ID
	//	| 'positionField' positionField=ID
	//	| 'target' target=[Element])*
	//	'}';
	public ForEachElements getForEachAccess() {
		return pForEach;
	}
	
	public ParserRule getForEachRule() {
		return getForEachAccess().getRule();
	}
	
	//CollectBy:
	//	'CollectBy'
	//	name=ID
	//	'{' ('field' elementField=ID
	//	| 'collectBy' collectBy=ConditionalExpression
	//	| 'target' target=[Element])*
	//	'}';
	public CollectByElements getCollectByAccess() {
		return pCollectBy;
	}
	
	public ParserRule getCollectByRule() {
		return getCollectByAccess().getRule();
	}
	
	//Evaluate:
	//	'Evaluate'
	//	name=ID
	//	'{' ('field' field=ID
	//	| 'expression' expression=ConditionalExpression
	//	| 'target' target=[Element])*
	//	'}';
	public EvaluateElements getEvaluateAccess() {
		return pEvaluate;
	}
	
	public ParserRule getEvaluateRule() {
		return getEvaluateAccess().getRule();
	}
	
	//enum ContainerType:
	//	LIST='list' | SET='set';
	public ContainerTypeElements getContainerTypeAccess() {
		return eContainerType;
	}
	
	public EnumRule getContainerTypeRule() {
		return getContainerTypeAccess().getRule();
	}
	
	//ConditionalExpression Expression:
	//	'if' OrExpression {ConditionalExpression.conditionExpression=current} 'then' thenExpression=OrExpression 'else'
	//	elseExpression=OrExpression
	//	| OrExpression
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//OrExpression Expression:
	//	AndExpression ({BinaryOperation.leftExpression=current} operator=OrOperator rightExpression=AndExpression)*
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	EqualityExpression ({BinaryOperation.leftExpression=current} operator=AndOperator rightExpression=EqualityExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	RelationalExpression ({BinaryOperation.leftExpression=current} operator=EqualityOperator
	//	rightExpression=RelationalExpression)*
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	AdditiveExpression ({BinaryOperation.leftExpression=current} operator=RelationalOperator
	//	rightExpression=AdditiveExpression)*
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({BinaryOperation.leftExpression=current} operator=AdditiveOperator
	//	rightExpression=MultiplicativeExpression)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	UnaryExpression ({BinaryOperation.leftExpression=current} operator=MultiplicativeOperator
	//	rightExpression=UnaryExpression)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//UnaryExpression Expression:
	//	{UnaryOperation} operator=UnaryOperator expression=UnaryExpression
	//	| FeatureCallExpression
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//FeatureCallExpression Expression:
	//	PrimaryExpression ({FeatureCall.targetExpression=current} '.' feature=ID ('(' (parameters+=OrExpression (','
	//	parameters+=OrExpression)*)? ')')?)*
	public FeatureCallExpressionElements getFeatureCallExpressionAccess() {
		return pFeatureCallExpression;
	}
	
	public ParserRule getFeatureCallExpressionRule() {
		return getFeatureCallExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	{IntegerLiteral} value=EInt
	//	| {BooleanLiteral} value=EBoolean
	//	| {RealLiteral} value=EDouble
	//	| {StringLiteral} value=STRING
	//	| {FieldReference} field=ID
	//	| '(' OrExpression ')'
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	INT? '.' INT (('E' | 'e') '-'? INT)?
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//enum OrOperator returns BinaryOperator:
	//	OR='or';
	public OrOperatorElements getOrOperatorAccess() {
		return eOrOperator;
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//enum AndOperator returns BinaryOperator:
	//	AND='and';
	public AndOperatorElements getAndOperatorAccess() {
		return eAndOperator;
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//enum EqualityOperator returns BinaryOperator:
	//	EQ='=' | NE='!=';
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return eEqualityOperator;
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//enum RelationalOperator returns BinaryOperator:
	//	GT='>' | GE='>=' | LT='<' | LE='<=';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return eRelationalOperator;
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//enum AdditiveOperator returns BinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return eAdditiveOperator;
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}
	
	//enum MultiplicativeOperator returns BinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | MODULO='%';
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return eMultiplicativeOperator;
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}
	
	//enum UnaryOperator:
	//	NOT='not' | NEGATION='-';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return eUnaryOperator;
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
