/*
 * generated by Xtext 2.9.2
 */
package eu.ttc.dataflow.serializer;

import com.google.inject.Inject;
import eu.ttc.dataflow.services.DataflowDSLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DataflowDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DataflowDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_FeatureCallExpression___LeftParenthesisKeyword_1_3_0_RightParenthesisKeyword_1_3_2__q;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_5_0_a;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_5_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DataflowDSLGrammarAccess) access;
		match_FeatureCallExpression___LeftParenthesisKeyword_1_3_0_RightParenthesisKeyword_1_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getFeatureCallExpressionAccess().getLeftParenthesisKeyword_1_3_0()), new TokenAlias(false, false, grammarAccess.getFeatureCallExpressionAccess().getRightParenthesisKeyword_1_3_2()));
		match_PrimaryExpression_LeftParenthesisKeyword_5_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_5_0());
		match_PrimaryExpression_LeftParenthesisKeyword_5_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_5_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_FeatureCallExpression___LeftParenthesisKeyword_1_3_0_RightParenthesisKeyword_1_3_2__q.equals(syntax))
				emit_FeatureCallExpression___LeftParenthesisKeyword_1_3_0_RightParenthesisKeyword_1_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_LeftParenthesisKeyword_5_0_a.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_5_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_LeftParenthesisKeyword_5_0_p.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_5_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     feature=ID (ambiguity) ')' (rule end)
	 *     feature=ID (ambiguity) (rule end)
	 */
	protected void emit_FeatureCallExpression___LeftParenthesisKeyword_1_3_0_RightParenthesisKeyword_1_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' (ambiguity) field=ID
	 *     (rule start) 'if' (ambiguity) operator=UnaryOperator
	 *     (rule start) 'if' (ambiguity) value=EBoolean
	 *     (rule start) 'if' (ambiguity) value=EDouble
	 *     (rule start) 'if' (ambiguity) value=EInt
	 *     (rule start) 'if' (ambiguity) value=STRING
	 *     (rule start) 'if' (ambiguity) {BinaryOperation.leftExpression=}
	 *     (rule start) 'if' (ambiguity) {FeatureCall.targetExpression=}
	 *     (rule start) (ambiguity) field=ID
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) value=EBoolean
	 *     (rule start) (ambiguity) value=EDouble
	 *     (rule start) (ambiguity) value=EInt
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {BinaryOperation.leftExpression=}
	 *     (rule start) (ambiguity) {FeatureCall.targetExpression=}
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_5_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) {BinaryOperation.leftExpression=}
	 *     (rule start) (ambiguity) {FeatureCall.targetExpression=}
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_5_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
