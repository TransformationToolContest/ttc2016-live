namespace hstmMM_p : 'hstmMM.emof'::hstmMM_p;
namespace stmMM_p : 'stmMM.emof'::stmMM_p;

transformation HstmToStm(hstm:hstmMM_p, stm:stmMM_p)
{
    key hstmMM_p::State {name};
    key hstmMM_p::Trans {name, fromState, toState};
    key stmMM_p::State {name};
    key stmMM_p::Trans {name, fromState, toState};

    top relation LStateToState {
        n : String;

        domain hstm s1:State {
            name = n
        } {not s1.containsState};

        enforce domain stm s2:State { name = n };
    }

    top relation CStateToState
    {
        tn : String;
        ms1: hstmMM_p::State;
        ms2: hstmMM_p::State;
        ts1: hstmMM_p::State;
        ts2: stmMM_p::State;

        domain hstm fs1:State
        {
            outTrans = t1:Trans {name = tn, toState = ts1}
        };

        enforce domain stm fs2:State
        {
            outTrans = t2:Trans {name = tn, toState = ts2}
        };

        when
        {
            LStateToState(ms1, fs2);
            (
                ms1 is fs1
                or
                StateContainsState(fs1, ms1)
            );
            LStateToState(ms2, ts2);
            (
                ms2 is ts1
                or
                StateContainsState(ts1, ms2)
            );
        }
    }

    query StateContainsState(cState:hstmMM_p::State, mState:hstmMM_p::State):Boolean
    {
    if not mState.containedInState:
        return False
    elif mState.containedInState is cState:
        return True
    else:
        return StateContainsState(cState, mState.containedInState)
    }
}
