# Generated from C:/git/mofongo/Languages/MVT/src/tech/mofongo\MQVTr.g4 by ANTLR 4.5.1
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0081")
        buf.write("\u0669\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\3\2\7\2\u011a\n\2\f\2\16\2\u011d")
        buf.write("\13\2\3\2\7\2\u0120\n\2\f\2\16\2\u0123\13\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\3\5\3\u012b\n\3\3\3\3\3\3\3\5\3\u0130\n\3")
        buf.write("\3\3\3\3\5\3\u0134\n\3\3\4\3\4\5\4\u0138\n\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\7\4\u013f\n\4\f\4\16\4\u0142\13\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\7\4\u0149\n\4\f\4\16\4\u014c\13\4\5\4\u014e")
        buf.write("\n\4\3\4\5\4\u0151\n\4\3\4\3\4\3\4\3\4\5\4\u0157\n\4\3")
        buf.write("\5\7\5\u015a\n\5\f\5\16\5\u015d\13\5\3\5\3\5\7\5\u0161")
        buf.write("\n\5\f\5\16\5\u0164\13\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7")
        buf.write("\6\u016d\n\6\f\6\16\6\u0170\13\6\3\6\3\6\5\6\u0174\n\6")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u017c\n\7\f\7\16\7\u017f")
        buf.write("\13\7\3\7\3\7\5\7\u0183\n\7\3\7\5\7\u0186\n\7\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\5\b\u018e\n\b\3\t\5\t\u0191\n\t\3\t\5")
        buf.write("\t\u0194\n\t\3\t\3\t\3\t\3\t\5\t\u019a\n\t\3\t\3\t\3\t")
        buf.write("\3\t\5\t\u01a0\n\t\3\n\3\n\3\13\7\13\u01a5\n\13\f\13\16")
        buf.write("\13\u01a8\13\13\3\13\3\13\6\13\u01ac\n\13\r\13\16\13\u01ad")
        buf.write("\3\13\5\13\u01b1\n\13\3\13\5\13\u01b4\n\13\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\7\f\u01bc\n\f\f\f\16\f\u01bf\13\f\5\f\u01c1")
        buf.write("\n\f\3\f\3\f\3\f\3\f\3\f\5\f\u01c8\n\f\3\f\3\f\3\f\3\f")
        buf.write("\5\f\u01ce\n\f\5\f\u01d0\n\f\3\r\3\r\3\r\3\r\6\r\u01d6")
        buf.write("\n\r\r\r\16\r\u01d7\5\r\u01da\n\r\3\16\3\16\3\16\3\16")
        buf.write("\3\17\3\17\7\17\u01e2\n\17\f\17\16\17\u01e5\13\17\3\17")
        buf.write("\3\17\5\17\u01e9\n\17\3\17\3\17\3\20\3\20\3\21\5\21\u01f0")
        buf.write("\n\21\3\21\3\21\3\21\5\21\u01f5\n\21\3\21\3\21\3\21\5")
        buf.write("\21\u01fa\n\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\7\24")
        buf.write("\u0203\n\24\f\24\16\24\u0206\13\24\3\24\3\24\3\24\5\24")
        buf.write("\u020b\n\24\5\24\u020d\n\24\3\24\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u0214\n\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\5\26\u021e\n\26\3\27\3\27\3\27\7\27\u0223\n\27\f\27\16")
        buf.write("\27\u0226\13\27\3\27\3\27\3\30\3\30\3\30\7\30\u022d\n")
        buf.write("\30\f\30\16\30\u0230\13\30\3\30\3\30\3\31\6\31\u0235\n")
        buf.write("\31\r\31\16\31\u0236\3\32\3\32\3\32\3\32\5\32\u023d\n")
        buf.write("\32\3\32\3\32\5\32\u0241\n\32\3\33\3\33\5\33\u0245\n\33")
        buf.write("\3\33\3\33\3\33\3\33\5\33\u024b\n\33\3\34\3\34\3\34\3")
        buf.write("\34\3\34\5\34\u0252\n\34\3\34\3\34\3\35\3\35\3\35\5\35")
        buf.write("\u0259\n\35\3\35\3\35\3\35\3\35\5\35\u025f\n\35\7\35\u0261")
        buf.write("\n\35\f\35\16\35\u0264\13\35\3\35\3\35\3\35\5\35\u0269")
        buf.write("\n\35\3\36\5\36\u026c\n\36\3\36\3\36\3\36\5\36\u0271\n")
        buf.write("\36\3\36\3\36\3\36\3\36\5\36\u0277\n\36\3\37\3\37\5\37")
        buf.write("\u027b\n\37\3\37\3\37\7\37\u027f\n\37\f\37\16\37\u0282")
        buf.write("\13\37\3\37\5\37\u0285\n\37\3 \3 \3 \3 \3 \3 \5 \u028d")
        buf.write("\n \3 \3 \3 \5 \u0292\n \3!\3!\3!\3!\3!\3!\3!\5!\u029b")
        buf.write("\n!\3\"\3\"\3\"\5\"\u02a0\n\"\3#\3#\3#\7#\u02a5\n#\f#")
        buf.write("\16#\u02a8\13#\3$\3$\5$\u02ac\n$\3%\3%\3%\3%\3%\7%\u02b3")
        buf.write("\n%\f%\16%\u02b6\13%\3&\3&\3\'\3\'\3\'\5\'\u02bd\n\'\3")
        buf.write("(\3(\3)\3)\3)\7)\u02c4\n)\f)\16)\u02c7\13)\3*\3*\3+\3")
        buf.write("+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62")
        buf.write("\3\62\3\62\3\62\5\62\u02de\n\62\3\63\3\63\3\64\3\64\3")
        buf.write("\65\3\65\3\65\3\65\5\65\u02e8\n\65\3\66\3\66\3\67\3\67")
        buf.write("\5\67\u02ee\n\67\38\38\39\39\39\39\39\59\u02f7\n9\3:\3")
        buf.write(":\7:\u02fb\n:\f:\16:\u02fe\13:\3:\3:\3;\3;\7;\u0304\n")
        buf.write(";\f;\16;\u0307\13;\3;\3;\3<\3<\3<\3<\5<\u030f\n<\3<\5")
        buf.write("<\u0312\n<\3<\3<\3=\6=\u0317\n=\r=\16=\u0318\3>\3>\3>")
        buf.write("\5>\u031e\n>\3?\3?\3?\3?\3?\5?\u0325\n?\3?\3?\3?\3@\3")
        buf.write("@\5@\u032c\n@\3@\3@\3A\3A\3A\5A\u0333\nA\3A\3A\3A\3A\5")
        buf.write("A\u0339\nA\7A\u033b\nA\fA\16A\u033e\13A\3A\3A\3A\5A\u0343")
        buf.write("\nA\3A\3A\3A\3A\5A\u0349\nA\7A\u034b\nA\fA\16A\u034e\13")
        buf.write("A\3A\3A\3A\5A\u0353\nA\3A\3A\5A\u0357\nA\5A\u0359\nA\3")
        buf.write("A\3A\5A\u035d\nA\3A\3A\3A\3A\5A\u0363\nA\7A\u0365\nA\f")
        buf.write("A\16A\u0368\13A\3A\3A\3A\5A\u036d\nA\3A\3A\5A\u0371\n")
        buf.write("A\3B\3B\3B\5B\u0376\nB\3C\3C\3C\5C\u037b\nC\3C\3C\3C\3")
        buf.write("C\5C\u0381\nC\7C\u0383\nC\fC\16C\u0386\13C\3C\3C\3C\5")
        buf.write("C\u038b\nC\3C\3C\3C\3C\5C\u0391\nC\7C\u0393\nC\fC\16C")
        buf.write("\u0396\13C\3C\3C\3C\5C\u039b\nC\3C\3C\5C\u039f\nC\5C\u03a1")
        buf.write("\nC\3C\3C\5C\u03a5\nC\3C\3C\3C\3C\5C\u03ab\nC\7C\u03ad")
        buf.write("\nC\fC\16C\u03b0\13C\3C\3C\3C\5C\u03b5\nC\3C\3C\5C\u03b9")
        buf.write("\nC\3D\3D\3E\3E\5E\u03bf\nE\3F\3F\3F\7F\u03c4\nF\fF\16")
        buf.write("F\u03c7\13F\3F\5F\u03ca\nF\3F\3F\3G\3G\3G\3G\3G\3G\3G")
        buf.write("\3G\5G\u03d6\nG\3H\3H\3H\3H\5H\u03dc\nH\3H\3H\3H\5H\u03e1")
        buf.write("\nH\7H\u03e3\nH\fH\16H\u03e6\13H\5H\u03e8\nH\3I\3I\5I")
        buf.write("\u03ec\nI\3I\3I\3I\5I\u03f1\nI\7I\u03f3\nI\fI\16I\u03f6")
        buf.write("\13I\3I\5I\u03f9\nI\3J\3J\3K\3K\3K\3L\3L\3M\3M\3M\3M\3")
        buf.write("M\5M\u0407\nM\3N\3N\3O\3O\3P\3P\5P\u040f\nP\3Q\3Q\3R\3")
        buf.write("R\3R\3R\5R\u0417\nR\5R\u0419\nR\3S\3S\5S\u041d\nS\3T\3")
        buf.write("T\3T\3U\3U\7U\u0424\nU\fU\16U\u0427\13U\3U\3U\6U\u042b")
        buf.write("\nU\rU\16U\u042c\5U\u042f\nU\3U\3U\3U\3U\3U\3U\3U\5U\u0438")
        buf.write("\nU\3V\3V\3V\5V\u043d\nV\3W\3W\3W\5W\u0442\nW\3X\3X\3")
        buf.write("X\7X\u0447\nX\fX\16X\u044a\13X\3X\5X\u044d\nX\3Y\3Y\3")
        buf.write("Y\7Y\u0452\nY\fY\16Y\u0455\13Y\3Z\3Z\3Z\7Z\u045a\nZ\f")
        buf.write("Z\16Z\u045d\13Z\3[\3[\3[\3[\7[\u0463\n[\f[\16[\u0466\13")
        buf.write("[\3\\\3\\\3\\\3\\\7\\\u046c\n\\\f\\\16\\\u046f\13\\\3")
        buf.write("]\3]\3]\3]\5]\u0475\n]\3^\3^\3^\3^\3^\3^\3^\3^\5^\u047f")
        buf.write("\n^\3_\3_\3_\3_\3_\3_\3_\3_\3_\7_\u048a\n_\f_\16_\u048d")
        buf.write("\13_\3_\3_\3_\5_\u0492\n_\3`\3`\3`\3`\3`\3`\3`\5`\u049b")
        buf.write("\n`\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u04a6\na\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\6b\u04af\nb\rb\16b\u04b0\3b\3b\3b\5b\u04b6")
        buf.write("\nb\3b\3b\3b\5b\u04bb\nb\3b\3b\3b\5b\u04c0\nb\3c\3c\3")
        buf.write("c\3c\7c\u04c6\nc\fc\16c\u04c9\13c\3c\3c\3c\3d\3d\3d\5")
        buf.write("d\u04d1\nd\3e\3e\3e\3e\5e\u04d7\ne\5e\u04d9\ne\3f\3f\3")
        buf.write("f\3f\6f\u04df\nf\rf\16f\u04e0\3f\3f\5f\u04e5\nf\3g\3g")
        buf.write("\3g\3g\3g\3g\5g\u04ed\ng\3g\5g\u04f0\ng\3h\3h\5h\u04f4")
        buf.write("\nh\3i\3i\5i\u04f8\ni\3i\3i\3i\3j\3j\5j\u04ff\nj\3j\3")
        buf.write("j\3j\3k\3k\3k\7k\u0507\nk\fk\16k\u050a\13k\3l\3l\3l\7")
        buf.write("l\u050f\nl\fl\16l\u0512\13l\3m\3m\3m\5m\u0517\nm\3n\3")
        buf.write("n\3n\3n\7n\u051d\nn\fn\16n\u0520\13n\3o\3o\3o\3o\3o\3")
        buf.write("o\3o\3o\3o\3o\3o\3o\3o\5o\u052f\no\3p\5p\u0532\np\3p\3")
        buf.write("p\3q\3q\3q\7q\u0539\nq\fq\16q\u053c\13q\3r\3r\3r\7r\u0541")
        buf.write("\nr\fr\16r\u0544\13r\3s\3s\3s\7s\u0549\ns\fs\16s\u054c")
        buf.write("\13s\3t\3t\3t\3t\3t\7t\u0553\nt\ft\16t\u0556\13t\3u\3")
        buf.write("u\3u\3u\3u\7u\u055d\nu\fu\16u\u0560\13u\3v\3v\3v\3v\3")
        buf.write("v\3v\3v\3v\3v\3v\3v\7v\u056d\nv\fv\16v\u0570\13v\3w\3")
        buf.write("w\3w\3w\3w\3w\3w\5w\u0579\nw\3x\3x\7x\u057d\nx\fx\16x")
        buf.write("\u0580\13x\3x\3x\5x\u0584\nx\3y\3y\3y\5y\u0589\ny\3y\3")
        buf.write("y\3y\5y\u058e\ny\3y\3y\3y\5y\u0593\ny\3y\3y\3y\3y\6y\u0599")
        buf.write("\ny\ry\16y\u059a\3y\3y\3y\3y\5y\u05a1\ny\3z\3z\3z\3z\7")
        buf.write("z\u05a7\nz\fz\16z\u05aa\13z\3z\5z\u05ad\nz\5z\u05af\n")
        buf.write("z\3{\3{\5{\u05b3\n{\3{\3{\3{\3{\3{\3{\3{\5{\u05bc\n{\3")
        buf.write("|\3|\3|\7|\u05c1\n|\f|\16|\u05c4\13|\3|\5|\u05c7\n|\3")
        buf.write("}\3}\5}\u05cb\n}\3}\3}\5}\u05cf\n}\3}\5}\u05d2\n}\5}\u05d4")
        buf.write("\n}\3~\3~\5~\u05d8\n~\3\177\3\177\3\177\7\177\u05dd\n")
        buf.write("\177\f\177\16\177\u05e0\13\177\3\177\5\177\u05e3\n\177")
        buf.write("\3\u0080\3\u0080\3\u0080\7\u0080\u05e8\n\u0080\f\u0080")
        buf.write("\16\u0080\u05eb\13\u0080\3\u0080\5\u0080\u05ee\n\u0080")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\7\u0081\u05f9\n\u0081\f\u0081\16\u0081")
        buf.write("\u05fc\13\u0081\3\u0081\5\u0081\u05ff\n\u0081\5\u0081")
        buf.write("\u0601\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081")
        buf.write("\u0607\n\u0081\f\u0081\16\u0081\u060a\13\u0081\3\u0081")
        buf.write("\5\u0081\u060d\n\u0081\5\u0081\u060f\n\u0081\5\u0081\u0611")
        buf.write("\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0617")
        buf.write("\n\u0082\3\u0082\5\u0082\u061a\n\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0083\3\u0083\3\u0083\7\u0083\u0622\n\u0083")
        buf.write("\f\u0083\16\u0083\u0625\13\u0083\3\u0083\3\u0083\5\u0083")
        buf.write("\u0629\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\7\u0083")
        buf.write("\u062f\n\u0083\f\u0083\16\u0083\u0632\13\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\5\u0083\u0637\n\u0083\3\u0083\3\u0083")
        buf.write("\5\u0083\u063b\n\u0083\3\u0084\3\u0084\5\u0084\u063f\n")
        buf.write("\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0645\n")
        buf.write("\u0084\3\u0085\3\u0085\5\u0085\u0649\n\u0085\3\u0086\3")
        buf.write("\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0650\n\u0086\3")
        buf.write("\u0087\3\u0087\3\u0087\5\u0087\u0655\n\u0087\3\u0088\3")
        buf.write("\u0088\5\u0088\u0659\n\u0088\3\u0089\3\u0089\3\u0089\5")
        buf.write("\u0089\u065e\n\u0089\3\u008a\3\u008a\3\u008b\3\u008b\3")
        buf.write("\u008b\5\u008b\u0665\n\u008b\3\u008c\3\u008c\3\u008c\2")
        buf.write("\2\u008d\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(")
        buf.write("*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write("\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec")
        buf.write("\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe")
        buf.write("\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110")
        buf.write("\u0112\u0114\u0116\2\n\4\2\7\7\13\13\6\2\7\r\17\32))F")
        buf.write("F\3\2\34\37\3\2!#\3\2q}\3\2OP\3\2GH\3\2IL\u06f5\2\u011b")
        buf.write("\3\2\2\2\4\u0126\3\2\2\2\6\u0135\3\2\2\2\b\u015b\3\2\2")
        buf.write("\2\n\u0165\3\2\2\2\f\u0175\3\2\2\2\16\u018d\3\2\2\2\20")
        buf.write("\u0190\3\2\2\2\22\u01a1\3\2\2\2\24\u01a6\3\2\2\2\26\u01b5")
        buf.write("\3\2\2\2\30\u01d9\3\2\2\2\32\u01db\3\2\2\2\34\u01df\3")
        buf.write("\2\2\2\36\u01ec\3\2\2\2 \u01ef\3\2\2\2\"\u01fb\3\2\2\2")
        buf.write("$\u01fd\3\2\2\2&\u01ff\3\2\2\2(\u0215\3\2\2\2*\u0217\3")
        buf.write("\2\2\2,\u021f\3\2\2\2.\u0229\3\2\2\2\60\u0234\3\2\2\2")
        buf.write("\62\u0238\3\2\2\2\64\u0244\3\2\2\2\66\u024c\3\2\2\28\u0258")
        buf.write("\3\2\2\2:\u026b\3\2\2\2<\u0278\3\2\2\2>\u028c\3\2\2\2")
        buf.write("@\u029a\3\2\2\2B\u029c\3\2\2\2D\u02a1\3\2\2\2F\u02ab\3")
        buf.write("\2\2\2H\u02ad\3\2\2\2J\u02b7\3\2\2\2L\u02bc\3\2\2\2N\u02be")
        buf.write("\3\2\2\2P\u02c0\3\2\2\2R\u02c8\3\2\2\2T\u02ca\3\2\2\2")
        buf.write("V\u02cc\3\2\2\2X\u02ce\3\2\2\2Z\u02d0\3\2\2\2\\\u02d2")
        buf.write("\3\2\2\2^\u02d4\3\2\2\2`\u02d6\3\2\2\2b\u02d8\3\2\2\2")
        buf.write("d\u02df\3\2\2\2f\u02e1\3\2\2\2h\u02e7\3\2\2\2j\u02e9\3")
        buf.write("\2\2\2l\u02ed\3\2\2\2n\u02ef\3\2\2\2p\u02f6\3\2\2\2r\u02fc")
        buf.write("\3\2\2\2t\u0301\3\2\2\2v\u030a\3\2\2\2x\u0316\3\2\2\2")
        buf.write("z\u031a\3\2\2\2|\u031f\3\2\2\2~\u0329\3\2\2\2\u0080\u0370")
        buf.write("\3\2\2\2\u0082\u0372\3\2\2\2\u0084\u03b8\3\2\2\2\u0086")
        buf.write("\u03ba\3\2\2\2\u0088\u03be\3\2\2\2\u008a\u03c0\3\2\2\2")
        buf.write("\u008c\u03d5\3\2\2\2\u008e\u03d7\3\2\2\2\u0090\u03eb\3")
        buf.write("\2\2\2\u0092\u03fa\3\2\2\2\u0094\u03fc\3\2\2\2\u0096\u03ff")
        buf.write("\3\2\2\2\u0098\u0406\3\2\2\2\u009a\u0408\3\2\2\2\u009c")
        buf.write("\u040a\3\2\2\2\u009e\u040c\3\2\2\2\u00a0\u0410\3\2\2\2")
        buf.write("\u00a2\u0412\3\2\2\2\u00a4\u041c\3\2\2\2\u00a6\u041e\3")
        buf.write("\2\2\2\u00a8\u0421\3\2\2\2\u00aa\u0439\3\2\2\2\u00ac\u043e")
        buf.write("\3\2\2\2\u00ae\u0443\3\2\2\2\u00b0\u044e\3\2\2\2\u00b2")
        buf.write("\u0456\3\2\2\2\u00b4\u045e\3\2\2\2\u00b6\u0467\3\2\2\2")
        buf.write("\u00b8\u0470\3\2\2\2\u00ba\u047e\3\2\2\2\u00bc\u0480\3")
        buf.write("\2\2\2\u00be\u0493\3\2\2\2\u00c0\u049c\3\2\2\2\u00c2\u04a7")
        buf.write("\3\2\2\2\u00c4\u04c1\3\2\2\2\u00c6\u04cd\3\2\2\2\u00c8")
        buf.write("\u04d2\3\2\2\2\u00ca\u04e4\3\2\2\2\u00cc\u04ef\3\2\2\2")
        buf.write("\u00ce\u04f3\3\2\2\2\u00d0\u04f5\3\2\2\2\u00d2\u04fc\3")
        buf.write("\2\2\2\u00d4\u0503\3\2\2\2\u00d6\u050b\3\2\2\2\u00d8\u0516")
        buf.write("\3\2\2\2\u00da\u0518\3\2\2\2\u00dc\u052e\3\2\2\2\u00de")
        buf.write("\u0531\3\2\2\2\u00e0\u0535\3\2\2\2\u00e2\u053d\3\2\2\2")
        buf.write("\u00e4\u0545\3\2\2\2\u00e6\u054d\3\2\2\2\u00e8\u0557\3")
        buf.write("\2\2\2\u00ea\u0561\3\2\2\2\u00ec\u0578\3\2\2\2\u00ee\u057a")
        buf.write("\3\2\2\2\u00f0\u05a0\3\2\2\2\u00f2\u05a2\3\2\2\2\u00f4")
        buf.write("\u05bb\3\2\2\2\u00f6\u05bd\3\2\2\2\u00f8\u05d3\3\2\2\2")
        buf.write("\u00fa\u05d5\3\2\2\2\u00fc\u05d9\3\2\2\2\u00fe\u05e4\3")
        buf.write("\2\2\2\u0100\u0610\3\2\2\2\u0102\u0612\3\2\2\2\u0104\u0623")
        buf.write("\3\2\2\2\u0106\u0644\3\2\2\2\u0108\u0648\3\2\2\2\u010a")
        buf.write("\u064a\3\2\2\2\u010c\u0651\3\2\2\2\u010e\u0656\3\2\2\2")
        buf.write("\u0110\u065d\3\2\2\2\u0112\u065f\3\2\2\2\u0114\u0664\3")
        buf.write("\2\2\2\u0116\u0666\3\2\2\2\u0118\u011a\5\4\3\2\u0119\u0118")
        buf.write("\3\2\2\2\u011a\u011d\3\2\2\2\u011b\u0119\3\2\2\2\u011b")
        buf.write("\u011c\3\2\2\2\u011c\u0121\3\2\2\2\u011d\u011b\3\2\2\2")
        buf.write("\u011e\u0120\5\6\4\2\u011f\u011e\3\2\2\2\u0120\u0123\3")
        buf.write("\2\2\2\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124")
        buf.write("\3\2\2\2\u0123\u0121\3\2\2\2\u0124\u0125\7\2\2\3\u0125")
        buf.write("\3\3\2\2\2\u0126\u012a\7\16\2\2\u0127\u0128\5N(\2\u0128")
        buf.write("\u0129\7U\2\2\u0129\u012b\3\2\2\2\u012a\u0127\3\2\2\2")
        buf.write("\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012f\5")
        buf.write("D#\2\u012d\u012e\7\5\2\2\u012e\u0130\7Q\2\2\u012f\u012d")
        buf.write("\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0131\3\2\2\2\u0131")
        buf.write("\u0133\7V\2\2\u0132\u0134\7\33\2\2\u0133\u0132\3\2\2\2")
        buf.write("\u0133\u0134\3\2\2\2\u0134\5\3\2\2\2\u0135\u0137\7\30")
        buf.write("\2\2\u0136\u0138\5H%\2\u0137\u0136\3\2\2\2\u0137\u0138")
        buf.write("\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013a\5N(\2\u013a\u013b")
        buf.write("\7R\2\2\u013b\u0140\5\n\6\2\u013c\u013d\7T\2\2\u013d\u013f")
        buf.write("\5\n\6\2\u013e\u013c\3\2\2\2\u013f\u0142\3\2\2\2\u0140")
        buf.write("\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\3\2\2\2")
        buf.write("\u0142\u0140\3\2\2\2\u0143\u014d\7S\2\2\u0144\u0145\7")
        buf.write("\f\2\2\u0145\u014a\5N(\2\u0146\u0147\7T\2\2\u0147\u0149")
        buf.write("\5N(\2\u0148\u0146\3\2\2\2\u0149\u014c\3\2\2\2\u014a\u0148")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014e\3\2\2\2\u014c")
        buf.write("\u014a\3\2\2\2\u014d\u0144\3\2\2\2\u014d\u014e\3\2\2\2")
        buf.write("\u014e\u0150\3\2\2\2\u014f\u0151\7\33\2\2\u0150\u014f")
        buf.write("\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0152\3\2\2\2\u0152")
        buf.write("\u0153\7f\2\2\u0153\u0154\5\b\5\2\u0154\u0156\7g\2\2\u0155")
        buf.write("\u0157\7\33\2\2\u0156\u0155\3\2\2\2\u0156\u0157\3\2\2")
        buf.write("\2\u0157\7\3\2\2\2\u0158\u015a\5\f\7\2\u0159\u0158\3\2")
        buf.write("\2\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c")
        buf.write("\3\2\2\2\u015c\u0162\3\2\2\2\u015d\u015b\3\2\2\2\u015e")
        buf.write("\u0161\5\20\t\2\u015f\u0161\5\26\f\2\u0160\u015e\3\2\2")
        buf.write("\2\u0160\u015f\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\t\3\2\2\2\u0164\u0162")
        buf.write("\3\2\2\2\u0165\u0166\5N(\2\u0166\u0173\7U\2\2\u0167\u0174")
        buf.write("\5N(\2\u0168\u0169\7f\2\2\u0169\u016e\5N(\2\u016a\u016b")
        buf.write("\7T\2\2\u016b\u016d\5N(\2\u016c\u016a\3\2\2\2\u016d\u0170")
        buf.write("\3\2\2\2\u016e\u016c\3\2\2\2\u016e\u016f\3\2\2\2\u016f")
        buf.write("\u0171\3\2\2\2\u0170\u016e\3\2\2\2\u0171\u0172\7g\2\2")
        buf.write("\u0172\u0174\3\2\2\2\u0173\u0167\3\2\2\2\u0173\u0168\3")
        buf.write("\2\2\2\u0174\13\3\2\2\2\u0175\u0176\7\20\2\2\u0176\u0177")
        buf.write("\5P)\2\u0177\u0178\7f\2\2\u0178\u017d\5\16\b\2\u0179\u017a")
        buf.write("\7T\2\2\u017a\u017c\5\16\b\2\u017b\u0179\3\2\2\2\u017c")
        buf.write("\u017f\3\2\2\2\u017d\u017b\3\2\2\2\u017d\u017e\3\2\2\2")
        buf.write("\u017e\u0180\3\2\2\2\u017f\u017d\3\2\2\2\u0180\u0182\7")
        buf.write("g\2\2\u0181\u0183\7V\2\2\u0182\u0181\3\2\2\2\u0182\u0183")
        buf.write("\3\2\2\2\u0183\u0185\3\2\2\2\u0184\u0186\7\33\2\2\u0185")
        buf.write("\u0184\3\2\2\2\u0185\u0186\3\2\2\2\u0186\r\3\2\2\2\u0187")
        buf.write("\u018e\5N(\2\u0188\u0189\7\21\2\2\u0189\u018a\7R\2\2\u018a")
        buf.write("\u018b\5P)\2\u018b\u018c\7S\2\2\u018c\u018e\3\2\2\2\u018d")
        buf.write("\u0187\3\2\2\2\u018d\u0188\3\2\2\2\u018e\17\3\2\2\2\u018f")
        buf.write("\u0191\7\27\2\2\u0190\u018f\3\2\2\2\u0190\u0191\3\2\2")
        buf.write("\2\u0191\u0193\3\2\2\2\u0192\u0194\7\b\2\2\u0193\u0192")
        buf.write("\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0195\3\2\2\2\u0195")
        buf.write("\u0196\7\25\2\2\u0196\u0199\5N(\2\u0197\u0198\7\22\2\2")
        buf.write("\u0198\u019a\5N(\2\u0199\u0197\3\2\2\2\u0199\u019a\3\2")
        buf.write("\2\2\u019a\u019b\3\2\2\2\u019b\u019c\7f\2\2\u019c\u019d")
        buf.write("\5\22\n\2\u019d\u019f\7g\2\2\u019e\u01a0\7\33\2\2\u019f")
        buf.write("\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\21\3\2\2\2\u01a1")
        buf.write("\u01a2\5\24\13\2\u01a2\23\3\2\2\2\u01a3\u01a5\5\34\17")
        buf.write("\2\u01a4\u01a3\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6\u01a4")
        buf.write("\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01ab\3\2\2\2\u01a8")
        buf.write("\u01a6\3\2\2\2\u01a9\u01ac\5 \21\2\u01aa\u01ac\5*\26\2")
        buf.write("\u01ab\u01a9\3\2\2\2\u01ab\u01aa\3\2\2\2\u01ac\u01ad\3")
        buf.write("\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b0")
        buf.write("\3\2\2\2\u01af\u01b1\5,\27\2\u01b0\u01af\3\2\2\2\u01b0")
        buf.write("\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2\u01b4\5.\30\2")
        buf.write("\u01b3\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\25\3\2")
        buf.write("\2\2\u01b5\u01b6\7\24\2\2\u01b6\u01b7\5N(\2\u01b7\u01c0")
        buf.write("\7R\2\2\u01b8\u01bd\5\32\16\2\u01b9\u01ba\7T\2\2\u01ba")
        buf.write("\u01bc\5\32\16\2\u01bb\u01b9\3\2\2\2\u01bc\u01bf\3\2\2")
        buf.write("\2\u01bd\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01c1")
        buf.write("\3\2\2\2\u01bf\u01bd\3\2\2\2\u01c0\u01b8\3\2\2\2\u01c0")
        buf.write("\u01c1\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c3\7S\2\2")
        buf.write("\u01c3\u01c4\7U\2\2\u01c4\u01cf\5L\'\2\u01c5\u01d0\7V")
        buf.write("\2\2\u01c6\u01c8\7\33\2\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8")
        buf.write("\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca\7f\2\2\u01ca")
        buf.write("\u01cb\5\30\r\2\u01cb\u01cd\7g\2\2\u01cc\u01ce\7\33\2")
        buf.write("\2\u01cd\u01cc\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d0")
        buf.write("\3\2\2\2\u01cf\u01c5\3\2\2\2\u01cf\u01c7\3\2\2\2\u01d0")
        buf.write("\27\3\2\2\2\u01d1\u01da\5\u008aF\2\u01d2\u01d3\7\33\2")
        buf.write("\2\u01d3\u01d5\7\u0080\2\2\u01d4\u01d6\5\u0088E\2\u01d5")
        buf.write("\u01d4\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d5\3\2\2\2")
        buf.write("\u01d7\u01d8\3\2\2\2\u01d8\u01da\3\2\2\2\u01d9\u01d1\3")
        buf.write("\2\2\2\u01d9\u01d2\3\2\2\2\u01da\31\3\2\2\2\u01db\u01dc")
        buf.write("\5N(\2\u01dc\u01dd\7U\2\2\u01dd\u01de\5L\'\2\u01de\33")
        buf.write("\3\2\2\2\u01df\u01e3\5\36\20\2\u01e0\u01e2\7T\2\2\u01e1")
        buf.write("\u01e0\3\2\2\2\u01e2\u01e5\3\2\2\2\u01e3\u01e1\3\2\2\2")
        buf.write("\u01e3\u01e4\3\2\2\2\u01e4\u01e8\3\2\2\2\u01e5\u01e3\3")
        buf.write("\2\2\2\u01e6\u01e7\7U\2\2\u01e7\u01e9\5L\'\2\u01e8\u01e6")
        buf.write("\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea")
        buf.write("\u01eb\7V\2\2\u01eb\35\3\2\2\2\u01ec\u01ed\5N(\2\u01ed")
        buf.write("\37\3\2\2\2\u01ee\u01f0\5\"\22\2\u01ef\u01ee\3\2\2\2\u01ef")
        buf.write("\u01f0\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f2\7\n\2\2")
        buf.write("\u01f2\u01f4\5N(\2\u01f3\u01f5\7\33\2\2\u01f4\u01f3\3")
        buf.write("\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f7")
        buf.write("\5$\23\2\u01f7\u01f9\7V\2\2\u01f8\u01fa\7\33\2\2\u01f9")
        buf.write("\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa!\3\2\2\2\u01fb")
        buf.write("\u01fc\t\2\2\2\u01fc#\3\2\2\2\u01fd\u01fe\5&\24\2\u01fe")
        buf.write("%\3\2\2\2\u01ff\u0204\5(\25\2\u0200\u0201\7T\2\2\u0201")
        buf.write("\u0203\5(\25\2\u0202\u0200\3\2\2\2\u0203\u0206\3\2\2\2")
        buf.write("\u0204\u0202\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u020c\3")
        buf.write("\2\2\2\u0206\u0204\3\2\2\2\u0207\u0208\7\r\2\2\u0208\u020a")
        buf.write("\5N(\2\u0209\u020b\7\33\2\2\u020a\u0209\3\2\2\2\u020a")
        buf.write("\u020b\3\2\2\2\u020b\u020d\3\2\2\2\u020c\u0207\3\2\2\2")
        buf.write("\u020c\u020d\3\2\2\2\u020d\u0213\3\2\2\2\u020e\u020f\7")
        buf.write("\t\2\2\u020f\u0210\7f\2\2\u0210\u0211\5\60\31\2\u0211")
        buf.write("\u0212\7g\2\2\u0212\u0214\3\2\2\2\u0213\u020e\3\2\2\2")
        buf.write("\u0213\u0214\3\2\2\2\u0214\'\3\2\2\2\u0215\u0216\5\64")
        buf.write("\33\2\u0216)\3\2\2\2\u0217\u0218\7\23\2\2\u0218\u0219")
        buf.write("\7\n\2\2\u0219\u021a\5N(\2\u021a\u021b\7U\2\2\u021b\u021d")
        buf.write("\5L\'\2\u021c\u021e\7V\2\2\u021d\u021c\3\2\2\2\u021d\u021e")
        buf.write("\3\2\2\2\u021e+\3\2\2\2\u021f\u0220\7\31\2\2\u0220\u0224")
        buf.write("\7f\2\2\u0221\u0223\5B\"\2\u0222\u0221\3\2\2\2\u0223\u0226")
        buf.write("\3\2\2\2\u0224\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225")
        buf.write("\u0227\3\2\2\2\u0226\u0224\3\2\2\2\u0227\u0228\7g\2\2")
        buf.write("\u0228-\3\2\2\2\u0229\u022a\7\32\2\2\u022a\u022e\7f\2")
        buf.write("\2\u022b\u022d\5B\"\2\u022c\u022b\3\2\2\2\u022d\u0230")
        buf.write("\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022f")
        buf.write("\u0231\3\2\2\2\u0230\u022e\3\2\2\2\u0231\u0232\7g\2\2")
        buf.write("\u0232/\3\2\2\2\u0233\u0235\5\62\32\2\u0234\u0233\3\2")
        buf.write("\2\2\u0235\u0236\3\2\2\2\u0236\u0234\3\2\2\2\u0236\u0237")
        buf.write("\3\2\2\2\u0237\61\3\2\2\2\u0238\u0239\5N(\2\u0239\u023c")
        buf.write("\7X\2\2\u023a\u023d\5\u010e\u0088\2\u023b\u023d\5\u0090")
        buf.write("I\2\u023c\u023a\3\2\2\2\u023c\u023b\3\2\2\2\u023d\u023e")
        buf.write("\3\2\2\2\u023e\u0240\7V\2\2\u023f\u0241\7\33\2\2\u0240")
        buf.write("\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241\63\3\2\2\2\u0242")
        buf.write("\u0245\5\66\34\2\u0243\u0245\5:\36\2\u0244\u0242\3\2\2")
        buf.write("\2\u0244\u0243\3\2\2\2\u0245\u024a\3\2\2\2\u0246\u0247")
        buf.write("\7f\2\2\u0247\u0248\5\u008eH\2\u0248\u0249\7g\2\2\u0249")
        buf.write("\u024b\3\2\2\2\u024a\u0246\3\2\2\2\u024a\u024b\3\2\2\2")
        buf.write("\u024b\65\3\2\2\2\u024c\u024d\5N(\2\u024d\u024e\7U\2\2")
        buf.write("\u024e\u024f\5b\62\2\u024f\u0251\7f\2\2\u0250\u0252\5")
        buf.write("8\35\2\u0251\u0250\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0253")
        buf.write("\3\2\2\2\u0253\u0254\7g\2\2\u0254\67\3\2\2\2\u0255\u0259")
        buf.write("\5N(\2\u0256\u0259\5\64\33\2\u0257\u0259\7\3\2\2\u0258")
        buf.write("\u0255\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0257\3\2\2\2")
        buf.write("\u0259\u0262\3\2\2\2\u025a\u025e\7T\2\2\u025b\u025f\5")
        buf.write("N(\2\u025c\u025f\5\64\33\2\u025d\u025f\7\3\2\2\u025e\u025b")
        buf.write("\3\2\2\2\u025e\u025c\3\2\2\2\u025e\u025d\3\2\2\2\u025f")
        buf.write("\u0261\3\2\2\2\u0260\u025a\3\2\2\2\u0261\u0264\3\2\2\2")
        buf.write("\u0262\u0260\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265\3")
        buf.write("\2\2\2\u0264\u0262\3\2\2\2\u0265\u0268\7\6\2\2\u0266\u0269")
        buf.write("\5N(\2\u0267\u0269\7\3\2\2\u0268\u0266\3\2\2\2\u0268\u0267")
        buf.write("\3\2\2\2\u02699\3\2\2\2\u026a\u026c\5N(\2\u026b\u026a")
        buf.write("\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026d\3\2\2\2\u026d")
        buf.write("\u026e\7U\2\2\u026e\u0270\5L\'\2\u026f\u0271\7\33\2\2")
        buf.write("\u0270\u026f\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\3")
        buf.write("\2\2\2\u0272\u0273\7f\2\2\u0273\u0274\5<\37\2\u0274\u0276")
        buf.write("\7g\2\2\u0275\u0277\7\33\2\2\u0276\u0275\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277;\3\2\2\2\u0278\u0280\5> \2\u0279")
        buf.write("\u027b\7\33\2\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2\2")
        buf.write("\2\u027b\u027c\3\2\2\2\u027c\u027d\7T\2\2\u027d\u027f")
        buf.write("\5> \2\u027e\u027a\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e")
        buf.write("\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0284\3\2\2\2\u0282")
        buf.write("\u0280\3\2\2\2\u0283\u0285\7\33\2\2\u0284\u0283\3\2\2")
        buf.write("\2\u0284\u0285\3\2\2\2\u0285=\3\2\2\2\u0286\u028d\5N(")
        buf.write("\2\u0287\u0288\7\21\2\2\u0288\u0289\7R\2\2\u0289\u028a")
        buf.write("\5P)\2\u028a\u028b\7S\2\2\u028b\u028d\3\2\2\2\u028c\u0286")
        buf.write("\3\2\2\2\u028c\u0287\3\2\2\2\u028d\u028e\3\2\2\2\u028e")
        buf.write("\u028f\7X\2\2\u028f\u0291\5@!\2\u0290\u0292\7V\2\2\u0291")
        buf.write("\u0290\3\2\2\2\u0291\u0292\3\2\2\2\u0292?\3\2\2\2\u0293")
        buf.write("\u029b\5\u010e\u0088\2\u0294\u029b\5\u0090I\2\u0295\u0296")
        buf.write("\7R\2\2\u0296\u0297\5@!\2\u0297\u0298\7S\2\2\u0298\u029b")
        buf.write("\3\2\2\2\u0299\u029b\5\64\33\2\u029a\u0293\3\2\2\2\u029a")
        buf.write("\u0294\3\2\2\2\u029a\u0295\3\2\2\2\u029a\u0299\3\2\2\2")
        buf.write("\u029bA\3\2\2\2\u029c\u029d\5\u008eH\2\u029d\u029f\7V")
        buf.write("\2\2\u029e\u02a0\7\33\2\2\u029f\u029e\3\2\2\2\u029f\u02a0")
        buf.write("\3\2\2\2\u02a0C\3\2\2\2\u02a1\u02a6\5F$\2\u02a2\u02a3")
        buf.write("\7\5\2\2\u02a3\u02a5\5T+\2\u02a4\u02a2\3\2\2\2\u02a5\u02a8")
        buf.write("\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("E\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u02ac\5N(\2\u02aa")
        buf.write("\u02ac\7\4\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02aa\3\2\2\2")
        buf.write("\u02acG\3\2\2\2\u02ad\u02ae\5R*\2\u02ae\u02b4\7\5\2\2")
        buf.write("\u02af\u02b0\5T+\2\u02b0\u02b1\7\5\2\2\u02b1\u02b3\3\2")
        buf.write("\2\2\u02b2\u02af\3\2\2\2\u02b3\u02b6\3\2\2\2\u02b4\u02b2")
        buf.write("\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5I\3\2\2\2\u02b6\u02b4")
        buf.write("\3\2\2\2\u02b7\u02b8\5P)\2\u02b8K\3\2\2\2\u02b9\u02bd")
        buf.write("\5`\61\2\u02ba\u02bd\5b\62\2\u02bb\u02bd\5J&\2\u02bc\u02b9")
        buf.write("\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bb\3\2\2\2\u02bd")
        buf.write("M\3\2\2\2\u02be\u02bf\t\3\2\2\u02bfO\3\2\2\2\u02c0\u02c5")
        buf.write("\5R*\2\u02c1\u02c2\7\5\2\2\u02c2\u02c4\5T+\2\u02c3\u02c1")
        buf.write("\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5\u02c3\3\2\2\2\u02c5")
        buf.write("\u02c6\3\2\2\2\u02c6Q\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c8")
        buf.write("\u02c9\5N(\2\u02c9S\3\2\2\2\u02ca\u02cb\5V,\2\u02cbU\3")
        buf.write("\2\2\2\u02cc\u02cd\5N(\2\u02cdW\3\2\2\2\u02ce\u02cf\t")
        buf.write("\4\2\2\u02cfY\3\2\2\2\u02d0\u02d1\t\5\2\2\u02d1[\3\2\2")
        buf.write("\2\u02d2\u02d3\7$\2\2\u02d3]\3\2\2\2\u02d4\u02d5\7 \2")
        buf.write("\2\u02d5_\3\2\2\2\u02d6\u02d7\5X-\2\u02d7a\3\2\2\2\u02d8")
        buf.write("\u02dd\5Z.\2\u02d9\u02da\7R\2\2\u02da\u02db\5l\67\2\u02db")
        buf.write("\u02dc\7S\2\2\u02dc\u02de\3\2\2\2\u02dd\u02d9\3\2\2\2")
        buf.write("\u02dd\u02de\3\2\2\2\u02dec\3\2\2\2\u02df\u02e0\5\\/\2")
        buf.write("\u02e0e\3\2\2\2\u02e1\u02e2\5^\60\2\u02e2g\3\2\2\2\u02e3")
        buf.write("\u02e8\5`\61\2\u02e4\u02e8\5b\62\2\u02e5\u02e8\5d\63\2")
        buf.write("\u02e6\u02e8\5f\64\2\u02e7\u02e3\3\2\2\2\u02e7\u02e4\3")
        buf.write("\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e6\3\2\2\2\u02e8i")
        buf.write("\3\2\2\2\u02e9\u02ea\5P)\2\u02eak\3\2\2\2\u02eb\u02ee")
        buf.write("\5j\66\2\u02ec\u02ee\5h\65\2\u02ed\u02eb\3\2\2\2\u02ed")
        buf.write("\u02ec\3\2\2\2\u02eem\3\2\2\2\u02ef\u02f0\7F\2\2\u02f0")
        buf.write("o\3\2\2\2\u02f1\u02f7\7\33\2\2\u02f2\u02f7\5\u008aF\2")
        buf.write("\u02f3\u02f4\5\u00ba^\2\u02f4\u02f5\7\33\2\2\u02f5\u02f7")
        buf.write("\3\2\2\2\u02f6\u02f1\3\2\2\2\u02f6\u02f2\3\2\2\2\u02f6")
        buf.write("\u02f3\3\2\2\2\u02f7q\3\2\2\2\u02f8\u02fb\7\33\2\2\u02f9")
        buf.write("\u02fb\5\u0088E\2\u02fa\u02f8\3\2\2\2\u02fa\u02f9\3\2")
        buf.write("\2\2\u02fb\u02fe\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fc\u02fd")
        buf.write("\3\2\2\2\u02fd\u02ff\3\2\2\2\u02fe\u02fc\3\2\2\2\u02ff")
        buf.write("\u0300\7\2\2\3\u0300s\3\2\2\2\u0301\u0305\5\u00fe\u0080")
        buf.write("\2\u0302\u0304\7\33\2\2\u0303\u0302\3\2\2\2\u0304\u0307")
        buf.write("\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306")
        buf.write("\u0308\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u0309\7\2\2\3")
        buf.write("\u0309u\3\2\2\2\u030a\u030b\7o\2\2\u030b\u0311\5\u00b2")
        buf.write("Z\2\u030c\u030e\7R\2\2\u030d\u030f\5\u0104\u0083\2\u030e")
        buf.write("\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310\3\2\2\2")
        buf.write("\u0310\u0312\7S\2\2\u0311\u030c\3\2\2\2\u0311\u0312\3")
        buf.write("\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314\7\33\2\2\u0314")
        buf.write("w\3\2\2\2\u0315\u0317\5v<\2\u0316\u0315\3\2\2\2\u0317")
        buf.write("\u0318\3\2\2\2\u0318\u0316\3\2\2\2\u0318\u0319\3\2\2\2")
        buf.write("\u0319y\3\2\2\2\u031a\u031d\5x=\2\u031b\u031e\5\u0102")
        buf.write("\u0082\2\u031c\u031e\5|?\2\u031d\u031b\3\2\2\2\u031d\u031c")
        buf.write("\3\2\2\2\u031e{\3\2\2\2\u031f\u0320\7%\2\2\u0320\u0321")
        buf.write("\7F\2\2\u0321\u0324\5~@\2\u0322\u0323\7p\2\2\u0323\u0325")
        buf.write("\5\u00ccg\2\u0324\u0322\3\2\2\2\u0324\u0325\3\2\2\2\u0325")
        buf.write("\u0326\3\2\2\2\u0326\u0327\7U\2\2\u0327\u0328\5\u00ca")
        buf.write("f\2\u0328}\3\2\2\2\u0329\u032b\7R\2\2\u032a\u032c\5\u0080")
        buf.write("A\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032d")
        buf.write("\3\2\2\2\u032d\u032e\7S\2\2\u032e\177\3\2\2\2\u032f\u0332")
        buf.write("\5\u0082B\2\u0330\u0331\7X\2\2\u0331\u0333\5\u00ccg\2")
        buf.write("\u0332\u0330\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u033c\3")
        buf.write("\2\2\2\u0334\u0335\7T\2\2\u0335\u0338\5\u0082B\2\u0336")
        buf.write("\u0337\7X\2\2\u0337\u0339\5\u00ccg\2\u0338\u0336\3\2\2")
        buf.write("\2\u0338\u0339\3\2\2\2\u0339\u033b\3\2\2\2\u033a\u0334")
        buf.write("\3\2\2\2\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2\u033c")
        buf.write("\u033d\3\2\2\2\u033d\u0358\3\2\2\2\u033e\u033c\3\2\2\2")
        buf.write("\u033f\u0356\7T\2\2\u0340\u0342\7Q\2\2\u0341\u0343\5\u0082")
        buf.write("B\2\u0342\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u034c")
        buf.write("\3\2\2\2\u0344\u0345\7T\2\2\u0345\u0348\5\u0082B\2\u0346")
        buf.write("\u0347\7X\2\2\u0347\u0349\5\u00ccg\2\u0348\u0346\3\2\2")
        buf.write("\2\u0348\u0349\3\2\2\2\u0349\u034b\3\2\2\2\u034a\u0344")
        buf.write("\3\2\2\2\u034b\u034e\3\2\2\2\u034c\u034a\3\2\2\2\u034c")
        buf.write("\u034d\3\2\2\2\u034d\u0352\3\2\2\2\u034e\u034c\3\2\2\2")
        buf.write("\u034f\u0350\7T\2\2\u0350\u0351\7W\2\2\u0351\u0353\5\u0082")
        buf.write("B\2\u0352\u034f\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0357")
        buf.write("\3\2\2\2\u0354\u0355\7W\2\2\u0355\u0357\5\u0082B\2\u0356")
        buf.write("\u0340\3\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357\3\2\2\2")
        buf.write("\u0357\u0359\3\2\2\2\u0358\u033f\3\2\2\2\u0358\u0359\3")
        buf.write("\2\2\2\u0359\u0371\3\2\2\2\u035a\u035c\7Q\2\2\u035b\u035d")
        buf.write("\5\u0082B\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d")
        buf.write("\u0366\3\2\2\2\u035e\u035f\7T\2\2\u035f\u0362\5\u0082")
        buf.write("B\2\u0360\u0361\7X\2\2\u0361\u0363\5\u00ccg\2\u0362\u0360")
        buf.write("\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0365\3\2\2\2\u0364")
        buf.write("\u035e\3\2\2\2\u0365\u0368\3\2\2\2\u0366\u0364\3\2\2\2")
        buf.write("\u0366\u0367\3\2\2\2\u0367\u036c\3\2\2\2\u0368\u0366\3")
        buf.write("\2\2\2\u0369\u036a\7T\2\2\u036a\u036b\7W\2\2\u036b\u036d")
        buf.write("\5\u0082B\2\u036c\u0369\3\2\2\2\u036c\u036d\3\2\2\2\u036d")
        buf.write("\u0371\3\2\2\2\u036e\u036f\7W\2\2\u036f\u0371\5\u0082")
        buf.write("B\2\u0370\u032f\3\2\2\2\u0370\u035a\3\2\2\2\u0370\u036e")
        buf.write("\3\2\2\2\u0371\u0081\3\2\2\2\u0372\u0375\7F\2\2\u0373")
        buf.write("\u0374\7U\2\2\u0374\u0376\5\u00ccg\2\u0375\u0373\3\2\2")
        buf.write("\2\u0375\u0376\3\2\2\2\u0376\u0083\3\2\2\2\u0377\u037a")
        buf.write("\5\u0086D\2\u0378\u0379\7X\2\2\u0379\u037b\5\u00ccg\2")
        buf.write("\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u0384\3")
        buf.write("\2\2\2\u037c\u037d\7T\2\2\u037d\u0380\5\u0086D\2\u037e")
        buf.write("\u037f\7X\2\2\u037f\u0381\5\u00ccg\2\u0380\u037e\3\2\2")
        buf.write("\2\u0380\u0381\3\2\2\2\u0381\u0383\3\2\2\2\u0382\u037c")
        buf.write("\3\2\2\2\u0383\u0386\3\2\2\2\u0384\u0382\3\2\2\2\u0384")
        buf.write("\u0385\3\2\2\2\u0385\u03a0\3\2\2\2\u0386\u0384\3\2\2\2")
        buf.write("\u0387\u039e\7T\2\2\u0388\u038a\7Q\2\2\u0389\u038b\5\u0086")
        buf.write("D\2\u038a\u0389\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u0394")
        buf.write("\3\2\2\2\u038c\u038d\7T\2\2\u038d\u0390\5\u0086D\2\u038e")
        buf.write("\u038f\7X\2\2\u038f\u0391\5\u00ccg\2\u0390\u038e\3\2\2")
        buf.write("\2\u0390\u0391\3\2\2\2\u0391\u0393\3\2\2\2\u0392\u038c")
        buf.write("\3\2\2\2\u0393\u0396\3\2\2\2\u0394\u0392\3\2\2\2\u0394")
        buf.write("\u0395\3\2\2\2\u0395\u039a\3\2\2\2\u0396\u0394\3\2\2\2")
        buf.write("\u0397\u0398\7T\2\2\u0398\u0399\7W\2\2\u0399\u039b\5\u0086")
        buf.write("D\2\u039a\u0397\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039f")
        buf.write("\3\2\2\2\u039c\u039d\7W\2\2\u039d\u039f\5\u0086D\2\u039e")
        buf.write("\u0388\3\2\2\2\u039e\u039c\3\2\2\2\u039e\u039f\3\2\2\2")
        buf.write("\u039f\u03a1\3\2\2\2\u03a0\u0387\3\2\2\2\u03a0\u03a1\3")
        buf.write("\2\2\2\u03a1\u03b9\3\2\2\2\u03a2\u03a4\7Q\2\2\u03a3\u03a5")
        buf.write("\5\u0086D\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5")
        buf.write("\u03ae\3\2\2\2\u03a6\u03a7\7T\2\2\u03a7\u03aa\5\u0086")
        buf.write("D\2\u03a8\u03a9\7X\2\2\u03a9\u03ab\5\u00ccg\2\u03aa\u03a8")
        buf.write("\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ad\3\2\2\2\u03ac")
        buf.write("\u03a6\3\2\2\2\u03ad\u03b0\3\2\2\2\u03ae\u03ac\3\2\2\2")
        buf.write("\u03ae\u03af\3\2\2\2\u03af\u03b4\3\2\2\2\u03b0\u03ae\3")
        buf.write("\2\2\2\u03b1\u03b2\7T\2\2\u03b2\u03b3\7W\2\2\u03b3\u03b5")
        buf.write("\5\u0086D\2\u03b4\u03b1\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5")
        buf.write("\u03b9\3\2\2\2\u03b6\u03b7\7W\2\2\u03b7\u03b9\5\u0086")
        buf.write("D\2\u03b8\u0377\3\2\2\2\u03b8\u03a2\3\2\2\2\u03b8\u03b6")
        buf.write("\3\2\2\2\u03b9\u0085\3\2\2\2\u03ba\u03bb\7F\2\2\u03bb")
        buf.write("\u0087\3\2\2\2\u03bc\u03bf\5\u008aF\2\u03bd\u03bf\5\u00ba")
        buf.write("^\2\u03be\u03bc\3\2\2\2\u03be\u03bd\3\2\2\2\u03bf\u0089")
        buf.write("\3\2\2\2\u03c0\u03c5\5\u008cG\2\u03c1\u03c2\7V\2\2\u03c2")
        buf.write("\u03c4\5\u008cG\2\u03c3\u03c1\3\2\2\2\u03c4\u03c7\3\2")
        buf.write("\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c9")
        buf.write("\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8\u03ca\7V\2\2\u03c9")
        buf.write("\u03c8\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cb\3\2\2\2")
        buf.write("\u03cb\u03cc\7\33\2\2\u03cc\u008b\3\2\2\2\u03cd\u03d6")
        buf.write("\5\u008eH\2\u03ce\u03d6\5\u0094K\2\u03cf\u03d6\5\u0096")
        buf.write("L\2\u03d0\u03d6\5\u0098M\2\u03d1\u03d6\5\u00a4S\2\u03d2")
        buf.write("\u03d6\5\u00b4[\2\u03d3\u03d6\5\u00b6\\\2\u03d4\u03d6")
        buf.write("\5\u00b8]\2\u03d5\u03cd\3\2\2\2\u03d5\u03ce\3\2\2\2\u03d5")
        buf.write("\u03cf\3\2\2\2\u03d5\u03d0\3\2\2\2\u03d5\u03d1\3\2\2\2")
        buf.write("\u03d5\u03d2\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d4\3")
        buf.write("\2\2\2\u03d6\u008d\3\2\2\2\u03d7\u03e7\5\u0090I\2\u03d8")
        buf.write("\u03db\5\u0092J\2\u03d9\u03dc\5\u010e\u0088\2\u03da\u03dc")
        buf.write("\5\u00fe\u0080\2\u03db\u03d9\3\2\2\2\u03db\u03da\3\2\2")
        buf.write("\2\u03dc\u03e8\3\2\2\2\u03dd\u03e0\7X\2\2\u03de\u03e1")
        buf.write("\5\u010e\u0088\2\u03df\u03e1\5\u0090I\2\u03e0\u03de\3")
        buf.write("\2\2\2\u03e0\u03df\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03dd")
        buf.write("\3\2\2\2\u03e3\u03e6\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e4")
        buf.write("\u03e5\3\2\2\2\u03e5\u03e8\3\2\2\2\u03e6\u03e4\3\2\2\2")
        buf.write("\u03e7\u03d8\3\2\2\2\u03e7\u03e4\3\2\2\2\u03e8\u008f\3")
        buf.write("\2\2\2\u03e9\u03ec\5\u00ccg\2\u03ea\u03ec\5\u00dep\2\u03eb")
        buf.write("\u03e9\3\2\2\2\u03eb\u03ea\3\2\2\2\u03ec\u03f4\3\2\2\2")
        buf.write("\u03ed\u03f0\7T\2\2\u03ee\u03f1\5\u00ccg\2\u03ef\u03f1")
        buf.write("\5\u00dep\2\u03f0\u03ee\3\2\2\2\u03f0\u03ef\3\2\2\2\u03f1")
        buf.write("\u03f3\3\2\2\2\u03f2\u03ed\3\2\2\2\u03f3\u03f6\3\2\2\2")
        buf.write("\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f8\3")
        buf.write("\2\2\2\u03f6\u03f4\3\2\2\2\u03f7\u03f9\7T\2\2\u03f8\u03f7")
        buf.write("\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u0091\3\2\2\2\u03fa")
        buf.write("\u03fb\t\6\2\2\u03fb\u0093\3\2\2\2\u03fc\u03fd\7B\2\2")
        buf.write("\u03fd\u03fe\5\u00fc\177\2\u03fe\u0095\3\2\2\2\u03ff\u0400")
        buf.write("\7C\2\2\u0400\u0097\3\2\2\2\u0401\u0407\5\u009aN\2\u0402")
        buf.write("\u0407\5\u009cO\2\u0403\u0407\5\u009eP\2\u0404\u0407\5")
        buf.write("\u00a2R\2\u0405\u0407\5\u00a0Q\2\u0406\u0401\3\2\2\2\u0406")
        buf.write("\u0402\3\2\2\2\u0406\u0403\3\2\2\2\u0406\u0404\3\2\2\2")
        buf.write("\u0406\u0405\3\2\2\2\u0407\u0099\3\2\2\2\u0408\u0409\7")
        buf.write("E\2\2\u0409\u009b\3\2\2\2\u040a\u040b\7D\2\2\u040b\u009d")
        buf.write("\3\2\2\2\u040c\u040e\7&\2\2\u040d\u040f\5\u00fe\u0080")
        buf.write("\2\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u009f")
        buf.write("\3\2\2\2\u0410\u0411\5\u010e\u0088\2\u0411\u00a1\3\2\2")
        buf.write("\2\u0412\u0418\7\'\2\2\u0413\u0416\5\u00ccg\2\u0414\u0415")
        buf.write("\7(\2\2\u0415\u0417\5\u00ccg\2\u0416\u0414\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u0419\3\2\2\2\u0418\u0413\3\2\2\2")
        buf.write("\u0418\u0419\3\2\2\2\u0419\u00a3\3\2\2\2\u041a\u041d\5")
        buf.write("\u00a6T\2\u041b\u041d\5\u00a8U\2\u041c\u041a\3\2\2\2\u041c")
        buf.write("\u041b\3\2\2\2\u041d\u00a5\3\2\2\2\u041e\u041f\7)\2\2")
        buf.write("\u041f\u0420\5\u00b0Y\2\u0420\u00a7\3\2\2\2\u0421\u042e")
        buf.write("\7(\2\2\u0422\u0424\t\7\2\2\u0423\u0422\3\2\2\2\u0424")
        buf.write("\u0427\3\2\2\2\u0425\u0423\3\2\2\2\u0425\u0426\3\2\2\2")
        buf.write("\u0426\u0428\3\2\2\2\u0427\u0425\3\2\2\2\u0428\u042f\5")
        buf.write("\u00b2Z\2\u0429\u042b\t\7\2\2\u042a\u0429\3\2\2\2\u042b")
        buf.write("\u042c\3\2\2\2\u042c\u042a\3\2\2\2\u042c\u042d\3\2\2\2")
        buf.write("\u042d\u042f\3\2\2\2\u042e\u0425\3\2\2\2\u042e\u042a\3")
        buf.write("\2\2\2\u042f\u0430\3\2\2\2\u0430\u0437\7)\2\2\u0431\u0438")
        buf.write("\7Q\2\2\u0432\u0433\7R\2\2\u0433\u0434\5\u00aeX\2\u0434")
        buf.write("\u0435\7S\2\2\u0435\u0438\3\2\2\2\u0436\u0438\5\u00ae")
        buf.write("X\2\u0437\u0431\3\2\2\2\u0437\u0432\3\2\2\2\u0437\u0436")
        buf.write("\3\2\2\2\u0438\u00a9\3\2\2\2\u0439\u043c\7F\2\2\u043a")
        buf.write("\u043b\7*\2\2\u043b\u043d\7F\2\2\u043c\u043a\3\2\2\2\u043c")
        buf.write("\u043d\3\2\2\2\u043d\u00ab\3\2\2\2\u043e\u0441\5\u00b2")
        buf.write("Z\2\u043f\u0440\7*\2\2\u0440\u0442\7F\2\2\u0441\u043f")
        buf.write("\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u00ad\3\2\2\2\u0443")
        buf.write("\u0448\5\u00aaV\2\u0444\u0445\7T\2\2\u0445\u0447\5\u00aa")
        buf.write("V\2\u0446\u0444\3\2\2\2\u0447\u044a\3\2\2\2\u0448\u0446")
        buf.write("\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044c\3\2\2\2\u044a")
        buf.write("\u0448\3\2\2\2\u044b\u044d\7T\2\2\u044c\u044b\3\2\2\2")
        buf.write("\u044c\u044d\3\2\2\2\u044d\u00af\3\2\2\2\u044e\u0453\5")
        buf.write("\u00acW\2\u044f\u0450\7T\2\2\u0450\u0452\5\u00acW\2\u0451")
        buf.write("\u044f\3\2\2\2\u0452\u0455\3\2\2\2\u0453\u0451\3\2\2\2")
        buf.write("\u0453\u0454\3\2\2\2\u0454\u00b1\3\2\2\2\u0455\u0453\3")
        buf.write("\2\2\2\u0456\u045b\7F\2\2\u0457\u0458\7O\2\2\u0458\u045a")
        buf.write("\7F\2\2\u0459\u0457\3\2\2\2\u045a\u045d\3\2\2\2\u045b")
        buf.write("\u0459\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u00b3\3\2\2\2")
        buf.write("\u045d\u045b\3\2\2\2\u045e\u045f\7+\2\2\u045f\u0464\7")
        buf.write("F\2\2\u0460\u0461\7T\2\2\u0461\u0463\7F\2\2\u0462\u0460")
        buf.write("\3\2\2\2\u0463\u0466\3\2\2\2\u0464\u0462\3\2\2\2\u0464")
        buf.write("\u0465\3\2\2\2\u0465\u00b5\3\2\2\2\u0466\u0464\3\2\2\2")
        buf.write("\u0467\u0468\7,\2\2\u0468\u046d\7F\2\2\u0469\u046a\7T")
        buf.write("\2\2\u046a\u046c\7F\2\2\u046b\u0469\3\2\2\2\u046c\u046f")
        buf.write("\3\2\2\2\u046d\u046b\3\2\2\2\u046d\u046e\3\2\2\2\u046e")
        buf.write("\u00b7\3\2\2\2\u046f\u046d\3\2\2\2\u0470\u0471\7-\2\2")
        buf.write("\u0471\u0474\5\u00ccg\2\u0472\u0473\7T\2\2\u0473\u0475")
        buf.write("\5\u00ccg\2\u0474\u0472\3\2\2\2\u0474\u0475\3\2\2\2\u0475")
        buf.write("\u00b9\3\2\2\2\u0476\u047f\5\u00bc_\2\u0477\u047f\5\u00be")
        buf.write("`\2\u0478\u047f\5\u00c0a\2\u0479\u047f\5\u00c2b\2\u047a")
        buf.write("\u047f\5\u00c4c\2\u047b\u047f\5|?\2\u047c\u047f\5\u0102")
        buf.write("\u0082\2\u047d\u047f\5z>\2\u047e\u0476\3\2\2\2\u047e\u0477")
        buf.write("\3\2\2\2\u047e\u0478\3\2\2\2\u047e\u0479\3\2\2\2\u047e")
        buf.write("\u047a\3\2\2\2\u047e\u047b\3\2\2\2\u047e\u047c\3\2\2\2")
        buf.write("\u047e\u047d\3\2\2\2\u047f\u00bb\3\2\2\2\u0480\u0481\7")
        buf.write(".\2\2\u0481\u0482\5\u00ccg\2\u0482\u0483\7U\2\2\u0483")
        buf.write("\u048b\5\u00caf\2\u0484\u0485\7/\2\2\u0485\u0486\5\u00cc")
        buf.write("g\2\u0486\u0487\7U\2\2\u0487\u0488\5\u00caf\2\u0488\u048a")
        buf.write("\3\2\2\2\u0489\u0484\3\2\2\2\u048a\u048d\3\2\2\2\u048b")
        buf.write("\u0489\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u0491\3\2\2\2")
        buf.write("\u048d\u048b\3\2\2\2\u048e\u048f\7\60\2\2\u048f\u0490")
        buf.write("\7U\2\2\u0490\u0492\5\u00caf\2\u0491\u048e\3\2\2\2\u0491")
        buf.write("\u0492\3\2\2\2\u0492\u00bd\3\2\2\2\u0493\u0494\7\61\2")
        buf.write("\2\u0494\u0495\5\u00ccg\2\u0495\u0496\7U\2\2\u0496\u049a")
        buf.write("\5\u00caf\2\u0497\u0498\7\60\2\2\u0498\u0499\7U\2\2\u0499")
        buf.write("\u049b\5\u00caf\2\u049a\u0497\3\2\2\2\u049a\u049b\3\2")
        buf.write("\2\2\u049b\u00bf\3\2\2\2\u049c\u049d\7\62\2\2\u049d\u049e")
        buf.write("\5\u00fc\177\2\u049e\u049f\7\63\2\2\u049f\u04a0\5\u00fe")
        buf.write("\u0080\2\u04a0\u04a1\7U\2\2\u04a1\u04a5\5\u00caf\2\u04a2")
        buf.write("\u04a3\7\60\2\2\u04a3\u04a4\7U\2\2\u04a4\u04a6\5\u00ca")
        buf.write("f\2\u04a5\u04a2\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u00c1")
        buf.write("\3\2\2\2\u04a7\u04a8\7\64\2\2\u04a8\u04a9\7U\2\2\u04a9")
        buf.write("\u04bf\5\u00caf\2\u04aa\u04ab\5\u00c8e\2\u04ab\u04ac\7")
        buf.write("U\2\2\u04ac\u04ad\5\u00caf\2\u04ad\u04af\3\2\2\2\u04ae")
        buf.write("\u04aa\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04ae\3\2\2\2")
        buf.write("\u04b0\u04b1\3\2\2\2\u04b1\u04b5\3\2\2\2\u04b2\u04b3\7")
        buf.write("\60\2\2\u04b3\u04b4\7U\2\2\u04b4\u04b6\5\u00caf\2\u04b5")
        buf.write("\u04b2\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04ba\3\2\2\2")
        buf.write("\u04b7\u04b8\7\65\2\2\u04b8\u04b9\7U\2\2\u04b9\u04bb\5")
        buf.write("\u00caf\2\u04ba\u04b7\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb")
        buf.write("\u04c0\3\2\2\2\u04bc\u04bd\7\65\2\2\u04bd\u04be\7U\2\2")
        buf.write("\u04be\u04c0\5\u00caf\2\u04bf\u04ae\3\2\2\2\u04bf\u04bc")
        buf.write("\3\2\2\2\u04c0\u00c3\3\2\2\2\u04c1\u04c2\7\66\2\2\u04c2")
        buf.write("\u04c7\5\u00c6d\2\u04c3\u04c4\7T\2\2\u04c4\u04c6\5\u00c6")
        buf.write("d\2\u04c5\u04c3\3\2\2\2\u04c6\u04c9\3\2\2\2\u04c7\u04c5")
        buf.write("\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca\3\2\2\2\u04c9")
        buf.write("\u04c7\3\2\2\2\u04ca\u04cb\7U\2\2\u04cb\u04cc\5\u00ca")
        buf.write("f\2\u04cc\u00c5\3\2\2\2\u04cd\u04d0\5\u00ccg\2\u04ce\u04cf")
        buf.write("\7*\2\2\u04cf\u04d1\5\u00e0q\2\u04d0\u04ce\3\2\2\2\u04d0")
        buf.write("\u04d1\3\2\2\2\u04d1\u00c7\3\2\2\2\u04d2\u04d8\7\67\2")
        buf.write("\2\u04d3\u04d6\5\u00ccg\2\u04d4\u04d5\7*\2\2\u04d5\u04d7")
        buf.write("\7F\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7")
        buf.write("\u04d9\3\2\2\2\u04d8\u04d3\3\2\2\2\u04d8\u04d9\3\2\2\2")
        buf.write("\u04d9\u00c9\3\2\2\2\u04da\u04e5\5\u008aF\2\u04db\u04dc")
        buf.write("\7\33\2\2\u04dc\u04de\7\u0080\2\2\u04dd\u04df\5\u0088")
        buf.write("E\2\u04de\u04dd\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04de")
        buf.write("\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2")
        buf.write("\u04e3\7\u0081\2\2\u04e3\u04e5\3\2\2\2\u04e4\u04da\3\2")
        buf.write("\2\2\u04e4\u04db\3\2\2\2\u04e5\u00cb\3\2\2\2\u04e6\u04ec")
        buf.write("\5\u00d4k\2\u04e7\u04e8\7.\2\2\u04e8\u04e9\5\u00d4k\2")
        buf.write("\u04e9\u04ea\7\60\2\2\u04ea\u04eb\5\u00ccg\2\u04eb\u04ed")
        buf.write("\3\2\2\2\u04ec\u04e7\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed")
        buf.write("\u04f0\3\2\2\2\u04ee\u04f0\5\u00d0i\2\u04ef\u04e6\3\2")
        buf.write("\2\2\u04ef\u04ee\3\2\2\2\u04f0\u00cd\3\2\2\2\u04f1\u04f4")
        buf.write("\5\u00d4k\2\u04f2\u04f4\5\u00d2j\2\u04f3\u04f1\3\2\2\2")
        buf.write("\u04f3\u04f2\3\2\2\2\u04f4\u00cf\3\2\2\2\u04f5\u04f7\7")
        buf.write("8\2\2\u04f6\u04f8\5\u0084C\2\u04f7\u04f6\3\2\2\2\u04f7")
        buf.write("\u04f8\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fa\7U\2\2")
        buf.write("\u04fa\u04fb\5\u00ccg\2\u04fb\u00d1\3\2\2\2\u04fc\u04fe")
        buf.write("\78\2\2\u04fd\u04ff\5\u0084C\2\u04fe\u04fd\3\2\2\2\u04fe")
        buf.write("\u04ff\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0501\7U\2\2")
        buf.write("\u0501\u0502\5\u00ceh\2\u0502\u00d3\3\2\2\2\u0503\u0508")
        buf.write("\5\u00d6l\2\u0504\u0505\79\2\2\u0505\u0507\5\u00d6l\2")
        buf.write("\u0506\u0504\3\2\2\2\u0507\u050a\3\2\2\2\u0508\u0506\3")
        buf.write("\2\2\2\u0508\u0509\3\2\2\2\u0509\u00d5\3\2\2\2\u050a\u0508")
        buf.write("\3\2\2\2\u050b\u0510\5\u00d8m\2\u050c\u050d\7:\2\2\u050d")
        buf.write("\u050f\5\u00d8m\2\u050e\u050c\3\2\2\2\u050f\u0512\3\2")
        buf.write("\2\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u00d7")
        buf.write("\3\2\2\2\u0512\u0510\3\2\2\2\u0513\u0514\7;\2\2\u0514")
        buf.write("\u0517\5\u00d8m\2\u0515\u0517\5\u00dan\2\u0516\u0513\3")
        buf.write("\2\2\2\u0516\u0515\3\2\2\2\u0517\u00d9\3\2\2\2\u0518\u051e")
        buf.write("\5\u00dep\2\u0519\u051a\5\u00dco\2\u051a\u051b\5\u00de")
        buf.write("p\2\u051b\u051d\3\2\2\2\u051c\u0519\3\2\2\2\u051d\u0520")
        buf.write("\3\2\2\2\u051e\u051c\3\2\2\2\u051e\u051f\3\2\2\2\u051f")
        buf.write("\u00db\3\2\2\2\u0520\u051e\3\2\2\2\u0521\u052f\7h\2\2")
        buf.write("\u0522\u052f\7i\2\2\u0523\u052f\7j\2\2\u0524\u052f\7k")
        buf.write("\2\2\u0525\u052f\7l\2\2\u0526\u052f\7m\2\2\u0527\u052f")
        buf.write("\7n\2\2\u0528\u052f\7\63\2\2\u0529\u052a\7;\2\2\u052a")
        buf.write("\u052f\7\63\2\2\u052b\u052f\7<\2\2\u052c\u052d\7<\2\2")
        buf.write("\u052d\u052f\7;\2\2\u052e\u0521\3\2\2\2\u052e\u0522\3")
        buf.write("\2\2\2\u052e\u0523\3\2\2\2\u052e\u0524\3\2\2\2\u052e\u0525")
        buf.write("\3\2\2\2\u052e\u0526\3\2\2\2\u052e\u0527\3\2\2\2\u052e")
        buf.write("\u0528\3\2\2\2\u052e\u0529\3\2\2\2\u052e\u052b\3\2\2\2")
        buf.write("\u052e\u052c\3\2\2\2\u052f\u00dd\3\2\2\2\u0530\u0532\7")
        buf.write("Q\2\2\u0531\u0530\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0533")
        buf.write("\3\2\2\2\u0533\u0534\5\u00e0q\2\u0534\u00df\3\2\2\2\u0535")
        buf.write("\u053a\5\u00e2r\2\u0536\u0537\7[\2\2\u0537\u0539\5\u00e2")
        buf.write("r\2\u0538\u0536\3\2\2\2\u0539\u053c\3\2\2\2\u053a\u0538")
        buf.write("\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u00e1\3\2\2\2\u053c")
        buf.write("\u053a\3\2\2\2\u053d\u0542\5\u00e4s\2\u053e\u053f\7\\")
        buf.write("\2\2\u053f\u0541\5\u00e4s\2\u0540\u053e\3\2\2\2\u0541")
        buf.write("\u0544\3\2\2\2\u0542\u0540\3\2\2\2\u0542\u0543\3\2\2\2")
        buf.write("\u0543\u00e3\3\2\2\2\u0544\u0542\3\2\2\2\u0545\u054a\5")
        buf.write("\u00e6t\2\u0546\u0547\7]\2\2\u0547\u0549\5\u00e6t\2\u0548")
        buf.write("\u0546\3\2\2\2\u0549\u054c\3\2\2\2\u054a\u0548\3\2\2\2")
        buf.write("\u054a\u054b\3\2\2\2\u054b\u00e5\3\2\2\2\u054c\u054a\3")
        buf.write("\2\2\2\u054d\u0554\5\u00e8u\2\u054e\u054f\7^\2\2\u054f")
        buf.write("\u0553\5\u00e8u\2\u0550\u0551\7_\2\2\u0551\u0553\5\u00e8")
        buf.write("u\2\u0552\u054e\3\2\2\2\u0552\u0550\3\2\2\2\u0553\u0556")
        buf.write("\3\2\2\2\u0554\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555")
        buf.write("\u00e7\3\2\2\2\u0556\u0554\3\2\2\2\u0557\u055e\5\u00ea")
        buf.write("v\2\u0558\u0559\7`\2\2\u0559\u055d\5\u00eav\2\u055a\u055b")
        buf.write("\7a\2\2\u055b\u055d\5\u00eav\2\u055c\u0558\3\2\2\2\u055c")
        buf.write("\u055a\3\2\2\2\u055d\u0560\3\2\2\2\u055e\u055c\3\2\2\2")
        buf.write("\u055e\u055f\3\2\2\2\u055f\u00e9\3\2\2\2\u0560\u055e\3")
        buf.write("\2\2\2\u0561\u056e\5\u00ecw\2\u0562\u0563\7Q\2\2\u0563")
        buf.write("\u056d\5\u00ecw\2\u0564\u0565\7b\2\2\u0565\u056d\5\u00ec")
        buf.write("w\2\u0566\u0567\7c\2\2\u0567\u056d\5\u00ecw\2\u0568\u0569")
        buf.write("\7d\2\2\u0569\u056d\5\u00ecw\2\u056a\u056b\7o\2\2\u056b")
        buf.write("\u056d\5\u00ecw\2\u056c\u0562\3\2\2\2\u056c\u0564\3\2")
        buf.write("\2\2\u056c\u0566\3\2\2\2\u056c\u0568\3\2\2\2\u056c\u056a")
        buf.write("\3\2\2\2\u056d\u0570\3\2\2\2\u056e\u056c\3\2\2\2\u056e")
        buf.write("\u056f\3\2\2\2\u056f\u00eb\3\2\2\2\u0570\u056e\3\2\2\2")
        buf.write("\u0571\u0572\7`\2\2\u0572\u0579\5\u00ecw\2\u0573\u0574")
        buf.write("\7a\2\2\u0574\u0579\5\u00ecw\2\u0575\u0576\7e\2\2\u0576")
        buf.write("\u0579\5\u00ecw\2\u0577\u0579\5\u00eex\2\u0578\u0571\3")
        buf.write("\2\2\2\u0578\u0573\3\2\2\2\u0578\u0575\3\2\2\2\u0578\u0577")
        buf.write("\3\2\2\2\u0579\u00ed\3\2\2\2\u057a\u057e\5\u00f0y\2\u057b")
        buf.write("\u057d\5\u00f4{\2\u057c\u057b\3\2\2\2\u057d\u0580\3\2")
        buf.write("\2\2\u057e\u057c\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0583")
        buf.write("\3\2\2\2\u0580\u057e\3\2\2\2\u0581\u0582\7W\2\2\u0582")
        buf.write("\u0584\5\u00ecw\2\u0583\u0581\3\2\2\2\u0583\u0584\3\2")
        buf.write("\2\2\u0584\u00ef\3\2\2\2\u0585\u0588\7R\2\2\u0586\u0589")
        buf.write("\5\u010e\u0088\2\u0587\u0589\5\u00f2z\2\u0588\u0586\3")
        buf.write("\2\2\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058a")
        buf.write("\3\2\2\2\u058a\u05a1\7S\2\2\u058b\u058d\7Y\2\2\u058c\u058e")
        buf.write("\5\u00f2z\2\u058d\u058c\3\2\2\2\u058d\u058e\3\2\2\2\u058e")
        buf.write("\u058f\3\2\2\2\u058f\u05a1\7Z\2\2\u0590\u0592\7f\2\2\u0591")
        buf.write("\u0593\5\u0100\u0081\2\u0592\u0591\3\2\2\2\u0592\u0593")
        buf.write("\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u05a1\7g\2\2\u0595")
        buf.write("\u05a1\7F\2\2\u0596\u05a1\5\u0114\u008b\2\u0597\u0599")
        buf.write("\5\u0112\u008a\2\u0598\u0597\3\2\2\2\u0599\u059a\3\2\2")
        buf.write("\2\u059a\u0598\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u05a1")
        buf.write("\3\2\2\2\u059c\u05a1\7P\2\2\u059d\u05a1\7=\2\2\u059e\u05a1")
        buf.write("\7>\2\2\u059f\u05a1\7?\2\2\u05a0\u0585\3\2\2\2\u05a0\u058b")
        buf.write("\3\2\2\2\u05a0\u0590\3\2\2\2\u05a0\u0595\3\2\2\2\u05a0")
        buf.write("\u0596\3\2\2\2\u05a0\u0598\3\2\2\2\u05a0\u059c\3\2\2\2")
        buf.write("\u05a0\u059d\3\2\2\2\u05a0\u059e\3\2\2\2\u05a0\u059f\3")
        buf.write("\2\2\2\u05a1\u00f1\3\2\2\2\u05a2\u05ae\5\u00ccg\2\u05a3")
        buf.write("\u05af\5\u010a\u0086\2\u05a4\u05a5\7T\2\2\u05a5\u05a7")
        buf.write("\5\u00ccg\2\u05a6\u05a4\3\2\2\2\u05a7\u05aa\3\2\2\2\u05a8")
        buf.write("\u05a6\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05ac\3\2\2\2")
        buf.write("\u05aa\u05a8\3\2\2\2\u05ab\u05ad\7T\2\2\u05ac\u05ab\3")
        buf.write("\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05af\3\2\2\2\u05ae\u05a3")
        buf.write("\3\2\2\2\u05ae\u05a8\3\2\2\2\u05af\u00f3\3\2\2\2\u05b0")
        buf.write("\u05b2\7R\2\2\u05b1\u05b3\5\u0104\u0083\2\u05b2\u05b1")
        buf.write("\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4")
        buf.write("\u05bc\7S\2\2\u05b5\u05b6\7Y\2\2\u05b6\u05b7\5\u00f6|")
        buf.write("\2\u05b7\u05b8\7Z\2\2\u05b8\u05bc\3\2\2\2\u05b9\u05ba")
        buf.write("\7O\2\2\u05ba\u05bc\7F\2\2\u05bb\u05b0\3\2\2\2\u05bb\u05b5")
        buf.write("\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bc\u00f5\3\2\2\2\u05bd")
        buf.write("\u05c2\5\u00f8}\2\u05be\u05bf\7T\2\2\u05bf\u05c1\5\u00f8")
        buf.write("}\2\u05c0\u05be\3\2\2\2\u05c1\u05c4\3\2\2\2\u05c2\u05c0")
        buf.write("\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c6\3\2\2\2\u05c4")
        buf.write("\u05c2\3\2\2\2\u05c5\u05c7\7T\2\2\u05c6\u05c5\3\2\2\2")
        buf.write("\u05c6\u05c7\3\2\2\2\u05c7\u00f7\3\2\2\2\u05c8\u05d4\5")
        buf.write("\u00ccg\2\u05c9\u05cb\5\u00ccg\2\u05ca\u05c9\3\2\2\2\u05ca")
        buf.write("\u05cb\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05ce\7U\2\2")
        buf.write("\u05cd\u05cf\5\u00ccg\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf")
        buf.write("\3\2\2\2\u05cf\u05d1\3\2\2\2\u05d0\u05d2\5\u00fa~\2\u05d1")
        buf.write("\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d4\3\2\2\2")
        buf.write("\u05d3\u05c8\3\2\2\2\u05d3\u05ca\3\2\2\2\u05d4\u00f9\3")
        buf.write("\2\2\2\u05d5\u05d7\7U\2\2\u05d6\u05d8\5\u00ccg\2\u05d7")
        buf.write("\u05d6\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u00fb\3\2\2\2")
        buf.write("\u05d9\u05de\5\u00dep\2\u05da\u05db\7T\2\2\u05db\u05dd")
        buf.write("\5\u00dep\2\u05dc\u05da\3\2\2\2\u05dd\u05e0\3\2\2\2\u05de")
        buf.write("\u05dc\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e2\3\2\2\2")
        buf.write("\u05e0\u05de\3\2\2\2\u05e1\u05e3\7T\2\2\u05e2\u05e1\3")
        buf.write("\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u00fd\3\2\2\2\u05e4\u05e9")
        buf.write("\5\u00ccg\2\u05e5\u05e6\7T\2\2\u05e6\u05e8\5\u00ccg\2")
        buf.write("\u05e7\u05e5\3\2\2\2\u05e8\u05eb\3\2\2\2\u05e9\u05e7\3")
        buf.write("\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ed\3\2\2\2\u05eb\u05e9")
        buf.write("\3\2\2\2\u05ec\u05ee\7T\2\2\u05ed\u05ec\3\2\2\2\u05ed")
        buf.write("\u05ee\3\2\2\2\u05ee\u00ff\3\2\2\2\u05ef\u05f0\5\u00cc")
        buf.write("g\2\u05f0\u05f1\7U\2\2\u05f1\u0600\5\u00ccg\2\u05f2\u0601")
        buf.write("\5\u010a\u0086\2\u05f3\u05f4\7T\2\2\u05f4\u05f5\5\u00cc")
        buf.write("g\2\u05f5\u05f6\7U\2\2\u05f6\u05f7\5\u00ccg\2\u05f7\u05f9")
        buf.write("\3\2\2\2\u05f8\u05f3\3\2\2\2\u05f9\u05fc\3\2\2\2\u05fa")
        buf.write("\u05f8\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fe\3\2\2\2")
        buf.write("\u05fc\u05fa\3\2\2\2\u05fd\u05ff\7T\2\2\u05fe\u05fd\3")
        buf.write("\2\2\2\u05fe\u05ff\3\2\2\2\u05ff\u0601\3\2\2\2\u0600\u05f2")
        buf.write("\3\2\2\2\u0600\u05fa\3\2\2\2\u0601\u0611\3\2\2\2\u0602")
        buf.write("\u060e\5\u00ccg\2\u0603\u060f\5\u010a\u0086\2\u0604\u0605")
        buf.write("\7T\2\2\u0605\u0607\5\u00ccg\2\u0606\u0604\3\2\2\2\u0607")
        buf.write("\u060a\3\2\2\2\u0608\u0606\3\2\2\2\u0608\u0609\3\2\2\2")
        buf.write("\u0609\u060c\3\2\2\2\u060a\u0608\3\2\2\2\u060b\u060d\7")
        buf.write("T\2\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u060f")
        buf.write("\3\2\2\2\u060e\u0603\3\2\2\2\u060e\u0608\3\2\2\2\u060f")
        buf.write("\u0611\3\2\2\2\u0610\u05ef\3\2\2\2\u0610\u0602\3\2\2\2")
        buf.write("\u0611\u0101\3\2\2\2\u0612\u0613\7@\2\2\u0613\u0619\7")
        buf.write("F\2\2\u0614\u0616\7R\2\2\u0615\u0617\5\u0104\u0083\2\u0616")
        buf.write("\u0615\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0618\3\2\2\2")
        buf.write("\u0618\u061a\7S\2\2\u0619\u0614\3\2\2\2\u0619\u061a\3")
        buf.write("\2\2\2\u061a\u061b\3\2\2\2\u061b\u061c\7U\2\2\u061c\u061d")
        buf.write("\5\u00caf\2\u061d\u0103\3\2\2\2\u061e\u061f\5\u0106\u0084")
        buf.write("\2\u061f\u0620\7T\2\2\u0620\u0622\3\2\2\2\u0621\u061e")
        buf.write("\3\2\2\2\u0622\u0625\3\2\2\2\u0623\u0621\3\2\2\2\u0623")
        buf.write("\u0624\3\2\2\2\u0624\u063a\3\2\2\2\u0625\u0623\3\2\2\2")
        buf.write("\u0626\u0628\5\u0106\u0084\2\u0627\u0629\7T\2\2\u0628")
        buf.write("\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u063b\3\2\2\2")
        buf.write("\u062a\u062b\7Q\2\2\u062b\u0630\5\u00ccg\2\u062c\u062d")
        buf.write("\7T\2\2\u062d\u062f\5\u0106\u0084\2\u062e\u062c\3\2\2")
        buf.write("\2\u062f\u0632\3\2\2\2\u0630\u062e\3\2\2\2\u0630\u0631")
        buf.write("\3\2\2\2\u0631\u0636\3\2\2\2\u0632\u0630\3\2\2\2\u0633")
        buf.write("\u0634\7T\2\2\u0634\u0635\7W\2\2\u0635\u0637\5\u00ccg")
        buf.write("\2\u0636\u0633\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u063b")
        buf.write("\3\2\2\2\u0638\u0639\7W\2\2\u0639\u063b\5\u00ccg\2\u063a")
        buf.write("\u0626\3\2\2\2\u063a\u062a\3\2\2\2\u063a\u0638\3\2\2\2")
        buf.write("\u063b\u0105\3\2\2\2\u063c\u063e\5\u00ccg\2\u063d\u063f")
        buf.write("\5\u010a\u0086\2\u063e\u063d\3\2\2\2\u063e\u063f\3\2\2")
        buf.write("\2\u063f\u0645\3\2\2\2\u0640\u0641\5\u00ccg\2\u0641\u0642")
        buf.write("\7X\2\2\u0642\u0643\5\u00ccg\2\u0643\u0645\3\2\2\2\u0644")
        buf.write("\u063c\3\2\2\2\u0644\u0640\3\2\2\2\u0645\u0107\3\2\2\2")
        buf.write("\u0646\u0649\5\u010a\u0086\2\u0647\u0649\5\u010c\u0087")
        buf.write("\2\u0648\u0646\3\2\2\2\u0648\u0647\3\2\2\2\u0649\u0109")
        buf.write("\3\2\2\2\u064a\u064b\7\62\2\2\u064b\u064c\5\u00fc\177")
        buf.write("\2\u064c\u064d\7\63\2\2\u064d\u064f\5\u00d4k\2\u064e\u0650")
        buf.write("\5\u0108\u0085\2\u064f\u064e\3\2\2\2\u064f\u0650\3\2\2")
        buf.write("\2\u0650\u010b\3\2\2\2\u0651\u0652\7.\2\2\u0652\u0654")
        buf.write("\5\u00ceh\2\u0653\u0655\5\u0108\u0085\2\u0654\u0653\3")
        buf.write("\2\2\2\u0654\u0655\3\2\2\2\u0655\u010d\3\2\2\2\u0656\u0658")
        buf.write("\7A\2\2\u0657\u0659\5\u0110\u0089\2\u0658\u0657\3\2\2")
        buf.write("\2\u0658\u0659\3\2\2\2\u0659\u010f\3\2\2\2\u065a\u065b")
        buf.write("\7(\2\2\u065b\u065e\5\u00ccg\2\u065c\u065e\5\u00fe\u0080")
        buf.write("\2\u065d\u065a\3\2\2\2\u065d\u065c\3\2\2\2\u065e\u0111")
        buf.write("\3\2\2\2\u065f\u0660\t\b\2\2\u0660\u0113\3\2\2\2\u0661")
        buf.write("\u0665\5\u0116\u008c\2\u0662\u0665\7M\2\2\u0663\u0665")
        buf.write("\7N\2\2\u0664\u0661\3\2\2\2\u0664\u0662\3\2\2\2\u0664")
        buf.write("\u0663\3\2\2\2\u0665\u0115\3\2\2\2\u0666\u0667\t\t\2\2")
        buf.write("\u0667\u0117\3\2\2\2\u00e4\u011b\u0121\u012a\u012f\u0133")
        buf.write("\u0137\u0140\u014a\u014d\u0150\u0156\u015b\u0160\u0162")
        buf.write("\u016e\u0173\u017d\u0182\u0185\u018d\u0190\u0193\u0199")
        buf.write("\u019f\u01a6\u01ab\u01ad\u01b0\u01b3\u01bd\u01c0\u01c7")
        buf.write("\u01cd\u01cf\u01d7\u01d9\u01e3\u01e8\u01ef\u01f4\u01f9")
        buf.write("\u0204\u020a\u020c\u0213\u021d\u0224\u022e\u0236\u023c")
        buf.write("\u0240\u0244\u024a\u0251\u0258\u025e\u0262\u0268\u026b")
        buf.write("\u0270\u0276\u027a\u0280\u0284\u028c\u0291\u029a\u029f")
        buf.write("\u02a6\u02ab\u02b4\u02bc\u02c5\u02dd\u02e7\u02ed\u02f6")
        buf.write("\u02fa\u02fc\u0305\u030e\u0311\u0318\u031d\u0324\u032b")
        buf.write("\u0332\u0338\u033c\u0342\u0348\u034c\u0352\u0356\u0358")
        buf.write("\u035c\u0362\u0366\u036c\u0370\u0375\u037a\u0380\u0384")
        buf.write("\u038a\u0390\u0394\u039a\u039e\u03a0\u03a4\u03aa\u03ae")
        buf.write("\u03b4\u03b8\u03be\u03c5\u03c9\u03d5\u03db\u03e0\u03e4")
        buf.write("\u03e7\u03eb\u03f0\u03f4\u03f8\u0406\u040e\u0416\u0418")
        buf.write("\u041c\u0425\u042c\u042e\u0437\u043c\u0441\u0448\u044c")
        buf.write("\u0453\u045b\u0464\u046d\u0474\u047e\u048b\u0491\u049a")
        buf.write("\u04a5\u04b0\u04b5\u04ba\u04bf\u04c7\u04d0\u04d6\u04d8")
        buf.write("\u04e0\u04e4\u04ec\u04ef\u04f3\u04f7\u04fe\u0508\u0510")
        buf.write("\u0516\u051e\u052e\u0531\u053a\u0542\u054a\u0552\u0554")
        buf.write("\u055c\u055e\u056c\u056e\u0578\u057e\u0583\u0588\u058d")
        buf.write("\u0592\u059a\u05a0\u05a8\u05ac\u05ae\u05b2\u05bb\u05c2")
        buf.write("\u05c6\u05ca\u05ce\u05d1\u05d3\u05d7\u05de\u05e2\u05e9")
        buf.write("\u05ed\u05fa\u05fe\u0600\u0608\u060c\u060e\u0610\u0616")
        buf.write("\u0619\u0623\u0628\u0630\u0636\u063a\u063e\u0644\u0648")
        buf.write("\u064f\u0654\u0658\u065d\u0664")
        return buf.getvalue()


class MQVTrParser ( Parser ):

    grammarFileName = "MQVTr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'_'", "<INVALID>", "'::'", "'++'", "'checkonly'", 
                     "'default'", "'default_values'", "'domain'", "'enforce'", 
                     "'extends'", "'implementedby'", "'namespace'", "'library'", 
                     "'key'", "'opposite'", "'overrides'", "'primitive'", 
                     "'query'", "'relation'", "'replace'", "'top'", "'transformation'", 
                     "'when'", "'where'", "<INVALID>", "'bool'", "'int'", 
                     "'float'", "'str'", "'tuple'", "'set'", "'list'", "'oset'", 
                     "'dict'", "'def'", "'return'", "'raise'", "'from'", 
                     "'import'", "'as'", "'global'", "'nonlocal'", "'assert'", 
                     "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", 
                     "'try'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'None'", "'True'", 
                     "'False'", "'class'", "'yield'", "'del'", "'pass'", 
                     "'continue'", "'break'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "'...'", 
                     "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='", 
                     "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                     "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", 
                     "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", 
                     "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", 
                     "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
                     "'//='" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "URI", "COLONCOLON", "EXTRA_MEMBERS", 
                      "CHECKONLY", "DEFAULT", "DEFAULT_VALUES", "DOMAIN", 
                      "ENFORCE", "EXTENDS", "IMPLEMENTED_BY", "NAMESPACE", 
                      "LIBRARY", "KEY", "OPPOSITE", "OVERRIDES", "PRIMITIVE", 
                      "QUERY", "RELATION", "REPLACE", "TOP", "TRANSFORMATION", 
                      "WHEN", "WHERE", "NEWLINE", "BOOLEAN", "INTEGER", 
                      "FLOAT", "STRING", "TUPLE", "SET", "LIST", "ORDEREDSET", 
                      "MAP", "DEF", "RETURN", "RAISE", "FROM", "IMPORT", 
                      "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", 
                      "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", 
                      "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", 
                      "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", 
                      "CONTINUE", "BREAK", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
                      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                      "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", 
                      "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", 
                      "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
                      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", 
                      "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", 
                      "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
                      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
                      "POWER_ASSIGN", "IDIV_ASSIGN", "PSKIP", "UNKNOWN_CHAR", 
                      "INDENT", "DEDENT" ]

    RULE_topLevelCS = 0
    RULE_unitCS = 1
    RULE_transformationCS = 2
    RULE_transformation_suite = 3
    RULE_modelDeclCS = 4
    RULE_keyDeclCS = 5
    RULE_keyPropertyCS = 6
    RULE_relationCS = 7
    RULE_relation_suite = 8
    RULE_relation_stmt = 9
    RULE_queryCS = 10
    RULE_query_suite = 11
    RULE_paramDeclarationCS = 12
    RULE_varDeclarationCS = 13
    RULE_varDeclarationIdCS = 14
    RULE_domainCS = 15
    RULE_checkEnforceQualifierCS = 16
    RULE_domain_suite = 17
    RULE_domain_stmt = 18
    RULE_domainPatternCS = 19
    RULE_primitiveTypeDomainCS = 20
    RULE_whenCS = 21
    RULE_whereCS = 22
    RULE_defaultValue_suite = 23
    RULE_defaultValueCS = 24
    RULE_templateCS = 25
    RULE_collectionTemplateCS = 26
    RULE_memberSelectionCS = 27
    RULE_objectTemplateCS = 28
    RULE_objectTemplate_suite = 29
    RULE_propertyTemplateCS = 30
    RULE_qvtr_exp = 31
    RULE_predicateCS = 32
    RULE_uriPathNameCS = 33
    RULE_uriFirstPathElementCS = 34
    RULE_scopeNameCS = 35
    RULE_typedTypeRefCS = 36
    RULE_typedRefCS = 37
    RULE_unrestrictedName = 38
    RULE_pathNameCS = 39
    RULE_firstPathElementCS = 40
    RULE_nextPathElementCS = 41
    RULE_unreservedName = 42
    RULE_primitiveTypeIdentifier = 43
    RULE_collectionTypeIdentifier = 44
    RULE_mapTypeIdentifier = 45
    RULE_tupleTypeIdentifier = 46
    RULE_primitiveTypeCS = 47
    RULE_collectionTypeCS = 48
    RULE_mapTypeCS = 49
    RULE_tupleTypeCS = 50
    RULE_typeLiteralCS = 51
    RULE_typeNameExpCS = 52
    RULE_typeExpCS = 53
    RULE_identifier = 54
    RULE_single_input = 55
    RULE_file_input = 56
    RULE_eval_input = 57
    RULE_decorator = 58
    RULE_decorators = 59
    RULE_decorated = 60
    RULE_funcdef = 61
    RULE_parameters = 62
    RULE_typedargslist = 63
    RULE_tfpdef = 64
    RULE_varargslist = 65
    RULE_vfpdef = 66
    RULE_stmt = 67
    RULE_simple_stmt = 68
    RULE_small_stmt = 69
    RULE_expr_stmt = 70
    RULE_testlist_star_expr = 71
    RULE_augassign = 72
    RULE_del_stmt = 73
    RULE_pass_stmt = 74
    RULE_flow_stmt = 75
    RULE_break_stmt = 76
    RULE_continue_stmt = 77
    RULE_return_stmt = 78
    RULE_yield_stmt = 79
    RULE_raise_stmt = 80
    RULE_import_stmt = 81
    RULE_import_name = 82
    RULE_import_from = 83
    RULE_import_as_name = 84
    RULE_dotted_as_name = 85
    RULE_import_as_names = 86
    RULE_dotted_as_names = 87
    RULE_dotted_name = 88
    RULE_global_stmt = 89
    RULE_nonlocal_stmt = 90
    RULE_assert_stmt = 91
    RULE_compound_stmt = 92
    RULE_if_stmt = 93
    RULE_while_stmt = 94
    RULE_for_stmt = 95
    RULE_try_stmt = 96
    RULE_with_stmt = 97
    RULE_with_item = 98
    RULE_except_clause = 99
    RULE_suite = 100
    RULE_test = 101
    RULE_test_nocond = 102
    RULE_lambdef = 103
    RULE_lambdef_nocond = 104
    RULE_or_test = 105
    RULE_and_test = 106
    RULE_not_test = 107
    RULE_comparison = 108
    RULE_comp_op = 109
    RULE_star_expr = 110
    RULE_expr = 111
    RULE_xor_expr = 112
    RULE_and_expr = 113
    RULE_shift_expr = 114
    RULE_arith_expr = 115
    RULE_term = 116
    RULE_factor = 117
    RULE_power = 118
    RULE_atom = 119
    RULE_testlist_comp = 120
    RULE_trailer = 121
    RULE_subscriptlist = 122
    RULE_subscript = 123
    RULE_sliceop = 124
    RULE_exprlist = 125
    RULE_testlist = 126
    RULE_dictorsetmaker = 127
    RULE_classdef = 128
    RULE_arglist = 129
    RULE_argument = 130
    RULE_comp_iter = 131
    RULE_comp_for = 132
    RULE_comp_if = 133
    RULE_yield_expr = 134
    RULE_yield_arg = 135
    RULE_string = 136
    RULE_number = 137
    RULE_integer = 138

    ruleNames =  [ "topLevelCS", "unitCS", "transformationCS", "transformation_suite", 
                   "modelDeclCS", "keyDeclCS", "keyPropertyCS", "relationCS", 
                   "relation_suite", "relation_stmt", "queryCS", "query_suite", 
                   "paramDeclarationCS", "varDeclarationCS", "varDeclarationIdCS", 
                   "domainCS", "checkEnforceQualifierCS", "domain_suite", 
                   "domain_stmt", "domainPatternCS", "primitiveTypeDomainCS", 
                   "whenCS", "whereCS", "defaultValue_suite", "defaultValueCS", 
                   "templateCS", "collectionTemplateCS", "memberSelectionCS", 
                   "objectTemplateCS", "objectTemplate_suite", "propertyTemplateCS", 
                   "qvtr_exp", "predicateCS", "uriPathNameCS", "uriFirstPathElementCS", 
                   "scopeNameCS", "typedTypeRefCS", "typedRefCS", "unrestrictedName", 
                   "pathNameCS", "firstPathElementCS", "nextPathElementCS", 
                   "unreservedName", "primitiveTypeIdentifier", "collectionTypeIdentifier", 
                   "mapTypeIdentifier", "tupleTypeIdentifier", "primitiveTypeCS", 
                   "collectionTypeCS", "mapTypeCS", "tupleTypeCS", "typeLiteralCS", 
                   "typeNameExpCS", "typeExpCS", "identifier", "single_input", 
                   "file_input", "eval_input", "decorator", "decorators", 
                   "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
                   "with_item", "except_clause", "suite", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "xor_expr", 
                   "and_expr", "shift_expr", "arith_expr", "term", "factor", 
                   "power", "atom", "testlist_comp", "trailer", "subscriptlist", 
                   "subscript", "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "yield_expr", "yield_arg", "string", "number", 
                   "integer" ]

    EOF = Token.EOF
    T__0=1
    URI=2
    COLONCOLON=3
    EXTRA_MEMBERS=4
    CHECKONLY=5
    DEFAULT=6
    DEFAULT_VALUES=7
    DOMAIN=8
    ENFORCE=9
    EXTENDS=10
    IMPLEMENTED_BY=11
    NAMESPACE=12
    LIBRARY=13
    KEY=14
    OPPOSITE=15
    OVERRIDES=16
    PRIMITIVE=17
    QUERY=18
    RELATION=19
    REPLACE=20
    TOP=21
    TRANSFORMATION=22
    WHEN=23
    WHERE=24
    NEWLINE=25
    BOOLEAN=26
    INTEGER=27
    FLOAT=28
    STRING=29
    TUPLE=30
    SET=31
    LIST=32
    ORDEREDSET=33
    MAP=34
    DEF=35
    RETURN=36
    RAISE=37
    FROM=38
    IMPORT=39
    AS=40
    GLOBAL=41
    NONLOCAL=42
    ASSERT=43
    IF=44
    ELIF=45
    ELSE=46
    WHILE=47
    FOR=48
    IN=49
    TRY=50
    FINALLY=51
    WITH=52
    EXCEPT=53
    LAMBDA=54
    OR=55
    AND=56
    NOT=57
    IS=58
    NONE=59
    TRUE=60
    FALSE=61
    CLASS=62
    YIELD=63
    DEL=64
    PASS=65
    CONTINUE=66
    BREAK=67
    NAME=68
    STRING_LITERAL=69
    BYTES_LITERAL=70
    DECIMAL_INTEGER=71
    OCT_INTEGER=72
    HEX_INTEGER=73
    BIN_INTEGER=74
    FLOAT_NUMBER=75
    IMAG_NUMBER=76
    DOT=77
    ELLIPSIS=78
    STAR=79
    OPEN_PAREN=80
    CLOSE_PAREN=81
    COMMA=82
    COLON=83
    SEMI_COLON=84
    POWER=85
    ASSIGN=86
    OPEN_BRACK=87
    CLOSE_BRACK=88
    OR_OP=89
    XOR=90
    AND_OP=91
    LEFT_SHIFT=92
    RIGHT_SHIFT=93
    ADD=94
    MINUS=95
    DIV=96
    MOD=97
    IDIV=98
    NOT_OP=99
    OPEN_BRACE=100
    CLOSE_BRACE=101
    LESS_THAN=102
    GREATER_THAN=103
    EQUALS=104
    GT_EQ=105
    LT_EQ=106
    NOT_EQ_1=107
    NOT_EQ_2=108
    AT=109
    ARROW=110
    ADD_ASSIGN=111
    SUB_ASSIGN=112
    MULT_ASSIGN=113
    AT_ASSIGN=114
    DIV_ASSIGN=115
    MOD_ASSIGN=116
    AND_ASSIGN=117
    OR_ASSIGN=118
    XOR_ASSIGN=119
    LEFT_SHIFT_ASSIGN=120
    RIGHT_SHIFT_ASSIGN=121
    POWER_ASSIGN=122
    IDIV_ASSIGN=123
    PSKIP=124
    UNKNOWN_CHAR=125
    INDENT=126
    DEDENT=127

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class TopLevelCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MQVTrParser.EOF, 0)

        def unitCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.UnitCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.UnitCSContext,i)


        def transformationCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TransformationCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TransformationCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_topLevelCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelCS" ):
                listener.enterTopLevelCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelCS" ):
                listener.exitTopLevelCS(self)




    def topLevelCS(self):

        localctx = MQVTrParser.TopLevelCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_topLevelCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.NAMESPACE:
                self.state = 278
                self.unitCS()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.TRANSFORMATION:
                self.state = 284
                self.transformationCS()
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 290
            self.match(MQVTrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnitCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(MQVTrParser.NAMESPACE, 0)

        def uriPathNameCS(self):
            return self.getTypedRuleContext(MQVTrParser.UriPathNameCSContext,0)


        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_unitCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitCS" ):
                listener.enterUnitCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitCS" ):
                listener.exitUnitCS(self)




    def unitCS(self):

        localctx = MQVTrParser.UnitCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unitCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(MQVTrParser.NAMESPACE)
            self.state = 296
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 293
                self.unrestrictedName()
                self.state = 294
                self.match(MQVTrParser.COLON)


            self.state = 298
            self.uriPathNameCS()
            self.state = 301
            _la = self._input.LA(1)
            if _la==MQVTrParser.COLONCOLON:
                self.state = 299
                self.match(MQVTrParser.COLONCOLON)
                self.state = 300
                self.match(MQVTrParser.STAR)


            self.state = 303
            self.match(MQVTrParser.SEMI_COLON)
            self.state = 305
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 304
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransformationCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSFORMATION(self):
            return self.getToken(MQVTrParser.TRANSFORMATION, 0)

        def unrestrictedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.UnrestrictedNameContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,i)


        def modelDeclCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.ModelDeclCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.ModelDeclCSContext,i)


        def transformation_suite(self):
            return self.getTypedRuleContext(MQVTrParser.Transformation_suiteContext,0)


        def scopeNameCS(self):
            return self.getTypedRuleContext(MQVTrParser.ScopeNameCSContext,0)


        def EXTENDS(self):
            return self.getToken(MQVTrParser.EXTENDS, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NEWLINE)
            else:
                return self.getToken(MQVTrParser.NEWLINE, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_transformationCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformationCS" ):
                listener.enterTransformationCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformationCS" ):
                listener.exitTransformationCS(self)




    def transformationCS(self):

        localctx = MQVTrParser.TransformationCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_transformationCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(MQVTrParser.TRANSFORMATION)
            self.state = 309
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 308
                self.scopeNameCS()


            self.state = 311
            self.unrestrictedName()
            self.state = 312
            self.match(MQVTrParser.OPEN_PAREN)
            self.state = 313
            self.modelDeclCS()
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 314
                self.match(MQVTrParser.COMMA)
                self.state = 315
                self.modelDeclCS()
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self.match(MQVTrParser.CLOSE_PAREN)
            self.state = 331
            _la = self._input.LA(1)
            if _la==MQVTrParser.EXTENDS:
                self.state = 322
                self.match(MQVTrParser.EXTENDS)
                self.state = 323
                self.unrestrictedName()
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MQVTrParser.COMMA:
                    self.state = 324
                    self.match(MQVTrParser.COMMA)
                    self.state = 325
                    self.unrestrictedName()
                    self.state = 330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 334
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 333
                self.match(MQVTrParser.NEWLINE)


            self.state = 336
            self.match(MQVTrParser.OPEN_BRACE)
            self.state = 337
            self.transformation_suite()
            self.state = 338
            self.match(MQVTrParser.CLOSE_BRACE)
            self.state = 340
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 339
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transformation_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyDeclCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.KeyDeclCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.KeyDeclCSContext,i)


        def relationCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.RelationCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.RelationCSContext,i)


        def queryCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.QueryCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.QueryCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_transformation_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation_suite" ):
                listener.enterTransformation_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation_suite" ):
                listener.exitTransformation_suite(self)




    def transformation_suite(self):

        localctx = MQVTrParser.Transformation_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_transformation_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.KEY:
                self.state = 342
                self.keyDeclCS()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MQVTrParser.DEFAULT) | (1 << MQVTrParser.QUERY) | (1 << MQVTrParser.RELATION) | (1 << MQVTrParser.TOP))) != 0):
                self.state = 350
                token = self._input.LA(1)
                if token in [MQVTrParser.DEFAULT, MQVTrParser.RELATION, MQVTrParser.TOP]:
                    self.state = 348
                    self.relationCS()

                elif token in [MQVTrParser.QUERY]:
                    self.state = 349
                    self.queryCS()

                else:
                    raise NoViableAltException(self)

                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModelDeclCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.UnrestrictedNameContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_modelDeclCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModelDeclCS" ):
                listener.enterModelDeclCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModelDeclCS" ):
                listener.exitModelDeclCS(self)




    def modelDeclCS(self):

        localctx = MQVTrParser.ModelDeclCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modelDeclCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.unrestrictedName()
            self.state = 356
            self.match(MQVTrParser.COLON)
            self.state = 369
            token = self._input.LA(1)
            if token in [MQVTrParser.CHECKONLY, MQVTrParser.DEFAULT, MQVTrParser.DEFAULT_VALUES, MQVTrParser.DOMAIN, MQVTrParser.ENFORCE, MQVTrParser.EXTENDS, MQVTrParser.IMPLEMENTED_BY, MQVTrParser.LIBRARY, MQVTrParser.KEY, MQVTrParser.OPPOSITE, MQVTrParser.OVERRIDES, MQVTrParser.PRIMITIVE, MQVTrParser.QUERY, MQVTrParser.RELATION, MQVTrParser.REPLACE, MQVTrParser.TOP, MQVTrParser.TRANSFORMATION, MQVTrParser.WHEN, MQVTrParser.WHERE, MQVTrParser.IMPORT, MQVTrParser.NAME]:
                self.state = 357
                self.unrestrictedName()

            elif token in [MQVTrParser.OPEN_BRACE]:
                self.state = 358
                self.match(MQVTrParser.OPEN_BRACE)
                self.state = 359
                self.unrestrictedName()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MQVTrParser.COMMA:
                    self.state = 360
                    self.match(MQVTrParser.COMMA)
                    self.state = 361
                    self.unrestrictedName()
                    self.state = 366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 367
                self.match(MQVTrParser.CLOSE_BRACE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyDeclCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY(self):
            return self.getToken(MQVTrParser.KEY, 0)

        def pathNameCS(self):
            return self.getTypedRuleContext(MQVTrParser.PathNameCSContext,0)


        def keyPropertyCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.KeyPropertyCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.KeyPropertyCSContext,i)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_keyDeclCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyDeclCS" ):
                listener.enterKeyDeclCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyDeclCS" ):
                listener.exitKeyDeclCS(self)




    def keyDeclCS(self):

        localctx = MQVTrParser.KeyDeclCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_keyDeclCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(MQVTrParser.KEY)
            self.state = 372
            self.pathNameCS()
            self.state = 373
            self.match(MQVTrParser.OPEN_BRACE)
            self.state = 374
            self.keyPropertyCS()
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 375
                self.match(MQVTrParser.COMMA)
                self.state = 376
                self.keyPropertyCS()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 382
            self.match(MQVTrParser.CLOSE_BRACE)
            self.state = 384
            _la = self._input.LA(1)
            if _la==MQVTrParser.SEMI_COLON:
                self.state = 383
                self.match(MQVTrParser.SEMI_COLON)


            self.state = 387
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 386
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyPropertyCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def OPPOSITE(self):
            return self.getToken(MQVTrParser.OPPOSITE, 0)

        def pathNameCS(self):
            return self.getTypedRuleContext(MQVTrParser.PathNameCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_keyPropertyCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyPropertyCS" ):
                listener.enterKeyPropertyCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyPropertyCS" ):
                listener.exitKeyPropertyCS(self)




    def keyPropertyCS(self):

        localctx = MQVTrParser.KeyPropertyCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_keyPropertyCS)
        try:
            self.state = 395
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 389
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self.match(MQVTrParser.OPPOSITE)
                self.state = 391
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 392
                self.pathNameCS()
                self.state = 393
                self.match(MQVTrParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATION(self):
            return self.getToken(MQVTrParser.RELATION, 0)

        def unrestrictedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.UnrestrictedNameContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,i)


        def relation_suite(self):
            return self.getTypedRuleContext(MQVTrParser.Relation_suiteContext,0)


        def TOP(self):
            return self.getToken(MQVTrParser.TOP, 0)

        def DEFAULT(self):
            return self.getToken(MQVTrParser.DEFAULT, 0)

        def OVERRIDES(self):
            return self.getToken(MQVTrParser.OVERRIDES, 0)

        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_relationCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationCS" ):
                listener.enterRelationCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationCS" ):
                listener.exitRelationCS(self)




    def relationCS(self):

        localctx = MQVTrParser.RelationCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_relationCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            _la = self._input.LA(1)
            if _la==MQVTrParser.TOP:
                self.state = 397
                self.match(MQVTrParser.TOP)


            self.state = 401
            _la = self._input.LA(1)
            if _la==MQVTrParser.DEFAULT:
                self.state = 400
                self.match(MQVTrParser.DEFAULT)


            self.state = 403
            self.match(MQVTrParser.RELATION)
            self.state = 404
            self.unrestrictedName()
            self.state = 407
            _la = self._input.LA(1)
            if _la==MQVTrParser.OVERRIDES:
                self.state = 405
                self.match(MQVTrParser.OVERRIDES)
                self.state = 406
                self.unrestrictedName()


            self.state = 409
            self.match(MQVTrParser.OPEN_BRACE)
            self.state = 410
            self.relation_suite()
            self.state = 411
            self.match(MQVTrParser.CLOSE_BRACE)
            self.state = 413
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 412
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relation_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Relation_stmtContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_relation_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_suite" ):
                listener.enterRelation_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_suite" ):
                listener.exitRelation_suite(self)




    def relation_suite(self):

        localctx = MQVTrParser.Relation_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_relation_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.relation_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relation_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDeclarationCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.VarDeclarationCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.VarDeclarationCSContext,i)


        def domainCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.DomainCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.DomainCSContext,i)


        def primitiveTypeDomainCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.PrimitiveTypeDomainCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.PrimitiveTypeDomainCSContext,i)


        def whenCS(self):
            return self.getTypedRuleContext(MQVTrParser.WhenCSContext,0)


        def whereCS(self):
            return self.getTypedRuleContext(MQVTrParser.WhereCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_relation_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_stmt" ):
                listener.enterRelation_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_stmt" ):
                listener.exitRelation_stmt(self)




    def relation_stmt(self):

        localctx = MQVTrParser.Relation_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_relation_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 417
                    self.varDeclarationCS() 
                self.state = 422
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 425 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 425
                token = self._input.LA(1)
                if token in [MQVTrParser.CHECKONLY, MQVTrParser.DOMAIN, MQVTrParser.ENFORCE]:
                    self.state = 423
                    self.domainCS()

                elif token in [MQVTrParser.PRIMITIVE]:
                    self.state = 424
                    self.primitiveTypeDomainCS()

                else:
                    raise NoViableAltException(self)

                self.state = 427 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MQVTrParser.CHECKONLY) | (1 << MQVTrParser.DOMAIN) | (1 << MQVTrParser.ENFORCE) | (1 << MQVTrParser.PRIMITIVE))) != 0)):
                    break

            self.state = 430
            _la = self._input.LA(1)
            if _la==MQVTrParser.WHEN:
                self.state = 429
                self.whenCS()


            self.state = 433
            _la = self._input.LA(1)
            if _la==MQVTrParser.WHERE:
                self.state = 432
                self.whereCS()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUERY(self):
            return self.getToken(MQVTrParser.QUERY, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def typedRefCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypedRefCSContext,0)


        def query_suite(self):
            return self.getTypedRuleContext(MQVTrParser.Query_suiteContext,0)


        def paramDeclarationCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.ParamDeclarationCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.ParamDeclarationCSContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NEWLINE)
            else:
                return self.getToken(MQVTrParser.NEWLINE, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_queryCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCS" ):
                listener.enterQueryCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCS" ):
                listener.exitQueryCS(self)




    def queryCS(self):

        localctx = MQVTrParser.QueryCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_queryCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(MQVTrParser.QUERY)
            self.state = 436
            self.unrestrictedName()
            self.state = 437
            self.match(MQVTrParser.OPEN_PAREN)
            self.state = 446
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (MQVTrParser.CHECKONLY - 5)) | (1 << (MQVTrParser.DEFAULT - 5)) | (1 << (MQVTrParser.DEFAULT_VALUES - 5)) | (1 << (MQVTrParser.DOMAIN - 5)) | (1 << (MQVTrParser.ENFORCE - 5)) | (1 << (MQVTrParser.EXTENDS - 5)) | (1 << (MQVTrParser.IMPLEMENTED_BY - 5)) | (1 << (MQVTrParser.LIBRARY - 5)) | (1 << (MQVTrParser.KEY - 5)) | (1 << (MQVTrParser.OPPOSITE - 5)) | (1 << (MQVTrParser.OVERRIDES - 5)) | (1 << (MQVTrParser.PRIMITIVE - 5)) | (1 << (MQVTrParser.QUERY - 5)) | (1 << (MQVTrParser.RELATION - 5)) | (1 << (MQVTrParser.REPLACE - 5)) | (1 << (MQVTrParser.TOP - 5)) | (1 << (MQVTrParser.TRANSFORMATION - 5)) | (1 << (MQVTrParser.WHEN - 5)) | (1 << (MQVTrParser.WHERE - 5)) | (1 << (MQVTrParser.IMPORT - 5)) | (1 << (MQVTrParser.NAME - 5)))) != 0):
                self.state = 438
                self.paramDeclarationCS()
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MQVTrParser.COMMA:
                    self.state = 439
                    self.match(MQVTrParser.COMMA)
                    self.state = 440
                    self.paramDeclarationCS()
                    self.state = 445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 448
            self.match(MQVTrParser.CLOSE_PAREN)
            self.state = 449
            self.match(MQVTrParser.COLON)
            self.state = 450
            self.typedRefCS()
            self.state = 461
            token = self._input.LA(1)
            if token in [MQVTrParser.SEMI_COLON]:
                self.state = 451
                self.match(MQVTrParser.SEMI_COLON)

            elif token in [MQVTrParser.NEWLINE, MQVTrParser.OPEN_BRACE]:
                self.state = 453
                _la = self._input.LA(1)
                if _la==MQVTrParser.NEWLINE:
                    self.state = 452
                    self.match(MQVTrParser.NEWLINE)


                self.state = 455
                self.match(MQVTrParser.OPEN_BRACE)
                self.state = 456
                self.query_suite()
                self.state = 457
                self.match(MQVTrParser.CLOSE_BRACE)
                self.state = 459
                _la = self._input.LA(1)
                if _la==MQVTrParser.NEWLINE:
                    self.state = 458
                    self.match(MQVTrParser.NEWLINE)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(MQVTrParser.INDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.StmtContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.StmtContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_query_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_suite" ):
                listener.enterQuery_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_suite" ):
                listener.exitQuery_suite(self)




    def query_suite(self):

        localctx = MQVTrParser.Query_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_query_suite)
        self._la = 0 # Token type
        try:
            self.state = 471
            token = self._input.LA(1)
            if token in [MQVTrParser.RETURN, MQVTrParser.RAISE, MQVTrParser.FROM, MQVTrParser.IMPORT, MQVTrParser.GLOBAL, MQVTrParser.NONLOCAL, MQVTrParser.ASSERT, MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.YIELD, MQVTrParser.DEL, MQVTrParser.PASS, MQVTrParser.CONTINUE, MQVTrParser.BREAK, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.simple_stmt()

            elif token in [MQVTrParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.match(MQVTrParser.NEWLINE)
                self.state = 465
                self.match(MQVTrParser.INDENT)
                self.state = 467 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 466
                    self.stmt()
                    self.state = 469 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MQVTrParser.DEF) | (1 << MQVTrParser.RETURN) | (1 << MQVTrParser.RAISE) | (1 << MQVTrParser.FROM) | (1 << MQVTrParser.IMPORT) | (1 << MQVTrParser.GLOBAL) | (1 << MQVTrParser.NONLOCAL) | (1 << MQVTrParser.ASSERT) | (1 << MQVTrParser.IF) | (1 << MQVTrParser.WHILE) | (1 << MQVTrParser.FOR) | (1 << MQVTrParser.TRY) | (1 << MQVTrParser.WITH) | (1 << MQVTrParser.LAMBDA) | (1 << MQVTrParser.NOT) | (1 << MQVTrParser.NONE) | (1 << MQVTrParser.TRUE) | (1 << MQVTrParser.FALSE) | (1 << MQVTrParser.CLASS) | (1 << MQVTrParser.YIELD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MQVTrParser.DEL - 64)) | (1 << (MQVTrParser.PASS - 64)) | (1 << (MQVTrParser.CONTINUE - 64)) | (1 << (MQVTrParser.BREAK - 64)) | (1 << (MQVTrParser.NAME - 64)) | (1 << (MQVTrParser.STRING_LITERAL - 64)) | (1 << (MQVTrParser.BYTES_LITERAL - 64)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 64)) | (1 << (MQVTrParser.OCT_INTEGER - 64)) | (1 << (MQVTrParser.HEX_INTEGER - 64)) | (1 << (MQVTrParser.BIN_INTEGER - 64)) | (1 << (MQVTrParser.FLOAT_NUMBER - 64)) | (1 << (MQVTrParser.IMAG_NUMBER - 64)) | (1 << (MQVTrParser.ELLIPSIS - 64)) | (1 << (MQVTrParser.STAR - 64)) | (1 << (MQVTrParser.OPEN_PAREN - 64)) | (1 << (MQVTrParser.OPEN_BRACK - 64)) | (1 << (MQVTrParser.ADD - 64)) | (1 << (MQVTrParser.MINUS - 64)) | (1 << (MQVTrParser.NOT_OP - 64)) | (1 << (MQVTrParser.OPEN_BRACE - 64)) | (1 << (MQVTrParser.AT - 64)))) != 0)):
                        break


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamDeclarationCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def typedRefCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypedRefCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_paramDeclarationCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamDeclarationCS" ):
                listener.enterParamDeclarationCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamDeclarationCS" ):
                listener.exitParamDeclarationCS(self)




    def paramDeclarationCS(self):

        localctx = MQVTrParser.ParamDeclarationCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_paramDeclarationCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.unrestrictedName()
            self.state = 474
            self.match(MQVTrParser.COLON)
            self.state = 475
            self.typedRefCS()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarDeclarationCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDeclarationIdCS(self):
            return self.getTypedRuleContext(MQVTrParser.VarDeclarationIdCSContext,0)


        def typedRefCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypedRefCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_varDeclarationCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDeclarationCS" ):
                listener.enterVarDeclarationCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDeclarationCS" ):
                listener.exitVarDeclarationCS(self)




    def varDeclarationCS(self):

        localctx = MQVTrParser.VarDeclarationCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_varDeclarationCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.varDeclarationIdCS()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 478
                self.match(MQVTrParser.COMMA)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 486
            _la = self._input.LA(1)
            if _la==MQVTrParser.COLON:
                self.state = 484
                self.match(MQVTrParser.COLON)
                self.state = 485
                self.typedRefCS()


            self.state = 488
            self.match(MQVTrParser.SEMI_COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarDeclarationIdCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_varDeclarationIdCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDeclarationIdCS" ):
                listener.enterVarDeclarationIdCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDeclarationIdCS" ):
                listener.exitVarDeclarationIdCS(self)




    def varDeclarationIdCS(self):

        localctx = MQVTrParser.VarDeclarationIdCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_varDeclarationIdCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOMAIN(self):
            return self.getToken(MQVTrParser.DOMAIN, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def domain_suite(self):
            return self.getTypedRuleContext(MQVTrParser.Domain_suiteContext,0)


        def checkEnforceQualifierCS(self):
            return self.getTypedRuleContext(MQVTrParser.CheckEnforceQualifierCSContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NEWLINE)
            else:
                return self.getToken(MQVTrParser.NEWLINE, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_domainCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomainCS" ):
                listener.enterDomainCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomainCS" ):
                listener.exitDomainCS(self)




    def domainCS(self):

        localctx = MQVTrParser.DomainCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_domainCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            _la = self._input.LA(1)
            if _la==MQVTrParser.CHECKONLY or _la==MQVTrParser.ENFORCE:
                self.state = 492
                self.checkEnforceQualifierCS()


            self.state = 495
            self.match(MQVTrParser.DOMAIN)
            self.state = 496
            self.unrestrictedName()
            self.state = 498
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 497
                self.match(MQVTrParser.NEWLINE)


            self.state = 500
            self.domain_suite()
            self.state = 501
            self.match(MQVTrParser.SEMI_COLON)
            self.state = 503
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 502
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CheckEnforceQualifierCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKONLY(self):
            return self.getToken(MQVTrParser.CHECKONLY, 0)

        def ENFORCE(self):
            return self.getToken(MQVTrParser.ENFORCE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_checkEnforceQualifierCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckEnforceQualifierCS" ):
                listener.enterCheckEnforceQualifierCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckEnforceQualifierCS" ):
                listener.exitCheckEnforceQualifierCS(self)




    def checkEnforceQualifierCS(self):

        localctx = MQVTrParser.CheckEnforceQualifierCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_checkEnforceQualifierCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            _la = self._input.LA(1)
            if not(_la==MQVTrParser.CHECKONLY or _la==MQVTrParser.ENFORCE):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Domain_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domain_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Domain_stmtContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_domain_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomain_suite" ):
                listener.enterDomain_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomain_suite" ):
                listener.exitDomain_suite(self)




    def domain_suite(self):

        localctx = MQVTrParser.Domain_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_domain_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.domain_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Domain_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domainPatternCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.DomainPatternCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.DomainPatternCSContext,i)


        def IMPLEMENTED_BY(self):
            return self.getToken(MQVTrParser.IMPLEMENTED_BY, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def DEFAULT_VALUES(self):
            return self.getToken(MQVTrParser.DEFAULT_VALUES, 0)

        def defaultValue_suite(self):
            return self.getTypedRuleContext(MQVTrParser.DefaultValue_suiteContext,0)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_domain_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomain_stmt" ):
                listener.enterDomain_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomain_stmt" ):
                listener.exitDomain_stmt(self)




    def domain_stmt(self):

        localctx = MQVTrParser.Domain_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_domain_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.domainPatternCS()
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 510
                self.match(MQVTrParser.COMMA)
                self.state = 511
                self.domainPatternCS()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 522
            _la = self._input.LA(1)
            if _la==MQVTrParser.IMPLEMENTED_BY:
                self.state = 517
                self.match(MQVTrParser.IMPLEMENTED_BY)
                self.state = 518
                self.unrestrictedName()
                self.state = 520
                _la = self._input.LA(1)
                if _la==MQVTrParser.NEWLINE:
                    self.state = 519
                    self.match(MQVTrParser.NEWLINE)




            self.state = 529
            _la = self._input.LA(1)
            if _la==MQVTrParser.DEFAULT_VALUES:
                self.state = 524
                self.match(MQVTrParser.DEFAULT_VALUES)
                self.state = 525
                self.match(MQVTrParser.OPEN_BRACE)
                self.state = 526
                self.defaultValue_suite()
                self.state = 527
                self.match(MQVTrParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainPatternCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateCS(self):
            return self.getTypedRuleContext(MQVTrParser.TemplateCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_domainPatternCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomainPatternCS" ):
                listener.enterDomainPatternCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomainPatternCS" ):
                listener.exitDomainPatternCS(self)




    def domainPatternCS(self):

        localctx = MQVTrParser.DomainPatternCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_domainPatternCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.templateCS()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeDomainCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE(self):
            return self.getToken(MQVTrParser.PRIMITIVE, 0)

        def DOMAIN(self):
            return self.getToken(MQVTrParser.DOMAIN, 0)

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def typedRefCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypedRefCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_primitiveTypeDomainCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveTypeDomainCS" ):
                listener.enterPrimitiveTypeDomainCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveTypeDomainCS" ):
                listener.exitPrimitiveTypeDomainCS(self)




    def primitiveTypeDomainCS(self):

        localctx = MQVTrParser.PrimitiveTypeDomainCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_primitiveTypeDomainCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(MQVTrParser.PRIMITIVE)
            self.state = 534
            self.match(MQVTrParser.DOMAIN)
            self.state = 535
            self.unrestrictedName()
            self.state = 536
            self.match(MQVTrParser.COLON)
            self.state = 537
            self.typedRefCS()
            self.state = 539
            _la = self._input.LA(1)
            if _la==MQVTrParser.SEMI_COLON:
                self.state = 538
                self.match(MQVTrParser.SEMI_COLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(MQVTrParser.WHEN, 0)

        def predicateCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.PredicateCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.PredicateCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_whenCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenCS" ):
                listener.enterWhenCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenCS" ):
                listener.exitWhenCS(self)




    def whenCS(self):

        localctx = MQVTrParser.WhenCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_whenCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(MQVTrParser.WHEN)
            self.state = 542
            self.match(MQVTrParser.OPEN_BRACE)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                self.state = 543
                self.predicateCS()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 549
            self.match(MQVTrParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhereCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(MQVTrParser.WHERE, 0)

        def predicateCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.PredicateCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.PredicateCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_whereCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereCS" ):
                listener.enterWhereCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereCS" ):
                listener.exitWhereCS(self)




    def whereCS(self):

        localctx = MQVTrParser.WhereCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_whereCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(MQVTrParser.WHERE)
            self.state = 552
            self.match(MQVTrParser.OPEN_BRACE)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                self.state = 553
                self.predicateCS()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 559
            self.match(MQVTrParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValue_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defaultValueCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.DefaultValueCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.DefaultValueCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_defaultValue_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue_suite" ):
                listener.enterDefaultValue_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue_suite" ):
                listener.exitDefaultValue_suite(self)




    def defaultValue_suite(self):

        localctx = MQVTrParser.DefaultValue_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_defaultValue_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 561
                self.defaultValueCS()
                self.state = 564 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (MQVTrParser.CHECKONLY - 5)) | (1 << (MQVTrParser.DEFAULT - 5)) | (1 << (MQVTrParser.DEFAULT_VALUES - 5)) | (1 << (MQVTrParser.DOMAIN - 5)) | (1 << (MQVTrParser.ENFORCE - 5)) | (1 << (MQVTrParser.EXTENDS - 5)) | (1 << (MQVTrParser.IMPLEMENTED_BY - 5)) | (1 << (MQVTrParser.LIBRARY - 5)) | (1 << (MQVTrParser.KEY - 5)) | (1 << (MQVTrParser.OPPOSITE - 5)) | (1 << (MQVTrParser.OVERRIDES - 5)) | (1 << (MQVTrParser.PRIMITIVE - 5)) | (1 << (MQVTrParser.QUERY - 5)) | (1 << (MQVTrParser.RELATION - 5)) | (1 << (MQVTrParser.REPLACE - 5)) | (1 << (MQVTrParser.TOP - 5)) | (1 << (MQVTrParser.TRANSFORMATION - 5)) | (1 << (MQVTrParser.WHEN - 5)) | (1 << (MQVTrParser.WHERE - 5)) | (1 << (MQVTrParser.IMPORT - 5)) | (1 << (MQVTrParser.NAME - 5)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def yield_expr(self):
            return self.getTypedRuleContext(MQVTrParser.Yield_exprContext,0)


        def testlist_star_expr(self):
            return self.getTypedRuleContext(MQVTrParser.Testlist_star_exprContext,0)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_defaultValueCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValueCS" ):
                listener.enterDefaultValueCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValueCS" ):
                listener.exitDefaultValueCS(self)




    def defaultValueCS(self):

        localctx = MQVTrParser.DefaultValueCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_defaultValueCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.unrestrictedName()
            self.state = 567
            self.match(MQVTrParser.ASSIGN)
            self.state = 570
            token = self._input.LA(1)
            if token in [MQVTrParser.YIELD]:
                self.state = 568
                self.yield_expr()

            elif token in [MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.state = 569
                self.testlist_star_expr()

            else:
                raise NoViableAltException(self)

            self.state = 572
            self.match(MQVTrParser.SEMI_COLON)
            self.state = 574
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 573
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionTemplateCS(self):
            return self.getTypedRuleContext(MQVTrParser.CollectionTemplateCSContext,0)


        def objectTemplateCS(self):
            return self.getTypedRuleContext(MQVTrParser.ObjectTemplateCSContext,0)


        def expr_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Expr_stmtContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_templateCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateCS" ):
                listener.enterTemplateCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateCS" ):
                listener.exitTemplateCS(self)




    def templateCS(self):

        localctx = MQVTrParser.TemplateCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_templateCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 576
                self.collectionTemplateCS()
                pass

            elif la_ == 2:
                self.state = 577
                self.objectTemplateCS()
                pass


            self.state = 584
            _la = self._input.LA(1)
            if _la==MQVTrParser.OPEN_BRACE:
                self.state = 580
                self.match(MQVTrParser.OPEN_BRACE)
                self.state = 581
                self.expr_stmt()
                self.state = 582
                self.match(MQVTrParser.CLOSE_BRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectionTemplateCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def collectionTypeCS(self):
            return self.getTypedRuleContext(MQVTrParser.CollectionTypeCSContext,0)


        def memberSelectionCS(self):
            return self.getTypedRuleContext(MQVTrParser.MemberSelectionCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_collectionTemplateCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionTemplateCS" ):
                listener.enterCollectionTemplateCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionTemplateCS" ):
                listener.exitCollectionTemplateCS(self)




    def collectionTemplateCS(self):

        localctx = MQVTrParser.CollectionTemplateCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_collectionTemplateCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.unrestrictedName()
            self.state = 587
            self.match(MQVTrParser.COLON)
            self.state = 588
            self.collectionTypeCS()
            self.state = 589
            self.match(MQVTrParser.OPEN_BRACE)
            self.state = 591
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MQVTrParser.T__0) | (1 << MQVTrParser.CHECKONLY) | (1 << MQVTrParser.DEFAULT) | (1 << MQVTrParser.DEFAULT_VALUES) | (1 << MQVTrParser.DOMAIN) | (1 << MQVTrParser.ENFORCE) | (1 << MQVTrParser.EXTENDS) | (1 << MQVTrParser.IMPLEMENTED_BY) | (1 << MQVTrParser.LIBRARY) | (1 << MQVTrParser.KEY) | (1 << MQVTrParser.OPPOSITE) | (1 << MQVTrParser.OVERRIDES) | (1 << MQVTrParser.PRIMITIVE) | (1 << MQVTrParser.QUERY) | (1 << MQVTrParser.RELATION) | (1 << MQVTrParser.REPLACE) | (1 << MQVTrParser.TOP) | (1 << MQVTrParser.TRANSFORMATION) | (1 << MQVTrParser.WHEN) | (1 << MQVTrParser.WHERE) | (1 << MQVTrParser.IMPORT))) != 0) or _la==MQVTrParser.NAME or _la==MQVTrParser.COLON:
                self.state = 590
                self.memberSelectionCS()


            self.state = 593
            self.match(MQVTrParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberSelectionCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.UnrestrictedNameContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,i)


        def templateCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TemplateCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TemplateCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_memberSelectionCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberSelectionCS" ):
                listener.enterMemberSelectionCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberSelectionCS" ):
                listener.exitMemberSelectionCS(self)




    def memberSelectionCS(self):

        localctx = MQVTrParser.MemberSelectionCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_memberSelectionCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 595
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.state = 596
                self.templateCS()
                pass

            elif la_ == 3:
                self.state = 597
                self.match(MQVTrParser.T__0)
                pass


            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 600
                self.match(MQVTrParser.COMMA)
                self.state = 604
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 601
                    self.unrestrictedName()
                    pass

                elif la_ == 2:
                    self.state = 602
                    self.templateCS()
                    pass

                elif la_ == 3:
                    self.state = 603
                    self.match(MQVTrParser.T__0)
                    pass


                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self.match(MQVTrParser.EXTRA_MEMBERS)
            self.state = 614
            token = self._input.LA(1)
            if token in [MQVTrParser.CHECKONLY, MQVTrParser.DEFAULT, MQVTrParser.DEFAULT_VALUES, MQVTrParser.DOMAIN, MQVTrParser.ENFORCE, MQVTrParser.EXTENDS, MQVTrParser.IMPLEMENTED_BY, MQVTrParser.LIBRARY, MQVTrParser.KEY, MQVTrParser.OPPOSITE, MQVTrParser.OVERRIDES, MQVTrParser.PRIMITIVE, MQVTrParser.QUERY, MQVTrParser.RELATION, MQVTrParser.REPLACE, MQVTrParser.TOP, MQVTrParser.TRANSFORMATION, MQVTrParser.WHEN, MQVTrParser.WHERE, MQVTrParser.IMPORT, MQVTrParser.NAME]:
                self.state = 612
                self.unrestrictedName()

            elif token in [MQVTrParser.T__0]:
                self.state = 613
                self.match(MQVTrParser.T__0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectTemplateCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedRefCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypedRefCSContext,0)


        def objectTemplate_suite(self):
            return self.getTypedRuleContext(MQVTrParser.ObjectTemplate_suiteContext,0)


        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NEWLINE)
            else:
                return self.getToken(MQVTrParser.NEWLINE, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_objectTemplateCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectTemplateCS" ):
                listener.enterObjectTemplateCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectTemplateCS" ):
                listener.exitObjectTemplateCS(self)




    def objectTemplateCS(self):

        localctx = MQVTrParser.ObjectTemplateCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_objectTemplateCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (MQVTrParser.CHECKONLY - 5)) | (1 << (MQVTrParser.DEFAULT - 5)) | (1 << (MQVTrParser.DEFAULT_VALUES - 5)) | (1 << (MQVTrParser.DOMAIN - 5)) | (1 << (MQVTrParser.ENFORCE - 5)) | (1 << (MQVTrParser.EXTENDS - 5)) | (1 << (MQVTrParser.IMPLEMENTED_BY - 5)) | (1 << (MQVTrParser.LIBRARY - 5)) | (1 << (MQVTrParser.KEY - 5)) | (1 << (MQVTrParser.OPPOSITE - 5)) | (1 << (MQVTrParser.OVERRIDES - 5)) | (1 << (MQVTrParser.PRIMITIVE - 5)) | (1 << (MQVTrParser.QUERY - 5)) | (1 << (MQVTrParser.RELATION - 5)) | (1 << (MQVTrParser.REPLACE - 5)) | (1 << (MQVTrParser.TOP - 5)) | (1 << (MQVTrParser.TRANSFORMATION - 5)) | (1 << (MQVTrParser.WHEN - 5)) | (1 << (MQVTrParser.WHERE - 5)) | (1 << (MQVTrParser.IMPORT - 5)) | (1 << (MQVTrParser.NAME - 5)))) != 0):
                self.state = 616
                self.unrestrictedName()


            self.state = 619
            self.match(MQVTrParser.COLON)
            self.state = 620
            self.typedRefCS()
            self.state = 622
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 621
                self.match(MQVTrParser.NEWLINE)


            self.state = 624
            self.match(MQVTrParser.OPEN_BRACE)
            self.state = 625
            self.objectTemplate_suite()
            self.state = 626
            self.match(MQVTrParser.CLOSE_BRACE)
            self.state = 628
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 627
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectTemplate_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyTemplateCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.PropertyTemplateCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.PropertyTemplateCSContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NEWLINE)
            else:
                return self.getToken(MQVTrParser.NEWLINE, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_objectTemplate_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectTemplate_suite" ):
                listener.enterObjectTemplate_suite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectTemplate_suite" ):
                listener.exitObjectTemplate_suite(self)




    def objectTemplate_suite(self):

        localctx = MQVTrParser.ObjectTemplate_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_objectTemplate_suite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.propertyTemplateCS()
            self.state = 638
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 632
                    _la = self._input.LA(1)
                    if _la==MQVTrParser.NEWLINE:
                        self.state = 631
                        self.match(MQVTrParser.NEWLINE)


                    self.state = 634
                    self.match(MQVTrParser.COMMA)
                    self.state = 635
                    self.propertyTemplateCS() 
                self.state = 640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 642
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 641
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyTemplateCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qvtr_exp(self):
            return self.getTypedRuleContext(MQVTrParser.Qvtr_expContext,0)


        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def OPPOSITE(self):
            return self.getToken(MQVTrParser.OPPOSITE, 0)

        def pathNameCS(self):
            return self.getTypedRuleContext(MQVTrParser.PathNameCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_propertyTemplateCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyTemplateCS" ):
                listener.enterPropertyTemplateCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyTemplateCS" ):
                listener.exitPropertyTemplateCS(self)




    def propertyTemplateCS(self):

        localctx = MQVTrParser.PropertyTemplateCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_propertyTemplateCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 644
                self.unrestrictedName()
                pass

            elif la_ == 2:
                self.state = 645
                self.match(MQVTrParser.OPPOSITE)
                self.state = 646
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 647
                self.pathNameCS()
                self.state = 648
                self.match(MQVTrParser.CLOSE_PAREN)
                pass


            self.state = 652
            self.match(MQVTrParser.ASSIGN)
            self.state = 653
            self.qvtr_exp()
            self.state = 655
            _la = self._input.LA(1)
            if _la==MQVTrParser.SEMI_COLON:
                self.state = 654
                self.match(MQVTrParser.SEMI_COLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qvtr_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(MQVTrParser.Yield_exprContext,0)


        def testlist_star_expr(self):
            return self.getTypedRuleContext(MQVTrParser.Testlist_star_exprContext,0)


        def qvtr_exp(self):
            return self.getTypedRuleContext(MQVTrParser.Qvtr_expContext,0)


        def templateCS(self):
            return self.getTypedRuleContext(MQVTrParser.TemplateCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_qvtr_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQvtr_exp" ):
                listener.enterQvtr_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQvtr_exp" ):
                listener.exitQvtr_exp(self)




    def qvtr_exp(self):

        localctx = MQVTrParser.Qvtr_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_qvtr_exp)
        try:
            self.state = 664
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.yield_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.testlist_star_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 660
                self.qvtr_exp()
                self.state = 661
                self.match(MQVTrParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 663
                self.templateCS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Expr_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_predicateCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateCS" ):
                listener.enterPredicateCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateCS" ):
                listener.exitPredicateCS(self)




    def predicateCS(self):

        localctx = MQVTrParser.PredicateCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_predicateCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.expr_stmt()
            self.state = 667
            self.match(MQVTrParser.SEMI_COLON)
            self.state = 669
            _la = self._input.LA(1)
            if _la==MQVTrParser.NEWLINE:
                self.state = 668
                self.match(MQVTrParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UriPathNameCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uriFirstPathElementCS(self):
            return self.getTypedRuleContext(MQVTrParser.UriFirstPathElementCSContext,0)


        def nextPathElementCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.NextPathElementCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.NextPathElementCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_uriPathNameCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUriPathNameCS" ):
                listener.enterUriPathNameCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUriPathNameCS" ):
                listener.exitUriPathNameCS(self)




    def uriPathNameCS(self):

        localctx = MQVTrParser.UriPathNameCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_uriPathNameCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.uriFirstPathElementCS()
            self.state = 676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 672
                    self.match(MQVTrParser.COLONCOLON)
                    self.state = 673
                    self.nextPathElementCS() 
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UriFirstPathElementCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def URI(self):
            return self.getToken(MQVTrParser.URI, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_uriFirstPathElementCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUriFirstPathElementCS" ):
                listener.enterUriFirstPathElementCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUriFirstPathElementCS" ):
                listener.exitUriFirstPathElementCS(self)




    def uriFirstPathElementCS(self):

        localctx = MQVTrParser.UriFirstPathElementCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_uriFirstPathElementCS)
        try:
            self.state = 681
            token = self._input.LA(1)
            if token in [MQVTrParser.CHECKONLY, MQVTrParser.DEFAULT, MQVTrParser.DEFAULT_VALUES, MQVTrParser.DOMAIN, MQVTrParser.ENFORCE, MQVTrParser.EXTENDS, MQVTrParser.IMPLEMENTED_BY, MQVTrParser.LIBRARY, MQVTrParser.KEY, MQVTrParser.OPPOSITE, MQVTrParser.OVERRIDES, MQVTrParser.PRIMITIVE, MQVTrParser.QUERY, MQVTrParser.RELATION, MQVTrParser.REPLACE, MQVTrParser.TOP, MQVTrParser.TRANSFORMATION, MQVTrParser.WHEN, MQVTrParser.WHERE, MQVTrParser.IMPORT, MQVTrParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.unrestrictedName()

            elif token in [MQVTrParser.URI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.match(MQVTrParser.URI)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScopeNameCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def firstPathElementCS(self):
            return self.getTypedRuleContext(MQVTrParser.FirstPathElementCSContext,0)


        def nextPathElementCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.NextPathElementCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.NextPathElementCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_scopeNameCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopeNameCS" ):
                listener.enterScopeNameCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopeNameCS" ):
                listener.exitScopeNameCS(self)




    def scopeNameCS(self):

        localctx = MQVTrParser.ScopeNameCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_scopeNameCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.firstPathElementCS()
            self.state = 684
            self.match(MQVTrParser.COLONCOLON)
            self.state = 690
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 685
                    self.nextPathElementCS()
                    self.state = 686
                    self.match(MQVTrParser.COLONCOLON) 
                self.state = 692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedTypeRefCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathNameCS(self):
            return self.getTypedRuleContext(MQVTrParser.PathNameCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_typedTypeRefCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedTypeRefCS" ):
                listener.enterTypedTypeRefCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedTypeRefCS" ):
                listener.exitTypedTypeRefCS(self)




    def typedTypeRefCS(self):

        localctx = MQVTrParser.TypedTypeRefCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_typedTypeRefCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.pathNameCS()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedRefCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveTypeCS(self):
            return self.getTypedRuleContext(MQVTrParser.PrimitiveTypeCSContext,0)


        def collectionTypeCS(self):
            return self.getTypedRuleContext(MQVTrParser.CollectionTypeCSContext,0)


        def typedTypeRefCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypedTypeRefCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_typedRefCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedRefCS" ):
                listener.enterTypedRefCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedRefCS" ):
                listener.exitTypedRefCS(self)




    def typedRefCS(self):

        localctx = MQVTrParser.TypedRefCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_typedRefCS)
        try:
            self.state = 698
            token = self._input.LA(1)
            if token in [MQVTrParser.BOOLEAN, MQVTrParser.INTEGER, MQVTrParser.FLOAT, MQVTrParser.STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.primitiveTypeCS()

            elif token in [MQVTrParser.SET, MQVTrParser.LIST, MQVTrParser.ORDEREDSET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.collectionTypeCS()

            elif token in [MQVTrParser.CHECKONLY, MQVTrParser.DEFAULT, MQVTrParser.DEFAULT_VALUES, MQVTrParser.DOMAIN, MQVTrParser.ENFORCE, MQVTrParser.EXTENDS, MQVTrParser.IMPLEMENTED_BY, MQVTrParser.LIBRARY, MQVTrParser.KEY, MQVTrParser.OPPOSITE, MQVTrParser.OVERRIDES, MQVTrParser.PRIMITIVE, MQVTrParser.QUERY, MQVTrParser.RELATION, MQVTrParser.REPLACE, MQVTrParser.TOP, MQVTrParser.TRANSFORMATION, MQVTrParser.WHEN, MQVTrParser.WHERE, MQVTrParser.IMPORT, MQVTrParser.NAME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 697
                self.typedTypeRefCS()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnrestrictedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def CHECKONLY(self):
            return self.getToken(MQVTrParser.CHECKONLY, 0)

        def DEFAULT(self):
            return self.getToken(MQVTrParser.DEFAULT, 0)

        def DEFAULT_VALUES(self):
            return self.getToken(MQVTrParser.DEFAULT_VALUES, 0)

        def DOMAIN(self):
            return self.getToken(MQVTrParser.DOMAIN, 0)

        def ENFORCE(self):
            return self.getToken(MQVTrParser.ENFORCE, 0)

        def EXTENDS(self):
            return self.getToken(MQVTrParser.EXTENDS, 0)

        def IMPLEMENTED_BY(self):
            return self.getToken(MQVTrParser.IMPLEMENTED_BY, 0)

        def IMPORT(self):
            return self.getToken(MQVTrParser.IMPORT, 0)

        def LIBRARY(self):
            return self.getToken(MQVTrParser.LIBRARY, 0)

        def KEY(self):
            return self.getToken(MQVTrParser.KEY, 0)

        def OPPOSITE(self):
            return self.getToken(MQVTrParser.OPPOSITE, 0)

        def OVERRIDES(self):
            return self.getToken(MQVTrParser.OVERRIDES, 0)

        def PRIMITIVE(self):
            return self.getToken(MQVTrParser.PRIMITIVE, 0)

        def QUERY(self):
            return self.getToken(MQVTrParser.QUERY, 0)

        def RELATION(self):
            return self.getToken(MQVTrParser.RELATION, 0)

        def REPLACE(self):
            return self.getToken(MQVTrParser.REPLACE, 0)

        def TOP(self):
            return self.getToken(MQVTrParser.TOP, 0)

        def TRANSFORMATION(self):
            return self.getToken(MQVTrParser.TRANSFORMATION, 0)

        def WHEN(self):
            return self.getToken(MQVTrParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(MQVTrParser.WHERE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_unrestrictedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnrestrictedName" ):
                listener.enterUnrestrictedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnrestrictedName" ):
                listener.exitUnrestrictedName(self)




    def unrestrictedName(self):

        localctx = MQVTrParser.UnrestrictedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_unrestrictedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            _la = self._input.LA(1)
            if not(((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (MQVTrParser.CHECKONLY - 5)) | (1 << (MQVTrParser.DEFAULT - 5)) | (1 << (MQVTrParser.DEFAULT_VALUES - 5)) | (1 << (MQVTrParser.DOMAIN - 5)) | (1 << (MQVTrParser.ENFORCE - 5)) | (1 << (MQVTrParser.EXTENDS - 5)) | (1 << (MQVTrParser.IMPLEMENTED_BY - 5)) | (1 << (MQVTrParser.LIBRARY - 5)) | (1 << (MQVTrParser.KEY - 5)) | (1 << (MQVTrParser.OPPOSITE - 5)) | (1 << (MQVTrParser.OVERRIDES - 5)) | (1 << (MQVTrParser.PRIMITIVE - 5)) | (1 << (MQVTrParser.QUERY - 5)) | (1 << (MQVTrParser.RELATION - 5)) | (1 << (MQVTrParser.REPLACE - 5)) | (1 << (MQVTrParser.TOP - 5)) | (1 << (MQVTrParser.TRANSFORMATION - 5)) | (1 << (MQVTrParser.WHEN - 5)) | (1 << (MQVTrParser.WHERE - 5)) | (1 << (MQVTrParser.IMPORT - 5)) | (1 << (MQVTrParser.NAME - 5)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathNameCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def firstPathElementCS(self):
            return self.getTypedRuleContext(MQVTrParser.FirstPathElementCSContext,0)


        def nextPathElementCS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.NextPathElementCSContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.NextPathElementCSContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_pathNameCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPathNameCS" ):
                listener.enterPathNameCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPathNameCS" ):
                listener.exitPathNameCS(self)




    def pathNameCS(self):

        localctx = MQVTrParser.PathNameCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pathNameCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.firstPathElementCS()
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COLONCOLON:
                self.state = 703
                self.match(MQVTrParser.COLONCOLON)
                self.state = 704
                self.nextPathElementCS()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FirstPathElementCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_firstPathElementCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirstPathElementCS" ):
                listener.enterFirstPathElementCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirstPathElementCS" ):
                listener.exitFirstPathElementCS(self)




    def firstPathElementCS(self):

        localctx = MQVTrParser.FirstPathElementCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_firstPathElementCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NextPathElementCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unreservedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnreservedNameContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_nextPathElementCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNextPathElementCS" ):
                listener.enterNextPathElementCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNextPathElementCS" ):
                listener.exitNextPathElementCS(self)




    def nextPathElementCS(self):

        localctx = MQVTrParser.NextPathElementCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_nextPathElementCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.unreservedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnreservedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unrestrictedName(self):
            return self.getTypedRuleContext(MQVTrParser.UnrestrictedNameContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_unreservedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnreservedName" ):
                listener.enterUnreservedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnreservedName" ):
                listener.exitUnreservedName(self)




    def unreservedName(self):

        localctx = MQVTrParser.UnreservedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_unreservedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.unrestrictedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(MQVTrParser.BOOLEAN, 0)

        def INTEGER(self):
            return self.getToken(MQVTrParser.INTEGER, 0)

        def FLOAT(self):
            return self.getToken(MQVTrParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MQVTrParser.STRING, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_primitiveTypeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveTypeIdentifier" ):
                listener.enterPrimitiveTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveTypeIdentifier" ):
                listener.exitPrimitiveTypeIdentifier(self)




    def primitiveTypeIdentifier(self):

        localctx = MQVTrParser.PrimitiveTypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_primitiveTypeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MQVTrParser.BOOLEAN) | (1 << MQVTrParser.INTEGER) | (1 << MQVTrParser.FLOAT) | (1 << MQVTrParser.STRING))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectionTypeIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(MQVTrParser.SET, 0)

        def LIST(self):
            return self.getToken(MQVTrParser.LIST, 0)

        def ORDEREDSET(self):
            return self.getToken(MQVTrParser.ORDEREDSET, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_collectionTypeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionTypeIdentifier" ):
                listener.enterCollectionTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionTypeIdentifier" ):
                listener.exitCollectionTypeIdentifier(self)




    def collectionTypeIdentifier(self):

        localctx = MQVTrParser.CollectionTypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_collectionTypeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MQVTrParser.SET) | (1 << MQVTrParser.LIST) | (1 << MQVTrParser.ORDEREDSET))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MapTypeIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(MQVTrParser.MAP, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_mapTypeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapTypeIdentifier" ):
                listener.enterMapTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapTypeIdentifier" ):
                listener.exitMapTypeIdentifier(self)




    def mapTypeIdentifier(self):

        localctx = MQVTrParser.MapTypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_mapTypeIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(MQVTrParser.MAP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleTypeIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TUPLE(self):
            return self.getToken(MQVTrParser.TUPLE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_tupleTypeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleTypeIdentifier" ):
                listener.enterTupleTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleTypeIdentifier" ):
                listener.exitTupleTypeIdentifier(self)




    def tupleTypeIdentifier(self):

        localctx = MQVTrParser.TupleTypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tupleTypeIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(MQVTrParser.TUPLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveTypeIdentifier(self):
            return self.getTypedRuleContext(MQVTrParser.PrimitiveTypeIdentifierContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_primitiveTypeCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveTypeCS" ):
                listener.enterPrimitiveTypeCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveTypeCS" ):
                listener.exitPrimitiveTypeCS(self)




    def primitiveTypeCS(self):

        localctx = MQVTrParser.PrimitiveTypeCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_primitiveTypeCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.primitiveTypeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectionTypeCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collectionTypeIdentifier(self):
            return self.getTypedRuleContext(MQVTrParser.CollectionTypeIdentifierContext,0)


        def typeExpCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypeExpCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_collectionTypeCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionTypeCS" ):
                listener.enterCollectionTypeCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionTypeCS" ):
                listener.exitCollectionTypeCS(self)




    def collectionTypeCS(self):

        localctx = MQVTrParser.CollectionTypeCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_collectionTypeCS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.collectionTypeIdentifier()
            self.state = 731
            _la = self._input.LA(1)
            if _la==MQVTrParser.OPEN_PAREN:
                self.state = 727
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 728
                self.typeExpCS()
                self.state = 729
                self.match(MQVTrParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MapTypeCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapTypeIdentifier(self):
            return self.getTypedRuleContext(MQVTrParser.MapTypeIdentifierContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_mapTypeCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapTypeCS" ):
                listener.enterMapTypeCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapTypeCS" ):
                listener.exitMapTypeCS(self)




    def mapTypeCS(self):

        localctx = MQVTrParser.MapTypeCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_mapTypeCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.mapTypeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleTypeCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleTypeIdentifier(self):
            return self.getTypedRuleContext(MQVTrParser.TupleTypeIdentifierContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_tupleTypeCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleTypeCS" ):
                listener.enterTupleTypeCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleTypeCS" ):
                listener.exitTupleTypeCS(self)




    def tupleTypeCS(self):

        localctx = MQVTrParser.TupleTypeCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_tupleTypeCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.tupleTypeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeLiteralCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveTypeCS(self):
            return self.getTypedRuleContext(MQVTrParser.PrimitiveTypeCSContext,0)


        def collectionTypeCS(self):
            return self.getTypedRuleContext(MQVTrParser.CollectionTypeCSContext,0)


        def mapTypeCS(self):
            return self.getTypedRuleContext(MQVTrParser.MapTypeCSContext,0)


        def tupleTypeCS(self):
            return self.getTypedRuleContext(MQVTrParser.TupleTypeCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_typeLiteralCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLiteralCS" ):
                listener.enterTypeLiteralCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLiteralCS" ):
                listener.exitTypeLiteralCS(self)




    def typeLiteralCS(self):

        localctx = MQVTrParser.TypeLiteralCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeLiteralCS)
        try:
            self.state = 741
            token = self._input.LA(1)
            if token in [MQVTrParser.BOOLEAN, MQVTrParser.INTEGER, MQVTrParser.FLOAT, MQVTrParser.STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.primitiveTypeCS()

            elif token in [MQVTrParser.SET, MQVTrParser.LIST, MQVTrParser.ORDEREDSET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.collectionTypeCS()

            elif token in [MQVTrParser.MAP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 739
                self.mapTypeCS()

            elif token in [MQVTrParser.TUPLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 740
                self.tupleTypeCS()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameExpCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathNameCS(self):
            return self.getTypedRuleContext(MQVTrParser.PathNameCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_typeNameExpCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpCS" ):
                listener.enterTypeNameExpCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpCS" ):
                listener.exitTypeNameExpCS(self)




    def typeNameExpCS(self):

        localctx = MQVTrParser.TypeNameExpCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typeNameExpCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.pathNameCS()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeExpCSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeNameExpCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypeNameExpCSContext,0)


        def typeLiteralCS(self):
            return self.getTypedRuleContext(MQVTrParser.TypeLiteralCSContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_typeExpCS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpCS" ):
                listener.enterTypeExpCS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpCS" ):
                listener.exitTypeExpCS(self)




    def typeExpCS(self):

        localctx = MQVTrParser.TypeExpCSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_typeExpCS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            token = self._input.LA(1)
            if token in [MQVTrParser.CHECKONLY, MQVTrParser.DEFAULT, MQVTrParser.DEFAULT_VALUES, MQVTrParser.DOMAIN, MQVTrParser.ENFORCE, MQVTrParser.EXTENDS, MQVTrParser.IMPLEMENTED_BY, MQVTrParser.LIBRARY, MQVTrParser.KEY, MQVTrParser.OPPOSITE, MQVTrParser.OVERRIDES, MQVTrParser.PRIMITIVE, MQVTrParser.QUERY, MQVTrParser.RELATION, MQVTrParser.REPLACE, MQVTrParser.TOP, MQVTrParser.TRANSFORMATION, MQVTrParser.WHEN, MQVTrParser.WHERE, MQVTrParser.IMPORT, MQVTrParser.NAME]:
                self.state = 745
                self.typeNameExpCS()

            elif token in [MQVTrParser.BOOLEAN, MQVTrParser.INTEGER, MQVTrParser.FLOAT, MQVTrParser.STRING, MQVTrParser.TUPLE, MQVTrParser.SET, MQVTrParser.LIST, MQVTrParser.ORDEREDSET, MQVTrParser.MAP]:
                self.state = 746
                self.typeLiteralCS()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MQVTrParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(MQVTrParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)




    def single_input(self):

        localctx = MQVTrParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_single_input)
        try:
            self.state = 756
            token = self._input.LA(1)
            if token in [MQVTrParser.NEWLINE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.match(MQVTrParser.NEWLINE)

            elif token in [MQVTrParser.RETURN, MQVTrParser.RAISE, MQVTrParser.FROM, MQVTrParser.IMPORT, MQVTrParser.GLOBAL, MQVTrParser.NONLOCAL, MQVTrParser.ASSERT, MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.YIELD, MQVTrParser.DEL, MQVTrParser.PASS, MQVTrParser.CONTINUE, MQVTrParser.BREAK, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.simple_stmt()

            elif token in [MQVTrParser.DEF, MQVTrParser.IF, MQVTrParser.WHILE, MQVTrParser.FOR, MQVTrParser.TRY, MQVTrParser.WITH, MQVTrParser.CLASS, MQVTrParser.AT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 753
                self.compound_stmt()
                self.state = 754
                self.match(MQVTrParser.NEWLINE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MQVTrParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NEWLINE)
            else:
                return self.getToken(MQVTrParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.StmtContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.StmtContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)




    def file_input(self):

        localctx = MQVTrParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MQVTrParser.NEWLINE) | (1 << MQVTrParser.DEF) | (1 << MQVTrParser.RETURN) | (1 << MQVTrParser.RAISE) | (1 << MQVTrParser.FROM) | (1 << MQVTrParser.IMPORT) | (1 << MQVTrParser.GLOBAL) | (1 << MQVTrParser.NONLOCAL) | (1 << MQVTrParser.ASSERT) | (1 << MQVTrParser.IF) | (1 << MQVTrParser.WHILE) | (1 << MQVTrParser.FOR) | (1 << MQVTrParser.TRY) | (1 << MQVTrParser.WITH) | (1 << MQVTrParser.LAMBDA) | (1 << MQVTrParser.NOT) | (1 << MQVTrParser.NONE) | (1 << MQVTrParser.TRUE) | (1 << MQVTrParser.FALSE) | (1 << MQVTrParser.CLASS) | (1 << MQVTrParser.YIELD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MQVTrParser.DEL - 64)) | (1 << (MQVTrParser.PASS - 64)) | (1 << (MQVTrParser.CONTINUE - 64)) | (1 << (MQVTrParser.BREAK - 64)) | (1 << (MQVTrParser.NAME - 64)) | (1 << (MQVTrParser.STRING_LITERAL - 64)) | (1 << (MQVTrParser.BYTES_LITERAL - 64)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 64)) | (1 << (MQVTrParser.OCT_INTEGER - 64)) | (1 << (MQVTrParser.HEX_INTEGER - 64)) | (1 << (MQVTrParser.BIN_INTEGER - 64)) | (1 << (MQVTrParser.FLOAT_NUMBER - 64)) | (1 << (MQVTrParser.IMAG_NUMBER - 64)) | (1 << (MQVTrParser.ELLIPSIS - 64)) | (1 << (MQVTrParser.STAR - 64)) | (1 << (MQVTrParser.OPEN_PAREN - 64)) | (1 << (MQVTrParser.OPEN_BRACK - 64)) | (1 << (MQVTrParser.ADD - 64)) | (1 << (MQVTrParser.MINUS - 64)) | (1 << (MQVTrParser.NOT_OP - 64)) | (1 << (MQVTrParser.OPEN_BRACE - 64)) | (1 << (MQVTrParser.AT - 64)))) != 0):
                self.state = 760
                token = self._input.LA(1)
                if token in [MQVTrParser.NEWLINE]:
                    self.state = 758
                    self.match(MQVTrParser.NEWLINE)

                elif token in [MQVTrParser.DEF, MQVTrParser.RETURN, MQVTrParser.RAISE, MQVTrParser.FROM, MQVTrParser.IMPORT, MQVTrParser.GLOBAL, MQVTrParser.NONLOCAL, MQVTrParser.ASSERT, MQVTrParser.IF, MQVTrParser.WHILE, MQVTrParser.FOR, MQVTrParser.TRY, MQVTrParser.WITH, MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.CLASS, MQVTrParser.YIELD, MQVTrParser.DEL, MQVTrParser.PASS, MQVTrParser.CONTINUE, MQVTrParser.BREAK, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE, MQVTrParser.AT]:
                    self.state = 759
                    self.stmt()

                else:
                    raise NoViableAltException(self)

                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 765
            self.match(MQVTrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(MQVTrParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(MQVTrParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NEWLINE)
            else:
                return self.getToken(MQVTrParser.NEWLINE, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)




    def eval_input(self):

        localctx = MQVTrParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.testlist()
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.NEWLINE:
                self.state = 768
                self.match(MQVTrParser.NEWLINE)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 774
            self.match(MQVTrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(MQVTrParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(MQVTrParser.ArglistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)




    def decorator(self):

        localctx = MQVTrParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(MQVTrParser.AT)
            self.state = 777
            self.dotted_name()
            self.state = 783
            _la = self._input.LA(1)
            if _la==MQVTrParser.OPEN_PAREN:
                self.state = 778
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 780
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.POWER - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                    self.state = 779
                    self.arglist()


                self.state = 782
                self.match(MQVTrParser.CLOSE_PAREN)


            self.state = 785
            self.match(MQVTrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.DecoratorContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)




    def decorators(self):

        localctx = MQVTrParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 787
                self.decorator()
                self.state = 790 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MQVTrParser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(MQVTrParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(MQVTrParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(MQVTrParser.FuncdefContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)




    def decorated(self):

        localctx = MQVTrParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.decorators()
            self.state = 795
            token = self._input.LA(1)
            if token in [MQVTrParser.CLASS]:
                self.state = 793
                self.classdef()

            elif token in [MQVTrParser.DEF]:
                self.state = 794
                self.funcdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(MQVTrParser.DEF, 0)

        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(MQVTrParser.ParametersContext,0)


        def suite(self):
            return self.getTypedRuleContext(MQVTrParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)




    def funcdef(self):

        localctx = MQVTrParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(MQVTrParser.DEF)
            self.state = 798
            self.match(MQVTrParser.NAME)
            self.state = 799
            self.parameters()
            self.state = 802
            _la = self._input.LA(1)
            if _la==MQVTrParser.ARROW:
                self.state = 800
                self.match(MQVTrParser.ARROW)
                self.state = 801
                self.test()


            self.state = 804
            self.match(MQVTrParser.COLON)
            self.state = 805
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(MQVTrParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)




    def parameters(self):

        localctx = MQVTrParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(MQVTrParser.OPEN_PAREN)
            self.state = 809
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MQVTrParser.NAME - 68)) | (1 << (MQVTrParser.STAR - 68)) | (1 << (MQVTrParser.POWER - 68)))) != 0):
                self.state = 808
                self.typedargslist()


            self.state = 811
            self.match(MQVTrParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)




    def typedargslist(self):

        localctx = MQVTrParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 878
            token = self._input.LA(1)
            if token in [MQVTrParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.tfpdef()
                self.state = 816
                _la = self._input.LA(1)
                if _la==MQVTrParser.ASSIGN:
                    self.state = 814
                    self.match(MQVTrParser.ASSIGN)
                    self.state = 815
                    self.test()


                self.state = 826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 818
                        self.match(MQVTrParser.COMMA)
                        self.state = 819
                        self.tfpdef()
                        self.state = 822
                        _la = self._input.LA(1)
                        if _la==MQVTrParser.ASSIGN:
                            self.state = 820
                            self.match(MQVTrParser.ASSIGN)
                            self.state = 821
                            self.test()

                 
                    self.state = 828
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                self.state = 854
                _la = self._input.LA(1)
                if _la==MQVTrParser.COMMA:
                    self.state = 829
                    self.match(MQVTrParser.COMMA)
                    self.state = 852
                    token = self._input.LA(1)
                    if token in [MQVTrParser.STAR]:
                        self.state = 830
                        self.match(MQVTrParser.STAR)
                        self.state = 832
                        _la = self._input.LA(1)
                        if _la==MQVTrParser.NAME:
                            self.state = 831
                            self.tfpdef()


                        self.state = 842
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 834
                                self.match(MQVTrParser.COMMA)
                                self.state = 835
                                self.tfpdef()
                                self.state = 838
                                _la = self._input.LA(1)
                                if _la==MQVTrParser.ASSIGN:
                                    self.state = 836
                                    self.match(MQVTrParser.ASSIGN)
                                    self.state = 837
                                    self.test()

                         
                            self.state = 844
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                        self.state = 848
                        _la = self._input.LA(1)
                        if _la==MQVTrParser.COMMA:
                            self.state = 845
                            self.match(MQVTrParser.COMMA)
                            self.state = 846
                            self.match(MQVTrParser.POWER)
                            self.state = 847
                            self.tfpdef()


                        pass
                    elif token in [MQVTrParser.POWER]:
                        self.state = 850
                        self.match(MQVTrParser.POWER)
                        self.state = 851
                        self.tfpdef()
                        pass
                    elif token in [MQVTrParser.CLOSE_PAREN]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [MQVTrParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.match(MQVTrParser.STAR)
                self.state = 858
                _la = self._input.LA(1)
                if _la==MQVTrParser.NAME:
                    self.state = 857
                    self.tfpdef()


                self.state = 868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 860
                        self.match(MQVTrParser.COMMA)
                        self.state = 861
                        self.tfpdef()
                        self.state = 864
                        _la = self._input.LA(1)
                        if _la==MQVTrParser.ASSIGN:
                            self.state = 862
                            self.match(MQVTrParser.ASSIGN)
                            self.state = 863
                            self.test()

                 
                    self.state = 870
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                self.state = 874
                _la = self._input.LA(1)
                if _la==MQVTrParser.COMMA:
                    self.state = 871
                    self.match(MQVTrParser.COMMA)
                    self.state = 872
                    self.match(MQVTrParser.POWER)
                    self.state = 873
                    self.tfpdef()



            elif token in [MQVTrParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 876
                self.match(MQVTrParser.POWER)
                self.state = 877
                self.tfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)




    def tfpdef(self):

        localctx = MQVTrParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(MQVTrParser.NAME)
            self.state = 883
            _la = self._input.LA(1)
            if _la==MQVTrParser.COLON:
                self.state = 881
                self.match(MQVTrParser.COLON)
                self.state = 882
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.VfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)




    def varargslist(self):

        localctx = MQVTrParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 950
            token = self._input.LA(1)
            if token in [MQVTrParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.vfpdef()
                self.state = 888
                _la = self._input.LA(1)
                if _la==MQVTrParser.ASSIGN:
                    self.state = 886
                    self.match(MQVTrParser.ASSIGN)
                    self.state = 887
                    self.test()


                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 890
                        self.match(MQVTrParser.COMMA)
                        self.state = 891
                        self.vfpdef()
                        self.state = 894
                        _la = self._input.LA(1)
                        if _la==MQVTrParser.ASSIGN:
                            self.state = 892
                            self.match(MQVTrParser.ASSIGN)
                            self.state = 893
                            self.test()

                 
                    self.state = 900
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 926
                _la = self._input.LA(1)
                if _la==MQVTrParser.COMMA:
                    self.state = 901
                    self.match(MQVTrParser.COMMA)
                    self.state = 924
                    token = self._input.LA(1)
                    if token in [MQVTrParser.STAR]:
                        self.state = 902
                        self.match(MQVTrParser.STAR)
                        self.state = 904
                        _la = self._input.LA(1)
                        if _la==MQVTrParser.NAME:
                            self.state = 903
                            self.vfpdef()


                        self.state = 914
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 906
                                self.match(MQVTrParser.COMMA)
                                self.state = 907
                                self.vfpdef()
                                self.state = 910
                                _la = self._input.LA(1)
                                if _la==MQVTrParser.ASSIGN:
                                    self.state = 908
                                    self.match(MQVTrParser.ASSIGN)
                                    self.state = 909
                                    self.test()

                         
                            self.state = 916
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                        self.state = 920
                        _la = self._input.LA(1)
                        if _la==MQVTrParser.COMMA:
                            self.state = 917
                            self.match(MQVTrParser.COMMA)
                            self.state = 918
                            self.match(MQVTrParser.POWER)
                            self.state = 919
                            self.vfpdef()


                        pass
                    elif token in [MQVTrParser.POWER]:
                        self.state = 922
                        self.match(MQVTrParser.POWER)
                        self.state = 923
                        self.vfpdef()
                        pass
                    elif token in [MQVTrParser.COLON]:
                        pass
                    else:
                        raise NoViableAltException(self)



            elif token in [MQVTrParser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(MQVTrParser.STAR)
                self.state = 930
                _la = self._input.LA(1)
                if _la==MQVTrParser.NAME:
                    self.state = 929
                    self.vfpdef()


                self.state = 940
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 932
                        self.match(MQVTrParser.COMMA)
                        self.state = 933
                        self.vfpdef()
                        self.state = 936
                        _la = self._input.LA(1)
                        if _la==MQVTrParser.ASSIGN:
                            self.state = 934
                            self.match(MQVTrParser.ASSIGN)
                            self.state = 935
                            self.test()

                 
                    self.state = 942
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 946
                _la = self._input.LA(1)
                if _la==MQVTrParser.COMMA:
                    self.state = 943
                    self.match(MQVTrParser.COMMA)
                    self.state = 944
                    self.match(MQVTrParser.POWER)
                    self.state = 945
                    self.vfpdef()



            elif token in [MQVTrParser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                self.match(MQVTrParser.POWER)
                self.state = 949
                self.vfpdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)




    def vfpdef(self):

        localctx = MQVTrParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(MQVTrParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = MQVTrParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_stmt)
        try:
            self.state = 956
            token = self._input.LA(1)
            if token in [MQVTrParser.RETURN, MQVTrParser.RAISE, MQVTrParser.FROM, MQVTrParser.IMPORT, MQVTrParser.GLOBAL, MQVTrParser.NONLOCAL, MQVTrParser.ASSERT, MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.YIELD, MQVTrParser.DEL, MQVTrParser.PASS, MQVTrParser.CONTINUE, MQVTrParser.BREAK, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.simple_stmt()

            elif token in [MQVTrParser.DEF, MQVTrParser.IF, MQVTrParser.WHILE, MQVTrParser.FOR, MQVTrParser.TRY, MQVTrParser.WITH, MQVTrParser.CLASS, MQVTrParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.compound_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)




    def simple_stmt(self):

        localctx = MQVTrParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.small_stmt()
            self.state = 963
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 959
                    self.match(MQVTrParser.SEMI_COLON)
                    self.state = 960
                    self.small_stmt() 
                self.state = 965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

            self.state = 967
            _la = self._input.LA(1)
            if _la==MQVTrParser.SEMI_COLON:
                self.state = 966
                self.match(MQVTrParser.SEMI_COLON)


            self.state = 969
            self.match(MQVTrParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmall_stmt" ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmall_stmt" ):
                listener.exitSmall_stmt(self)




    def small_stmt(self):

        localctx = MQVTrParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_small_stmt)
        try:
            self.state = 979
            token = self._input.LA(1)
            if token in [MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 971
                self.expr_stmt()

            elif token in [MQVTrParser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 972
                self.del_stmt()

            elif token in [MQVTrParser.PASS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 973
                self.pass_stmt()

            elif token in [MQVTrParser.RETURN, MQVTrParser.RAISE, MQVTrParser.YIELD, MQVTrParser.CONTINUE, MQVTrParser.BREAK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 974
                self.flow_stmt()

            elif token in [MQVTrParser.FROM, MQVTrParser.IMPORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 975
                self.import_stmt()

            elif token in [MQVTrParser.GLOBAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 976
                self.global_stmt()

            elif token in [MQVTrParser.NONLOCAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 977
                self.nonlocal_stmt()

            elif token in [MQVTrParser.ASSERT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 978
                self.assert_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(MQVTrParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(MQVTrParser.TestlistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)




    def expr_stmt(self):

        localctx = MQVTrParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.testlist_star_expr()
            self.state = 997
            token = self._input.LA(1)
            if token in [MQVTrParser.ADD_ASSIGN, MQVTrParser.SUB_ASSIGN, MQVTrParser.MULT_ASSIGN, MQVTrParser.AT_ASSIGN, MQVTrParser.DIV_ASSIGN, MQVTrParser.MOD_ASSIGN, MQVTrParser.AND_ASSIGN, MQVTrParser.OR_ASSIGN, MQVTrParser.XOR_ASSIGN, MQVTrParser.LEFT_SHIFT_ASSIGN, MQVTrParser.RIGHT_SHIFT_ASSIGN, MQVTrParser.POWER_ASSIGN, MQVTrParser.IDIV_ASSIGN]:
                self.state = 982
                self.augassign()
                self.state = 985
                token = self._input.LA(1)
                if token in [MQVTrParser.YIELD]:
                    self.state = 983
                    self.yield_expr()

                elif token in [MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                    self.state = 984
                    self.testlist()

                else:
                    raise NoViableAltException(self)


            elif token in [MQVTrParser.NEWLINE, MQVTrParser.SEMI_COLON, MQVTrParser.ASSIGN, MQVTrParser.CLOSE_BRACE]:
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MQVTrParser.ASSIGN:
                    self.state = 987
                    self.match(MQVTrParser.ASSIGN)
                    self.state = 990
                    token = self._input.LA(1)
                    if token in [MQVTrParser.YIELD]:
                        self.state = 988
                        self.yield_expr()

                    elif token in [MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                        self.state = 989
                        self.testlist_star_expr()

                    else:
                        raise NoViableAltException(self)

                    self.state = 996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Star_exprContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)




    def testlist_star_expr(self):

        localctx = MQVTrParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_testlist_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 999
                self.test()
                pass

            elif la_ == 2:
                self.state = 1000
                self.star_expr()
                pass


            self.state = 1010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1003
                    self.match(MQVTrParser.COMMA)
                    self.state = 1006
                    la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                    if la_ == 1:
                        self.state = 1004
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 1005
                        self.star_expr()
                        pass

             
                self.state = 1012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 1014
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1013
                self.match(MQVTrParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MQVTrParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)




    def augassign(self):

        localctx = MQVTrParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            _la = self._input.LA(1)
            if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (MQVTrParser.ADD_ASSIGN - 111)) | (1 << (MQVTrParser.SUB_ASSIGN - 111)) | (1 << (MQVTrParser.MULT_ASSIGN - 111)) | (1 << (MQVTrParser.AT_ASSIGN - 111)) | (1 << (MQVTrParser.DIV_ASSIGN - 111)) | (1 << (MQVTrParser.MOD_ASSIGN - 111)) | (1 << (MQVTrParser.AND_ASSIGN - 111)) | (1 << (MQVTrParser.OR_ASSIGN - 111)) | (1 << (MQVTrParser.XOR_ASSIGN - 111)) | (1 << (MQVTrParser.LEFT_SHIFT_ASSIGN - 111)) | (1 << (MQVTrParser.RIGHT_SHIFT_ASSIGN - 111)) | (1 << (MQVTrParser.POWER_ASSIGN - 111)) | (1 << (MQVTrParser.IDIV_ASSIGN - 111)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(MQVTrParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(MQVTrParser.ExprlistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)




    def del_stmt(self):

        localctx = MQVTrParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(MQVTrParser.DEL)
            self.state = 1019
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(MQVTrParser.PASS, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)




    def pass_stmt(self):

        localctx = MQVTrParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(MQVTrParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)




    def flow_stmt(self):

        localctx = MQVTrParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_flow_stmt)
        try:
            self.state = 1028
            token = self._input.LA(1)
            if token in [MQVTrParser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1023
                self.break_stmt()

            elif token in [MQVTrParser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1024
                self.continue_stmt()

            elif token in [MQVTrParser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1025
                self.return_stmt()

            elif token in [MQVTrParser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1026
                self.raise_stmt()

            elif token in [MQVTrParser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1027
                self.yield_stmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MQVTrParser.BREAK, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)




    def break_stmt(self):

        localctx = MQVTrParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(MQVTrParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MQVTrParser.CONTINUE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)




    def continue_stmt(self):

        localctx = MQVTrParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(MQVTrParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MQVTrParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(MQVTrParser.TestlistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)




    def return_stmt(self):

        localctx = MQVTrParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(MQVTrParser.RETURN)
            self.state = 1036
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                self.state = 1035
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(MQVTrParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)




    def yield_stmt(self):

        localctx = MQVTrParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(MQVTrParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def FROM(self):
            return self.getToken(MQVTrParser.FROM, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)




    def raise_stmt(self):

        localctx = MQVTrParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(MQVTrParser.RAISE)
            self.state = 1046
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                self.state = 1041
                self.test()
                self.state = 1044
                _la = self._input.LA(1)
                if _la==MQVTrParser.FROM:
                    self.state = 1042
                    self.match(MQVTrParser.FROM)
                    self.state = 1043
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(MQVTrParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(MQVTrParser.Import_fromContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)




    def import_stmt(self):

        localctx = MQVTrParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_import_stmt)
        try:
            self.state = 1050
            token = self._input.LA(1)
            if token in [MQVTrParser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.import_name()

            elif token in [MQVTrParser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.import_from()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(MQVTrParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(MQVTrParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)




    def import_name(self):

        localctx = MQVTrParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(MQVTrParser.IMPORT)
            self.state = 1053
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(MQVTrParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(MQVTrParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(MQVTrParser.Dotted_nameContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(MQVTrParser.Import_as_namesContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)




    def import_from(self):

        localctx = MQVTrParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(MQVTrParser.FROM)
            self.state = 1068
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MQVTrParser.DOT or _la==MQVTrParser.ELLIPSIS:
                    self.state = 1056
                    _la = self._input.LA(1)
                    if not(_la==MQVTrParser.DOT or _la==MQVTrParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1061
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1062
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 1064 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1063
                    _la = self._input.LA(1)
                    if not(_la==MQVTrParser.DOT or _la==MQVTrParser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 1066 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MQVTrParser.DOT or _la==MQVTrParser.ELLIPSIS):
                        break

                pass


            self.state = 1070
            self.match(MQVTrParser.IMPORT)
            self.state = 1077
            token = self._input.LA(1)
            if token in [MQVTrParser.STAR]:
                self.state = 1071
                self.match(MQVTrParser.STAR)

            elif token in [MQVTrParser.OPEN_PAREN]:
                self.state = 1072
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 1073
                self.import_as_names()
                self.state = 1074
                self.match(MQVTrParser.CLOSE_PAREN)

            elif token in [MQVTrParser.NAME]:
                self.state = 1076
                self.import_as_names()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NAME)
            else:
                return self.getToken(MQVTrParser.NAME, i)

        def AS(self):
            return self.getToken(MQVTrParser.AS, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)




    def import_as_name(self):

        localctx = MQVTrParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(MQVTrParser.NAME)
            self.state = 1082
            _la = self._input.LA(1)
            if _la==MQVTrParser.AS:
                self.state = 1080
                self.match(MQVTrParser.AS)
                self.state = 1081
                self.match(MQVTrParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(MQVTrParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(MQVTrParser.AS, 0)

        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)




    def dotted_as_name(self):

        localctx = MQVTrParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.dotted_name()
            self.state = 1087
            _la = self._input.LA(1)
            if _la==MQVTrParser.AS:
                self.state = 1085
                self.match(MQVTrParser.AS)
                self.state = 1086
                self.match(MQVTrParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Import_as_nameContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)




    def import_as_names(self):

        localctx = MQVTrParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.import_as_name()
            self.state = 1094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1090
                    self.match(MQVTrParser.COMMA)
                    self.state = 1091
                    self.import_as_name() 
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 1098
            _la = self._input.LA(1)
            if _la==MQVTrParser.COMMA:
                self.state = 1097
                self.match(MQVTrParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Dotted_as_nameContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)




    def dotted_as_names(self):

        localctx = MQVTrParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.dotted_as_name()
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 1101
                self.match(MQVTrParser.COMMA)
                self.state = 1102
                self.dotted_as_name()
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NAME)
            else:
                return self.getToken(MQVTrParser.NAME, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)




    def dotted_name(self):

        localctx = MQVTrParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(MQVTrParser.NAME)
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.DOT:
                self.state = 1109
                self.match(MQVTrParser.DOT)
                self.state = 1110
                self.match(MQVTrParser.NAME)
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(MQVTrParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NAME)
            else:
                return self.getToken(MQVTrParser.NAME, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)




    def global_stmt(self):

        localctx = MQVTrParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(MQVTrParser.GLOBAL)
            self.state = 1117
            self.match(MQVTrParser.NAME)
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 1118
                self.match(MQVTrParser.COMMA)
                self.state = 1119
                self.match(MQVTrParser.NAME)
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(MQVTrParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.NAME)
            else:
                return self.getToken(MQVTrParser.NAME, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)




    def nonlocal_stmt(self):

        localctx = MQVTrParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(MQVTrParser.NONLOCAL)
            self.state = 1126
            self.match(MQVTrParser.NAME)
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 1127
                self.match(MQVTrParser.COMMA)
                self.state = 1128
                self.match(MQVTrParser.NAME)
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(MQVTrParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)




    def assert_stmt(self):

        localctx = MQVTrParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(MQVTrParser.ASSERT)
            self.state = 1135
            self.test()
            self.state = 1138
            _la = self._input.LA(1)
            if _la==MQVTrParser.COMMA:
                self.state = 1136
                self.match(MQVTrParser.COMMA)
                self.state = 1137
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(MQVTrParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(MQVTrParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(MQVTrParser.DecoratedContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)




    def compound_stmt(self):

        localctx = MQVTrParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_compound_stmt)
        try:
            self.state = 1148
            token = self._input.LA(1)
            if token in [MQVTrParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self.if_stmt()

            elif token in [MQVTrParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1141
                self.while_stmt()

            elif token in [MQVTrParser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1142
                self.for_stmt()

            elif token in [MQVTrParser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1143
                self.try_stmt()

            elif token in [MQVTrParser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1144
                self.with_stmt()

            elif token in [MQVTrParser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1145
                self.funcdef()

            elif token in [MQVTrParser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1146
                self.classdef()

            elif token in [MQVTrParser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1147
                self.decorated()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MQVTrParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.SuiteContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.ELIF)
            else:
                return self.getToken(MQVTrParser.ELIF, i)

        def ELSE(self):
            return self.getToken(MQVTrParser.ELSE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = MQVTrParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(MQVTrParser.IF)
            self.state = 1151
            self.test()
            self.state = 1152
            self.match(MQVTrParser.COLON)
            self.state = 1153
            self.suite()
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.ELIF:
                self.state = 1154
                self.match(MQVTrParser.ELIF)
                self.state = 1155
                self.test()
                self.state = 1156
                self.match(MQVTrParser.COLON)
                self.state = 1157
                self.suite()
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1167
            _la = self._input.LA(1)
            if _la==MQVTrParser.ELSE:
                self.state = 1164
                self.match(MQVTrParser.ELSE)
                self.state = 1165
                self.match(MQVTrParser.COLON)
                self.state = 1166
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(MQVTrParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.SuiteContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(MQVTrParser.ELSE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)




    def while_stmt(self):

        localctx = MQVTrParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(MQVTrParser.WHILE)
            self.state = 1170
            self.test()
            self.state = 1171
            self.match(MQVTrParser.COLON)
            self.state = 1172
            self.suite()
            self.state = 1176
            _la = self._input.LA(1)
            if _la==MQVTrParser.ELSE:
                self.state = 1173
                self.match(MQVTrParser.ELSE)
                self.state = 1174
                self.match(MQVTrParser.COLON)
                self.state = 1175
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MQVTrParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(MQVTrParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(MQVTrParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(MQVTrParser.TestlistContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.SuiteContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(MQVTrParser.ELSE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = MQVTrParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(MQVTrParser.FOR)
            self.state = 1179
            self.exprlist()
            self.state = 1180
            self.match(MQVTrParser.IN)
            self.state = 1181
            self.testlist()
            self.state = 1182
            self.match(MQVTrParser.COLON)
            self.state = 1183
            self.suite()
            self.state = 1187
            _la = self._input.LA(1)
            if _la==MQVTrParser.ELSE:
                self.state = 1184
                self.match(MQVTrParser.ELSE)
                self.state = 1185
                self.match(MQVTrParser.COLON)
                self.state = 1186
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(MQVTrParser.TRY, 0)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.SuiteContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(MQVTrParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(MQVTrParser.ELSE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)




    def try_stmt(self):

        localctx = MQVTrParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(MQVTrParser.TRY)
            self.state = 1190
            self.match(MQVTrParser.COLON)
            self.state = 1191
            self.suite()
            self.state = 1213
            token = self._input.LA(1)
            if token in [MQVTrParser.EXCEPT]:
                self.state = 1196 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1192
                    self.except_clause()
                    self.state = 1193
                    self.match(MQVTrParser.COLON)
                    self.state = 1194
                    self.suite()
                    self.state = 1198 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MQVTrParser.EXCEPT):
                        break

                self.state = 1203
                _la = self._input.LA(1)
                if _la==MQVTrParser.ELSE:
                    self.state = 1200
                    self.match(MQVTrParser.ELSE)
                    self.state = 1201
                    self.match(MQVTrParser.COLON)
                    self.state = 1202
                    self.suite()


                self.state = 1208
                _la = self._input.LA(1)
                if _la==MQVTrParser.FINALLY:
                    self.state = 1205
                    self.match(MQVTrParser.FINALLY)
                    self.state = 1206
                    self.match(MQVTrParser.COLON)
                    self.state = 1207
                    self.suite()



            elif token in [MQVTrParser.FINALLY]:
                self.state = 1210
                self.match(MQVTrParser.FINALLY)
                self.state = 1211
                self.match(MQVTrParser.COLON)
                self.state = 1212
                self.suite()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MQVTrParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.With_itemContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.With_itemContext,i)


        def suite(self):
            return self.getTypedRuleContext(MQVTrParser.SuiteContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)




    def with_stmt(self):

        localctx = MQVTrParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(MQVTrParser.WITH)
            self.state = 1216
            self.with_item()
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.COMMA:
                self.state = 1217
                self.match(MQVTrParser.COMMA)
                self.state = 1218
                self.with_item()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1224
            self.match(MQVTrParser.COLON)
            self.state = 1225
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def AS(self):
            return self.getToken(MQVTrParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(MQVTrParser.ExprContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)




    def with_item(self):

        localctx = MQVTrParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.test()
            self.state = 1230
            _la = self._input.LA(1)
            if _la==MQVTrParser.AS:
                self.state = 1228
                self.match(MQVTrParser.AS)
                self.state = 1229
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(MQVTrParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def AS(self):
            return self.getToken(MQVTrParser.AS, 0)

        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)




    def except_clause(self):

        localctx = MQVTrParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(MQVTrParser.EXCEPT)
            self.state = 1238
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                self.state = 1233
                self.test()
                self.state = 1236
                _la = self._input.LA(1)
                if _la==MQVTrParser.AS:
                    self.state = 1234
                    self.match(MQVTrParser.AS)
                    self.state = 1235
                    self.match(MQVTrParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(MQVTrParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(MQVTrParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(MQVTrParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(MQVTrParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.StmtContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.StmtContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)




    def suite(self):

        localctx = MQVTrParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 1250
            token = self._input.LA(1)
            if token in [MQVTrParser.RETURN, MQVTrParser.RAISE, MQVTrParser.FROM, MQVTrParser.IMPORT, MQVTrParser.GLOBAL, MQVTrParser.NONLOCAL, MQVTrParser.ASSERT, MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.YIELD, MQVTrParser.DEL, MQVTrParser.PASS, MQVTrParser.CONTINUE, MQVTrParser.BREAK, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                self.simple_stmt()

            elif token in [MQVTrParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.match(MQVTrParser.NEWLINE)
                self.state = 1242
                self.match(MQVTrParser.INDENT)
                self.state = 1244 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1243
                    self.stmt()
                    self.state = 1246 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MQVTrParser.DEF) | (1 << MQVTrParser.RETURN) | (1 << MQVTrParser.RAISE) | (1 << MQVTrParser.FROM) | (1 << MQVTrParser.IMPORT) | (1 << MQVTrParser.GLOBAL) | (1 << MQVTrParser.NONLOCAL) | (1 << MQVTrParser.ASSERT) | (1 << MQVTrParser.IF) | (1 << MQVTrParser.WHILE) | (1 << MQVTrParser.FOR) | (1 << MQVTrParser.TRY) | (1 << MQVTrParser.WITH) | (1 << MQVTrParser.LAMBDA) | (1 << MQVTrParser.NOT) | (1 << MQVTrParser.NONE) | (1 << MQVTrParser.TRUE) | (1 << MQVTrParser.FALSE) | (1 << MQVTrParser.CLASS) | (1 << MQVTrParser.YIELD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MQVTrParser.DEL - 64)) | (1 << (MQVTrParser.PASS - 64)) | (1 << (MQVTrParser.CONTINUE - 64)) | (1 << (MQVTrParser.BREAK - 64)) | (1 << (MQVTrParser.NAME - 64)) | (1 << (MQVTrParser.STRING_LITERAL - 64)) | (1 << (MQVTrParser.BYTES_LITERAL - 64)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 64)) | (1 << (MQVTrParser.OCT_INTEGER - 64)) | (1 << (MQVTrParser.HEX_INTEGER - 64)) | (1 << (MQVTrParser.BIN_INTEGER - 64)) | (1 << (MQVTrParser.FLOAT_NUMBER - 64)) | (1 << (MQVTrParser.IMAG_NUMBER - 64)) | (1 << (MQVTrParser.ELLIPSIS - 64)) | (1 << (MQVTrParser.STAR - 64)) | (1 << (MQVTrParser.OPEN_PAREN - 64)) | (1 << (MQVTrParser.OPEN_BRACK - 64)) | (1 << (MQVTrParser.ADD - 64)) | (1 << (MQVTrParser.MINUS - 64)) | (1 << (MQVTrParser.NOT_OP - 64)) | (1 << (MQVTrParser.OPEN_BRACE - 64)) | (1 << (MQVTrParser.AT - 64)))) != 0)):
                        break

                self.state = 1248
                self.match(MQVTrParser.DEDENT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Or_testContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Or_testContext,i)


        def IF(self):
            return self.getToken(MQVTrParser.IF, 0)

        def ELSE(self):
            return self.getToken(MQVTrParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(MQVTrParser.LambdefContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)




    def test(self):

        localctx = MQVTrParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 1261
            token = self._input.LA(1)
            if token in [MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1252
                self.or_test()
                self.state = 1258
                _la = self._input.LA(1)
                if _la==MQVTrParser.IF:
                    self.state = 1253
                    self.match(MQVTrParser.IF)
                    self.state = 1254
                    self.or_test()
                    self.state = 1255
                    self.match(MQVTrParser.ELSE)
                    self.state = 1256
                    self.test()



            elif token in [MQVTrParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1260
                self.lambdef()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(MQVTrParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(MQVTrParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)




    def test_nocond(self):

        localctx = MQVTrParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_test_nocond)
        try:
            self.state = 1265
            token = self._input.LA(1)
            if token in [MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1263
                self.or_test()

            elif token in [MQVTrParser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1264
                self.lambdef_nocond()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(MQVTrParser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(MQVTrParser.VarargslistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)




    def lambdef(self):

        localctx = MQVTrParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(MQVTrParser.LAMBDA)
            self.state = 1269
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MQVTrParser.NAME - 68)) | (1 << (MQVTrParser.STAR - 68)) | (1 << (MQVTrParser.POWER - 68)))) != 0):
                self.state = 1268
                self.varargslist()


            self.state = 1271
            self.match(MQVTrParser.COLON)
            self.state = 1272
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(MQVTrParser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(MQVTrParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(MQVTrParser.VarargslistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)




    def lambdef_nocond(self):

        localctx = MQVTrParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(MQVTrParser.LAMBDA)
            self.state = 1276
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MQVTrParser.NAME - 68)) | (1 << (MQVTrParser.STAR - 68)) | (1 << (MQVTrParser.POWER - 68)))) != 0):
                self.state = 1275
                self.varargslist()


            self.state = 1278
            self.match(MQVTrParser.COLON)
            self.state = 1279
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.And_testContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.OR)
            else:
                return self.getToken(MQVTrParser.OR, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)




    def or_test(self):

        localctx = MQVTrParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.and_test()
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.OR:
                self.state = 1282
                self.match(MQVTrParser.OR)
                self.state = 1283
                self.and_test()
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Not_testContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MQVTrParser.AND)
            else:
                return self.getToken(MQVTrParser.AND, i)

        def getRuleIndex(self):
            return MQVTrParser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)




    def and_test(self):

        localctx = MQVTrParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.not_test()
            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.AND:
                self.state = 1290
                self.match(MQVTrParser.AND)
                self.state = 1291
                self.not_test()
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(MQVTrParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(MQVTrParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(MQVTrParser.ComparisonContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)




    def not_test(self):

        localctx = MQVTrParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_not_test)
        try:
            self.state = 1300
            token = self._input.LA(1)
            if token in [MQVTrParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1297
                self.match(MQVTrParser.NOT)
                self.state = 1298
                self.not_test()

            elif token in [MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.comparison()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Comp_opContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = MQVTrParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.star_expr()
            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (MQVTrParser.IN - 49)) | (1 << (MQVTrParser.NOT - 49)) | (1 << (MQVTrParser.IS - 49)) | (1 << (MQVTrParser.LESS_THAN - 49)) | (1 << (MQVTrParser.GREATER_THAN - 49)) | (1 << (MQVTrParser.EQUALS - 49)) | (1 << (MQVTrParser.GT_EQ - 49)) | (1 << (MQVTrParser.LT_EQ - 49)) | (1 << (MQVTrParser.NOT_EQ_1 - 49)) | (1 << (MQVTrParser.NOT_EQ_2 - 49)))) != 0):
                self.state = 1303
                self.comp_op()
                self.state = 1304
                self.star_expr()
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(MQVTrParser.IN, 0)

        def NOT(self):
            return self.getToken(MQVTrParser.NOT, 0)

        def IS(self):
            return self.getToken(MQVTrParser.IS, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)




    def comp_op(self):

        localctx = MQVTrParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_comp_op)
        try:
            self.state = 1324
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.match(MQVTrParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                self.match(MQVTrParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1313
                self.match(MQVTrParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1314
                self.match(MQVTrParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1315
                self.match(MQVTrParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1316
                self.match(MQVTrParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1317
                self.match(MQVTrParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1318
                self.match(MQVTrParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1319
                self.match(MQVTrParser.NOT)
                self.state = 1320
                self.match(MQVTrParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1321
                self.match(MQVTrParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1322
                self.match(MQVTrParser.IS)
                self.state = 1323
                self.match(MQVTrParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MQVTrParser.ExprContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)




    def star_expr(self):

        localctx = MQVTrParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            _la = self._input.LA(1)
            if _la==MQVTrParser.STAR:
                self.state = 1326
                self.match(MQVTrParser.STAR)


            self.state = 1329
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Xor_exprContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = MQVTrParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.xor_expr()
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.OR_OP:
                self.state = 1332
                self.match(MQVTrParser.OR_OP)
                self.state = 1333
                self.xor_expr()
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.And_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.And_exprContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)




    def xor_expr(self):

        localctx = MQVTrParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.and_expr()
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.XOR:
                self.state = 1340
                self.match(MQVTrParser.XOR)
                self.state = 1341
                self.and_expr()
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Shift_exprContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)




    def and_expr(self):

        localctx = MQVTrParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.shift_expr()
            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.AND_OP:
                self.state = 1348
                self.match(MQVTrParser.AND_OP)
                self.state = 1349
                self.shift_expr()
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Arith_exprContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)




    def shift_expr(self):

        localctx = MQVTrParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.arith_expr()
            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.LEFT_SHIFT or _la==MQVTrParser.RIGHT_SHIFT:
                self.state = 1360
                token = self._input.LA(1)
                if token in [MQVTrParser.LEFT_SHIFT]:
                    self.state = 1356
                    self.match(MQVTrParser.LEFT_SHIFT)
                    self.state = 1357
                    self.arith_expr()

                elif token in [MQVTrParser.RIGHT_SHIFT]:
                    self.state = 1358
                    self.match(MQVTrParser.RIGHT_SHIFT)
                    self.state = 1359
                    self.arith_expr()

                else:
                    raise NoViableAltException(self)

                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TermContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TermContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = MQVTrParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.term()
            self.state = 1372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MQVTrParser.ADD or _la==MQVTrParser.MINUS:
                self.state = 1370
                token = self._input.LA(1)
                if token in [MQVTrParser.ADD]:
                    self.state = 1366
                    self.match(MQVTrParser.ADD)
                    self.state = 1367
                    self.term()

                elif token in [MQVTrParser.MINUS]:
                    self.state = 1368
                    self.match(MQVTrParser.MINUS)
                    self.state = 1369
                    self.term()

                else:
                    raise NoViableAltException(self)

                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.FactorContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.FactorContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = MQVTrParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self.factor()
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (MQVTrParser.STAR - 79)) | (1 << (MQVTrParser.DIV - 79)) | (1 << (MQVTrParser.MOD - 79)) | (1 << (MQVTrParser.IDIV - 79)) | (1 << (MQVTrParser.AT - 79)))) != 0):
                self.state = 1386
                token = self._input.LA(1)
                if token in [MQVTrParser.STAR]:
                    self.state = 1376
                    self.match(MQVTrParser.STAR)
                    self.state = 1377
                    self.factor()

                elif token in [MQVTrParser.DIV]:
                    self.state = 1378
                    self.match(MQVTrParser.DIV)
                    self.state = 1379
                    self.factor()

                elif token in [MQVTrParser.MOD]:
                    self.state = 1380
                    self.match(MQVTrParser.MOD)
                    self.state = 1381
                    self.factor()

                elif token in [MQVTrParser.IDIV]:
                    self.state = 1382
                    self.match(MQVTrParser.IDIV)
                    self.state = 1383
                    self.factor()

                elif token in [MQVTrParser.AT]:
                    self.state = 1384
                    self.match(MQVTrParser.AT)
                    self.state = 1385
                    self.factor()

                else:
                    raise NoViableAltException(self)

                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(MQVTrParser.FactorContext,0)


        def power(self):
            return self.getTypedRuleContext(MQVTrParser.PowerContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = MQVTrParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_factor)
        try:
            self.state = 1398
            token = self._input.LA(1)
            if token in [MQVTrParser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1391
                self.match(MQVTrParser.ADD)
                self.state = 1392
                self.factor()

            elif token in [MQVTrParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1393
                self.match(MQVTrParser.MINUS)
                self.state = 1394
                self.factor()

            elif token in [MQVTrParser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1395
                self.match(MQVTrParser.NOT_OP)
                self.state = 1396
                self.factor()

            elif token in [MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1397
                self.power()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(MQVTrParser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TrailerContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TrailerContext,i)


        def factor(self):
            return self.getTypedRuleContext(MQVTrParser.FactorContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)




    def power(self):

        localctx = MQVTrParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.atom()
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (MQVTrParser.DOT - 77)) | (1 << (MQVTrParser.OPEN_PAREN - 77)) | (1 << (MQVTrParser.OPEN_BRACK - 77)))) != 0):
                self.state = 1401
                self.trailer()
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1409
            _la = self._input.LA(1)
            if _la==MQVTrParser.POWER:
                self.state = 1407
                self.match(MQVTrParser.POWER)
                self.state = 1408
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(MQVTrParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(MQVTrParser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(MQVTrParser.DictorsetmakerContext,0)


        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(MQVTrParser.NumberContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.StringContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.StringContext,i)


        def NONE(self):
            return self.getToken(MQVTrParser.NONE, 0)

        def TRUE(self):
            return self.getToken(MQVTrParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MQVTrParser.FALSE, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = MQVTrParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 1438
            token = self._input.LA(1)
            if token in [MQVTrParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1411
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 1414
                token = self._input.LA(1)
                if token in [MQVTrParser.YIELD]:
                    self.state = 1412
                    self.yield_expr()
                    pass
                elif token in [MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                    self.state = 1413
                    self.testlist_comp()
                    pass
                elif token in [MQVTrParser.CLOSE_PAREN]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 1416
                self.match(MQVTrParser.CLOSE_PAREN)

            elif token in [MQVTrParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1417
                self.match(MQVTrParser.OPEN_BRACK)
                self.state = 1419
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                    self.state = 1418
                    self.testlist_comp()


                self.state = 1421
                self.match(MQVTrParser.CLOSE_BRACK)

            elif token in [MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1422
                self.match(MQVTrParser.OPEN_BRACE)
                self.state = 1424
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                    self.state = 1423
                    self.dictorsetmaker()


                self.state = 1426
                self.match(MQVTrParser.CLOSE_BRACE)

            elif token in [MQVTrParser.NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1427
                self.match(MQVTrParser.NAME)

            elif token in [MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1428
                self.number()

            elif token in [MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1430 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1429
                    self.string()
                    self.state = 1432 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MQVTrParser.STRING_LITERAL or _la==MQVTrParser.BYTES_LITERAL):
                        break


            elif token in [MQVTrParser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1434
                self.match(MQVTrParser.ELLIPSIS)

            elif token in [MQVTrParser.NONE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1435
                self.match(MQVTrParser.NONE)

            elif token in [MQVTrParser.TRUE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1436
                self.match(MQVTrParser.TRUE)

            elif token in [MQVTrParser.FALSE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1437
                self.match(MQVTrParser.FALSE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(MQVTrParser.Comp_forContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)




    def testlist_comp(self):

        localctx = MQVTrParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.test()
            self.state = 1452
            token = self._input.LA(1)
            if token in [MQVTrParser.FOR]:
                self.state = 1441
                self.comp_for()

            elif token in [MQVTrParser.CLOSE_PAREN, MQVTrParser.COMMA, MQVTrParser.CLOSE_BRACK]:
                self.state = 1446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1442
                        self.match(MQVTrParser.COMMA)
                        self.state = 1443
                        self.test() 
                    self.state = 1448
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                self.state = 1450
                _la = self._input.LA(1)
                if _la==MQVTrParser.COMMA:
                    self.state = 1449
                    self.match(MQVTrParser.COMMA)



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(MQVTrParser.ArglistContext,0)


        def subscriptlist(self):
            return self.getTypedRuleContext(MQVTrParser.SubscriptlistContext,0)


        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)




    def trailer(self):

        localctx = MQVTrParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1465
            token = self._input.LA(1)
            if token in [MQVTrParser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1454
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 1456
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.POWER - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                    self.state = 1455
                    self.arglist()


                self.state = 1458
                self.match(MQVTrParser.CLOSE_PAREN)

            elif token in [MQVTrParser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self.match(MQVTrParser.OPEN_BRACK)
                self.state = 1460
                self.subscriptlist()
                self.state = 1461
                self.match(MQVTrParser.CLOSE_BRACK)

            elif token in [MQVTrParser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1463
                self.match(MQVTrParser.DOT)
                self.state = 1464
                self.match(MQVTrParser.NAME)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.SubscriptContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)




    def subscriptlist(self):

        localctx = MQVTrParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.subscript()
            self.state = 1472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1468
                    self.match(MQVTrParser.COMMA)
                    self.state = 1469
                    self.subscript() 
                self.state = 1474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

            self.state = 1476
            _la = self._input.LA(1)
            if _la==MQVTrParser.COMMA:
                self.state = 1475
                self.match(MQVTrParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def sliceop(self):
            return self.getTypedRuleContext(MQVTrParser.SliceopContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = MQVTrParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1489
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1478
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                    self.state = 1479
                    self.test()


                self.state = 1482
                self.match(MQVTrParser.COLON)
                self.state = 1484
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                    self.state = 1483
                    self.test()


                self.state = 1487
                _la = self._input.LA(1)
                if _la==MQVTrParser.COLON:
                    self.state = 1486
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)




    def sliceop(self):

        localctx = MQVTrParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.match(MQVTrParser.COLON)
            self.state = 1493
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                self.state = 1492
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.Star_exprContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)




    def exprlist(self):

        localctx = MQVTrParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.star_expr()
            self.state = 1500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1496
                    self.match(MQVTrParser.COMMA)
                    self.state = 1497
                    self.star_expr() 
                self.state = 1502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

            self.state = 1504
            _la = self._input.LA(1)
            if _la==MQVTrParser.COMMA:
                self.state = 1503
                self.match(MQVTrParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)




    def testlist(self):

        localctx = MQVTrParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.test()
            self.state = 1511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1507
                    self.match(MQVTrParser.COMMA)
                    self.state = 1508
                    self.test() 
                self.state = 1513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

            self.state = 1515
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1514
                self.match(MQVTrParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(MQVTrParser.Comp_forContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)




    def dictorsetmaker(self):

        localctx = MQVTrParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 1550
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1517
                self.test()
                self.state = 1518
                self.match(MQVTrParser.COLON)
                self.state = 1519
                self.test()
                self.state = 1534
                token = self._input.LA(1)
                if token in [MQVTrParser.FOR]:
                    self.state = 1520
                    self.comp_for()

                elif token in [MQVTrParser.COMMA, MQVTrParser.CLOSE_BRACE]:
                    self.state = 1528
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1521
                            self.match(MQVTrParser.COMMA)
                            self.state = 1522
                            self.test()
                            self.state = 1523
                            self.match(MQVTrParser.COLON)
                            self.state = 1524
                            self.test() 
                        self.state = 1530
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

                    self.state = 1532
                    _la = self._input.LA(1)
                    if _la==MQVTrParser.COMMA:
                        self.state = 1531
                        self.match(MQVTrParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1536
                self.test()
                self.state = 1548
                token = self._input.LA(1)
                if token in [MQVTrParser.FOR]:
                    self.state = 1537
                    self.comp_for()

                elif token in [MQVTrParser.COMMA, MQVTrParser.CLOSE_BRACE]:
                    self.state = 1542
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1538
                            self.match(MQVTrParser.COMMA)
                            self.state = 1539
                            self.test() 
                        self.state = 1544
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

                    self.state = 1546
                    _la = self._input.LA(1)
                    if _la==MQVTrParser.COMMA:
                        self.state = 1545
                        self.match(MQVTrParser.COMMA)



                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(MQVTrParser.CLASS, 0)

        def NAME(self):
            return self.getToken(MQVTrParser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(MQVTrParser.SuiteContext,0)


        def arglist(self):
            return self.getTypedRuleContext(MQVTrParser.ArglistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)




    def classdef(self):

        localctx = MQVTrParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(MQVTrParser.CLASS)
            self.state = 1553
            self.match(MQVTrParser.NAME)
            self.state = 1559
            _la = self._input.LA(1)
            if _la==MQVTrParser.OPEN_PAREN:
                self.state = 1554
                self.match(MQVTrParser.OPEN_PAREN)
                self.state = 1556
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (MQVTrParser.LAMBDA - 54)) | (1 << (MQVTrParser.NOT - 54)) | (1 << (MQVTrParser.NONE - 54)) | (1 << (MQVTrParser.TRUE - 54)) | (1 << (MQVTrParser.FALSE - 54)) | (1 << (MQVTrParser.NAME - 54)) | (1 << (MQVTrParser.STRING_LITERAL - 54)) | (1 << (MQVTrParser.BYTES_LITERAL - 54)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 54)) | (1 << (MQVTrParser.OCT_INTEGER - 54)) | (1 << (MQVTrParser.HEX_INTEGER - 54)) | (1 << (MQVTrParser.BIN_INTEGER - 54)) | (1 << (MQVTrParser.FLOAT_NUMBER - 54)) | (1 << (MQVTrParser.IMAG_NUMBER - 54)) | (1 << (MQVTrParser.ELLIPSIS - 54)) | (1 << (MQVTrParser.STAR - 54)) | (1 << (MQVTrParser.OPEN_PAREN - 54)) | (1 << (MQVTrParser.POWER - 54)) | (1 << (MQVTrParser.OPEN_BRACK - 54)) | (1 << (MQVTrParser.ADD - 54)) | (1 << (MQVTrParser.MINUS - 54)) | (1 << (MQVTrParser.NOT_OP - 54)) | (1 << (MQVTrParser.OPEN_BRACE - 54)))) != 0):
                    self.state = 1555
                    self.arglist()


                self.state = 1558
                self.match(MQVTrParser.CLOSE_PAREN)


            self.state = 1561
            self.match(MQVTrParser.COLON)
            self.state = 1562
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.ArgumentContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def getRuleIndex(self):
            return MQVTrParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)




    def arglist(self):

        localctx = MQVTrParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1564
                    self.argument()
                    self.state = 1565
                    self.match(MQVTrParser.COMMA) 
                self.state = 1571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

            self.state = 1592
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1572
                self.argument()
                self.state = 1574
                _la = self._input.LA(1)
                if _la==MQVTrParser.COMMA:
                    self.state = 1573
                    self.match(MQVTrParser.COMMA)


                pass

            elif la_ == 2:
                self.state = 1576
                self.match(MQVTrParser.STAR)
                self.state = 1577
                self.test()
                self.state = 1582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1578
                        self.match(MQVTrParser.COMMA)
                        self.state = 1579
                        self.argument() 
                    self.state = 1584
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

                self.state = 1588
                _la = self._input.LA(1)
                if _la==MQVTrParser.COMMA:
                    self.state = 1585
                    self.match(MQVTrParser.COMMA)
                    self.state = 1586
                    self.match(MQVTrParser.POWER)
                    self.state = 1587
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1590
                self.match(MQVTrParser.POWER)
                self.state = 1591
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MQVTrParser.TestContext)
            else:
                return self.getTypedRuleContext(MQVTrParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(MQVTrParser.Comp_forContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = MQVTrParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1602
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self.test()
                self.state = 1596
                _la = self._input.LA(1)
                if _la==MQVTrParser.FOR:
                    self.state = 1595
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1598
                self.test()
                self.state = 1599
                self.match(MQVTrParser.ASSIGN)
                self.state = 1600
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(MQVTrParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(MQVTrParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)




    def comp_iter(self):

        localctx = MQVTrParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_comp_iter)
        try:
            self.state = 1606
            token = self._input.LA(1)
            if token in [MQVTrParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1604
                self.comp_for()

            elif token in [MQVTrParser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1605
                self.comp_if()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MQVTrParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(MQVTrParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(MQVTrParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(MQVTrParser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(MQVTrParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)




    def comp_for(self):

        localctx = MQVTrParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(MQVTrParser.FOR)
            self.state = 1609
            self.exprlist()
            self.state = 1610
            self.match(MQVTrParser.IN)
            self.state = 1611
            self.or_test()
            self.state = 1613
            _la = self._input.LA(1)
            if _la==MQVTrParser.IF or _la==MQVTrParser.FOR:
                self.state = 1612
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MQVTrParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(MQVTrParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(MQVTrParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)




    def comp_if(self):

        localctx = MQVTrParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self.match(MQVTrParser.IF)
            self.state = 1616
            self.test_nocond()
            self.state = 1618
            _la = self._input.LA(1)
            if _la==MQVTrParser.IF or _la==MQVTrParser.FOR:
                self.state = 1617
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(MQVTrParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(MQVTrParser.Yield_argContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)




    def yield_expr(self):

        localctx = MQVTrParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(MQVTrParser.YIELD)
            self.state = 1622
            _la = self._input.LA(1)
            if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & ((1 << (MQVTrParser.FROM - 38)) | (1 << (MQVTrParser.LAMBDA - 38)) | (1 << (MQVTrParser.NOT - 38)) | (1 << (MQVTrParser.NONE - 38)) | (1 << (MQVTrParser.TRUE - 38)) | (1 << (MQVTrParser.FALSE - 38)) | (1 << (MQVTrParser.NAME - 38)) | (1 << (MQVTrParser.STRING_LITERAL - 38)) | (1 << (MQVTrParser.BYTES_LITERAL - 38)) | (1 << (MQVTrParser.DECIMAL_INTEGER - 38)) | (1 << (MQVTrParser.OCT_INTEGER - 38)) | (1 << (MQVTrParser.HEX_INTEGER - 38)) | (1 << (MQVTrParser.BIN_INTEGER - 38)) | (1 << (MQVTrParser.FLOAT_NUMBER - 38)) | (1 << (MQVTrParser.IMAG_NUMBER - 38)) | (1 << (MQVTrParser.ELLIPSIS - 38)) | (1 << (MQVTrParser.STAR - 38)) | (1 << (MQVTrParser.OPEN_PAREN - 38)) | (1 << (MQVTrParser.OPEN_BRACK - 38)) | (1 << (MQVTrParser.ADD - 38)) | (1 << (MQVTrParser.MINUS - 38)) | (1 << (MQVTrParser.NOT_OP - 38)) | (1 << (MQVTrParser.OPEN_BRACE - 38)))) != 0):
                self.state = 1621
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(MQVTrParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(MQVTrParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(MQVTrParser.TestlistContext,0)


        def getRuleIndex(self):
            return MQVTrParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)




    def yield_arg(self):

        localctx = MQVTrParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_yield_arg)
        try:
            self.state = 1627
            token = self._input.LA(1)
            if token in [MQVTrParser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.match(MQVTrParser.FROM)
                self.state = 1625
                self.test()

            elif token in [MQVTrParser.LAMBDA, MQVTrParser.NOT, MQVTrParser.NONE, MQVTrParser.TRUE, MQVTrParser.FALSE, MQVTrParser.NAME, MQVTrParser.STRING_LITERAL, MQVTrParser.BYTES_LITERAL, MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER, MQVTrParser.FLOAT_NUMBER, MQVTrParser.IMAG_NUMBER, MQVTrParser.ELLIPSIS, MQVTrParser.STAR, MQVTrParser.OPEN_PAREN, MQVTrParser.OPEN_BRACK, MQVTrParser.ADD, MQVTrParser.MINUS, MQVTrParser.NOT_OP, MQVTrParser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1626
                self.testlist()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(MQVTrParser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(MQVTrParser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = MQVTrParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            _la = self._input.LA(1)
            if not(_la==MQVTrParser.STRING_LITERAL or _la==MQVTrParser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(MQVTrParser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(MQVTrParser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(MQVTrParser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = MQVTrParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_number)
        try:
            self.state = 1634
            token = self._input.LA(1)
            if token in [MQVTrParser.DECIMAL_INTEGER, MQVTrParser.OCT_INTEGER, MQVTrParser.HEX_INTEGER, MQVTrParser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1631
                self.integer()

            elif token in [MQVTrParser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1632
                self.match(MQVTrParser.FLOAT_NUMBER)

            elif token in [MQVTrParser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1633
                self.match(MQVTrParser.IMAG_NUMBER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(MQVTrParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(MQVTrParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(MQVTrParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(MQVTrParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return MQVTrParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)




    def integer(self):

        localctx = MQVTrParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (MQVTrParser.DECIMAL_INTEGER - 71)) | (1 << (MQVTrParser.OCT_INTEGER - 71)) | (1 << (MQVTrParser.HEX_INTEGER - 71)) | (1 << (MQVTrParser.BIN_INTEGER - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





