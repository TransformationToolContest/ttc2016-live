var newInstanceMap = Map {};
var runningElements = Dataflow!Element.all;

var STATE_STARTING = 0;
var STATE_RUNNING = 1;
var STATE_FAILED = 2;
var STATE_FINISHED = 3;

// Mark all nodes as "live"
var times = new Native('java.util.LinkedHashMap');
for (element in runningElements) {
  element.setUp();
  times.put(element, 0);
}

// While we have live elements...
while (runningElements.notEmpty) {
  for (element in runningElements) {
    var start = currentTimeMillis();
    element.processIncoming();
    times.put(element, times.get(element) + (currentTimeMillis() - start));
  }
  runningElements = runningElements.select(e|e.isRunning());
}

for (entry in times.entrySet) {
  var elemName = entry.key.name;
  var time = entry.value;
  (entry.key.eClass.name + '!' + elemName + ': ' + time/1000.0).println();
}

// ForEach primitive

operation Dataflow!ForEach processIncoming() {
  if (self.target.isDefined()) {
    for (incomingRow in self.~incomingRows) {
      var container = incomingRow.get(self.listField);
      var position = 0;
      for (element in container) {
        var newRow = Map {};
        newRow.putAll(incomingRow);
        newRow.put(self.itemField, element);
        if (self.positionField.isDefined()) {
          newRow.put(self.positionField, position);
        }
        self.target.addIncomingRow(newRow);
        position++;
      }
    }
    self.~incomingRows.clear();

    if (not self.hasRunningSource()) {
      self.~state = STATE_FINISHED;
    }
  } else {
    self.~state = STATE_FINISHED;
  }
}

// AddToContainer primitive

operation Dataflow!AddToContainer processIncoming() {
  for (incomingRow in self.~incomingRows) {
    var container = incomingRow.get(self.listField);
    var value = self.value.evaluate(incomingRow);
    if (self.position.isDefined()) {
      var position = self.position.evaluate(incomingRow);
      container.add(position, value);
    } else {
      container.add(value);
    }
    if (self.target.isDefined()) {
      self.target.addIncomingRow(incomingRow);
    }
  }
  self.~incomingRows.clear();

  if (not self.hasRunningSource()) {
    self.~state = STATE_FINISHED;
  }
}

// Evaluate primitive

operation Dataflow!Evaluate processIncoming() {
  if (self.target.isDefined()) {
    for (incomingRow in self.~incomingRows) {
      var result = self.expression.evaluate(incomingRow);
      incomingRow.put(self.field, result);
      self.target.addIncomingRow(incomingRow);
    }
    self.~incomingRows.clear();

    if (not self.hasRunningSource()) {
      self.~state = STATE_FINISHED;
    }
  } else {
    self.~state = STATE_FINISHED;
  }
}

// Filter primitive

operation Dataflow!Filter extraSetup() {
  if (self.rejectTarget.isDefined()) {
    self.rejectTarget.addSource(self);
  }
}

operation Dataflow!Filter processIncoming() {
  if (self.target.isDefined() or self.rejectTarget.isDefined()) {
    for (incomingRow in self.~incomingRows) {
      var filterResult = self.filterBy.evaluate(incomingRow);
      var accepted = filterResult.isTruish();
      if (accepted) {
        if (self.target.isDefined()) {
          self.target.addIncomingRow(incomingRow);
        }
      } else if (self.rejectTarget.isDefined()){
        self.rejectTarget.addIncomingRow(incomingRow);
      }
    }
    self.~incomingRows.clear();

    if (not self.hasRunningSource()) {
      self.~state = STATE_FINISHED;
    }
  } else {
    self.~state = STATE_FINISHED;
  }
}

// SetFeature primitive

operation Dataflow!SetFeature processIncoming() {
  for (incomingRow in self.~incomingRows) {
    var instance = incomingRow.get(self.objectField);

    // TODO: is there a generic way to get property by name in EOL?
    // IModel has the getPropertyGetter, but here we'd just have the
    // EObject.
    var feature = instance.eClass.getEStructuralFeature(self.feature);
    if (not feature.isDefined()) {
      throw 'Unknown feature ' + self.feature + ' in ' + instance.eClass.name;
    }
    if (self.value.isDefined()) {
      var value = self.value.evaluate(incomingRow);
      instance.eSet(feature, value);
    } else {
      instance.eUnset(feature);
    }

    if (self.target.isDefined()) {
      self.target.addIncomingRow(incomingRow);
    }
  }
  self.~incomingRows.clear();

  if (not self.hasRunningSource()) {
    self.~state = STATE_FINISHED;
  }
}

// NewInstance primitive

operation Dataflow!NewInstance processIncoming() {
  if (self.~sources.isEmpty) {
    self.~incomingRows = Sequence { Map {} };
  }

  for (incomingRow in self.~incomingRows) {
    var key = null;
    var instance = null;
    if (self.key.isDefined()) {
      key = self.key.evaluate(incomingRow);
      var typeInstances = newInstanceMap.get(self.typeName);
      if (typeInstances.isDefined()) {
        instance = typeInstances.get(key);
      } else {
        newInstanceMap.put(self.typeName, Map {});
      }
    }

    if (not instance.isDefined()) {
      instance = getModel(self.`model`).createInstance(self.typeName);
      if (key.isDefined()) {
        --key.println('NewInstance -- associated key for type ' + self.typeName + ' to ' + instance + ': ');
        newInstanceMap.get(self.typeName).put(key, instance);
      }
    }

    incomingRow.put(self.instanceField, instance);
    if (self.target.isDefined()) {
      self.target.addIncomingRow(incomingRow);
    }
  }
  self.~incomingRows.clear();

  if (not self.hasRunningSource()) {
    self.~state = STATE_FINISHED;
  }
}

// AllInstances primitive

operation Dataflow!AllInstances processIncoming() {
  if (self.isStarting()) {
    self.~instances = getModel(self.`model`).getAllOfKind(self.typeName);
    self.~state = STATE_RUNNING; 
  }

  if (self.~sources.isEmpty) {
    self.~incomingRows = Sequence { Map {} };
  }

  for (incomingRow in self.~incomingRows) {
    for (instance in self.~instances) {
      var newRow = Map {};
      newRow.putAll(incomingRow);
      newRow.put(self.field, instance);
      self.target.addIncomingRow(newRow);
    }
  }
  self.~incomingRows.clear();

  if (not self.hasRunningSource()) {
    self.~state = STATE_FINISHED;
  }
}

// Fallback implementation of any primitive ///////////////////////////////////

operation Dataflow!Element setUp() {
  self.~state = STATE_STARTING;
  self.~incomingRows = Sequence {};
  if (not self.~sources.isDefined()) {
    self.~sources = Sequence {};
  }
  if (self.target.isDefined()) {
    self.target.addSource(self); 
  }

  // For other types
  self.extraSetup();
}

operation Dataflow!Element extraSetup() {}

operation Dataflow!Element addSource(source : Dataflow!Element) {
  if (not self.~sources.isDefined()) {
    self.~sources = Sequence { source };
  } else {
    self.~sources.add(source);
  }
}

operation Dataflow!Element processIncoming() {
  --self.println('Processing ');
  return false;
} 

operation Dataflow!Element isRunning() : Boolean {
  return self.~state == STATE_RUNNING;
}

operation Dataflow!Element isStarting() : Boolean {
  return self.~state == STATE_STARTING;
}

operation Dataflow!Element hasRunningSource() : Boolean {
  if (self.~sources.isDefined()) {
    for (src in self.~sources) {
      if (src.isRunning()) {
        return true;
      }
    }
  }
  return false;
}

operation Dataflow!Element addIncomingRow(row : Map) {
  self.~incomingRows.add(row);
  --row.println('Added row to ' + self.name + ': ');
}

// UTILITIES //////////////////////////////////////////////////////////////////

operation getModel(modelName : String) {
  return System.context.modelRepository.getModelByName(modelName);  
}

operation Any isTruish() {
  if (not self.isDefined()) {
    return false;
  }

  var str = self.toString();
  if (str = 'true' or str = 'false') {
    return str.asBoolean();
  } else {
    return true;
  }
}

// EXPRESSION LANGUAGE ////////////////////////////////////////////////////////

operation Dataflow!ConditionalExpression evaluate(row : Map) {
  var value = self.conditionExpression.evaluate(row);
  if (value) {
    return self.thenExpression.evaluate(row);
  } else {
    return self.elseExpression.evaluate(row);
  }
}

operation Dataflow!IntegerLiteral evaluate(row : Map) { return self.value; }
operation Dataflow!BooleanLiteral evaluate(row : Map) { return self.value; }
operation Dataflow!RealLiteral evaluate(row : Map) { return self.value; }
operation Dataflow!StringLiteral evaluate(row : Map) { return self.value; }

operation Dataflow!FieldReference evaluate(row : Map) {
  return row.get(self.field);
}

operation Dataflow!UnaryOperation evaluate(row : Map) {
  var value = self.expression.evaluate(row);
  switch (self.operator) {
    case UnaryOperation#NOT: return not value;
    case UnaryOperation#NEGATION: return -value;
  }
}

operation Dataflow!BinaryOperation evaluate(row : Map) {
  var l = self.leftExpression.evaluate(row);
  var r = self.rightExpression.evaluate(row);
  switch (self.operator) {
    case BinaryOperator#EQ: return l == r;
    case BinaryOperator#NE: return l <> r;
    case BinaryOperator#GT: return l > r;
    case BinaryOperator#GE: return l >= r;
    case BinaryOperator#LT: return l < r;
    case BinaryOperator#LE: return l <= r;
    case BinaryOperator#AND: return l.isTruish() and r.isTruish();
    case BinaryOperator#OR: return l.isTruish() or r.isTruish();
    case BinaryOperator#XOR: return l.isTruish() xor r.isTruish();
    case BinaryOperator#ADD: return l + r;
    case BinaryOperator#SUBTRACT: return l - r;
    case BinaryOperator#MULTIPLY: return l * r;
    case BinaryOperator#DIVIDE: return l / r;
    case BinaryOperator#MODULO:
      var intDivision = (l / r).asInteger();
      return l - intDivision * r;
  }
}

operation Dataflow!FeatureCall evaluate(row : Map) {
  var target = self.targetExpression.evaluate(row);

  // Support some useful EMF methods
  if (self.feature = 'eContainer') {
    return target.eContainer();
  } else if (self.feature = 'eClass') {
    return target.eClass();
  }

  var feature = target.eClass.getEStructuralFeature(self.feature);
  if (not feature.isDefined()) {
    throw target + " does not know about the feature " + self.feature;
  }
  // TODO - support method calls - which methods?
  return target.eGet(feature);
}

operation Dataflow!Expression evaluate(row : Map) {
  self.println('Unimplemented, returning null');
  return null;
}