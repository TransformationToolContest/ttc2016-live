//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2016.LiveContest.Dataflow
{
    
    
    /// <summary>
    /// The default implementation of the FeatureCall class
    /// </summary>
    [XmlNamespaceAttribute("http://transformation-tool-contest.eu/2016/dataflow")]
    [XmlNamespacePrefixAttribute("df")]
    [ModelRepresentationClassAttribute("http://transformation-tool-contest.eu/2016/dataflow#//FeatureCall/")]
    public class FeatureCall : Expression, IFeatureCall, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Feature property
        /// </summary>
        private string _feature;
        
        /// <summary>
        /// The backing field for the TargetExpression property
        /// </summary>
        private IExpression _targetExpression;
        
        /// <summary>
        /// The backing field for the Parameters property
        /// </summary>
        private ObservableCompositionList<IExpression> _parameters;
        
        public FeatureCall()
        {
            this._parameters = new ObservableCompositionList<IExpression>(this);
            this._parameters.CollectionChanged += this.ParametersCollectionChanged;
        }
        
        /// <summary>
        /// The feature property
        /// </summary>
        [XmlElementNameAttribute("feature")]
        [XmlAttributeAttribute(true)]
        public virtual string Feature
        {
            get
            {
                return this._feature;
            }
            set
            {
                if ((this._feature != value))
                {
                    string old = this._feature;
                    this._feature = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFeatureChanged(e);
                    this.OnPropertyChanged("Feature", e);
                }
            }
        }
        
        /// <summary>
        /// The targetExpression property
        /// </summary>
        [XmlElementNameAttribute("targetExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IExpression TargetExpression
        {
            get
            {
                return this._targetExpression;
            }
            set
            {
                if ((this._targetExpression != value))
                {
                    IExpression old = this._targetExpression;
                    this._targetExpression = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetTargetExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetTargetExpression;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetExpressionChanged(e);
                    this.OnPropertyChanged("TargetExpression", e);
                }
            }
        }
        
        /// <summary>
        /// The parameters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("parameters")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IListExpression<IExpression> Parameters
        {
            get
            {
                return this._parameters;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new FeatureCallChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FeatureCallReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://transformation-tool-contest.eu/2016/dataflow#//FeatureCall/");
            }
        }
        
        /// <summary>
        /// Gets fired when the Feature property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FeatureChanged;
        
        /// <summary>
        /// Gets fired when the TargetExpression property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TargetExpressionChanged;
        
        /// <summary>
        /// Raises the FeatureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeatureChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FeatureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TargetExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TargetExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTargetExpression(object sender, EventArgs eventArgs)
        {
            this.TargetExpression = null;
        }
        
        /// <summary>
        /// Forwards change notifications for the Parameters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParametersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Parameters", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.TargetExpression))
            {
                return ModelHelper.CreatePath("TargetExpression");
            }
            int parametersIndex = ModelHelper.IndexOfReference(this.Parameters, element);
            if ((parametersIndex != -1))
            {
                return ModelHelper.CreatePath("parameters", parametersIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "TARGETEXPRESSION"))
            {
                return this.TargetExpression;
            }
            if ((reference == "PARAMETERS"))
            {
                if ((index < this.Parameters.Count))
                {
                    return this.Parameters[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FEATURE"))
            {
                return this.Feature;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PARAMETERS"))
            {
                return this._parameters;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TARGETEXPRESSION"))
            {
                this.TargetExpression = ((IExpression)(value));
                return;
            }
            if ((feature == "FEATURE"))
            {
                this.Feature = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TARGETEXPRESSION"))
            {
                return new TargetExpressionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TARGETEXPRESSION"))
            {
                return new TargetExpressionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://transformation-tool-contest.eu/2016/dataflow#//FeatureCall/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FeatureCall class
        /// </summary>
        public class FeatureCallChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FeatureCall _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureCallChildrenCollection(FeatureCall parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TargetExpression != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Parameters.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TargetExpressionChanged += this.PropagateValueChanges;
                this._parent.Parameters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TargetExpressionChanged -= this.PropagateValueChanges;
                this._parent.Parameters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TargetExpression == null))
                {
                    IExpression targetExpressionCasted = item.As<IExpression>();
                    if ((targetExpressionCasted != null))
                    {
                        this._parent.TargetExpression = targetExpressionCasted;
                        return;
                    }
                }
                IExpression parametersCasted = item.As<IExpression>();
                if ((parametersCasted != null))
                {
                    this._parent.Parameters.Add(parametersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TargetExpression = null;
                this._parent.Parameters.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TargetExpression))
                {
                    return true;
                }
                if (this._parent.Parameters.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TargetExpression != null))
                {
                    array[arrayIndex] = this._parent.TargetExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> parametersEnumerator = this._parent.Parameters.GetEnumerator();
                try
                {
                    for (
                    ; parametersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parametersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parametersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TargetExpression == item))
                {
                    this._parent.TargetExpression = null;
                    return true;
                }
                IExpression expressionItem = item.As<IExpression>();
                if (((expressionItem != null) 
                            && this._parent.Parameters.Remove(expressionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TargetExpression).Concat(this._parent.Parameters).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FeatureCall class
        /// </summary>
        public class FeatureCallReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FeatureCall _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureCallReferencedElementsCollection(FeatureCall parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TargetExpression != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Parameters.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TargetExpressionChanged += this.PropagateValueChanges;
                this._parent.Parameters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TargetExpressionChanged -= this.PropagateValueChanges;
                this._parent.Parameters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TargetExpression == null))
                {
                    IExpression targetExpressionCasted = item.As<IExpression>();
                    if ((targetExpressionCasted != null))
                    {
                        this._parent.TargetExpression = targetExpressionCasted;
                        return;
                    }
                }
                IExpression parametersCasted = item.As<IExpression>();
                if ((parametersCasted != null))
                {
                    this._parent.Parameters.Add(parametersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TargetExpression = null;
                this._parent.Parameters.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TargetExpression))
                {
                    return true;
                }
                if (this._parent.Parameters.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TargetExpression != null))
                {
                    array[arrayIndex] = this._parent.TargetExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> parametersEnumerator = this._parent.Parameters.GetEnumerator();
                try
                {
                    for (
                    ; parametersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parametersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parametersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TargetExpression == item))
                {
                    this._parent.TargetExpression = null;
                    return true;
                }
                IExpression expressionItem = item.As<IExpression>();
                if (((expressionItem != null) 
                            && this._parent.Parameters.Remove(expressionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TargetExpression).Concat(this._parent.Parameters).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the feature property
        /// </summary>
        private sealed class FeatureProxy : ModelPropertyChange<IFeatureCall, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FeatureProxy(IFeatureCall modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Feature;
                }
                set
                {
                    this.ModelElement.Feature = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FeatureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FeatureChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the targetExpression property
        /// </summary>
        private sealed class TargetExpressionProxy : ModelPropertyChange<IFeatureCall, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetExpressionProxy(IFeatureCall modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.TargetExpression;
                }
                set
                {
                    this.ModelElement.TargetExpression = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TargetExpressionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TargetExpressionChanged -= handler;
            }
        }
    }
}

