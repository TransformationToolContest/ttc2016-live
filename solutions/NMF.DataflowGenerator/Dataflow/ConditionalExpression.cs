//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2016.LiveContest.Dataflow
{
    
    
    /// <summary>
    /// The default implementation of the ConditionalExpression class
    /// </summary>
    [XmlNamespaceAttribute("http://transformation-tool-contest.eu/2016/dataflow")]
    [XmlNamespacePrefixAttribute("df")]
    [ModelRepresentationClassAttribute("http://transformation-tool-contest.eu/2016/dataflow#//ConditionalExpression/")]
    public class ConditionalExpression : Expression, IConditionalExpression, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ConditionExpression property
        /// </summary>
        private IExpression _conditionExpression;
        
        /// <summary>
        /// The backing field for the ThenExpression property
        /// </summary>
        private IExpression _thenExpression;
        
        /// <summary>
        /// The backing field for the ElseExpression property
        /// </summary>
        private IExpression _elseExpression;
        
        /// <summary>
        /// The conditionExpression property
        /// </summary>
        [XmlElementNameAttribute("conditionExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IExpression ConditionExpression
        {
            get
            {
                return this._conditionExpression;
            }
            set
            {
                if ((this._conditionExpression != value))
                {
                    IExpression old = this._conditionExpression;
                    this._conditionExpression = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetConditionExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetConditionExpression;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConditionExpressionChanged(e);
                    this.OnPropertyChanged("ConditionExpression", e);
                }
            }
        }
        
        /// <summary>
        /// The thenExpression property
        /// </summary>
        [XmlElementNameAttribute("thenExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IExpression ThenExpression
        {
            get
            {
                return this._thenExpression;
            }
            set
            {
                if ((this._thenExpression != value))
                {
                    IExpression old = this._thenExpression;
                    this._thenExpression = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetThenExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetThenExpression;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThenExpressionChanged(e);
                    this.OnPropertyChanged("ThenExpression", e);
                }
            }
        }
        
        /// <summary>
        /// The elseExpression property
        /// </summary>
        [XmlElementNameAttribute("elseExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IExpression ElseExpression
        {
            get
            {
                return this._elseExpression;
            }
            set
            {
                if ((this._elseExpression != value))
                {
                    IExpression old = this._elseExpression;
                    this._elseExpression = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetElseExpression;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetElseExpression;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElseExpressionChanged(e);
                    this.OnPropertyChanged("ElseExpression", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ConditionalExpressionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConditionalExpressionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://transformation-tool-contest.eu/2016/dataflow#//ConditionalExpression/");
            }
        }
        
        /// <summary>
        /// Gets fired when the ConditionExpression property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ConditionExpressionChanged;
        
        /// <summary>
        /// Gets fired when the ThenExpression property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ThenExpressionChanged;
        
        /// <summary>
        /// Gets fired when the ElseExpression property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ElseExpressionChanged;
        
        /// <summary>
        /// Raises the ConditionExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConditionExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ConditionExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConditionExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConditionExpression(object sender, EventArgs eventArgs)
        {
            this.ConditionExpression = null;
        }
        
        /// <summary>
        /// Raises the ThenExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThenExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ThenExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThenExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThenExpression(object sender, EventArgs eventArgs)
        {
            this.ThenExpression = null;
        }
        
        /// <summary>
        /// Raises the ElseExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElseExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ElseExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElseExpression property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElseExpression(object sender, EventArgs eventArgs)
        {
            this.ElseExpression = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.ConditionExpression))
            {
                return ModelHelper.CreatePath("ConditionExpression");
            }
            if ((element == this.ThenExpression))
            {
                return ModelHelper.CreatePath("ThenExpression");
            }
            if ((element == this.ElseExpression))
            {
                return ModelHelper.CreatePath("ElseExpression");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONDITIONEXPRESSION"))
            {
                return this.ConditionExpression;
            }
            if ((reference == "THENEXPRESSION"))
            {
                return this.ThenExpression;
            }
            if ((reference == "ELSEEXPRESSION"))
            {
                return this.ElseExpression;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONDITIONEXPRESSION"))
            {
                this.ConditionExpression = ((IExpression)(value));
                return;
            }
            if ((feature == "THENEXPRESSION"))
            {
                this.ThenExpression = ((IExpression)(value));
                return;
            }
            if ((feature == "ELSEEXPRESSION"))
            {
                this.ElseExpression = ((IExpression)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CONDITIONEXPRESSION"))
            {
                return new ConditionExpressionProxy(this);
            }
            if ((attribute == "THENEXPRESSION"))
            {
                return new ThenExpressionProxy(this);
            }
            if ((attribute == "ELSEEXPRESSION"))
            {
                return new ElseExpressionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CONDITIONEXPRESSION"))
            {
                return new ConditionExpressionProxy(this);
            }
            if ((reference == "THENEXPRESSION"))
            {
                return new ThenExpressionProxy(this);
            }
            if ((reference == "ELSEEXPRESSION"))
            {
                return new ElseExpressionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://transformation-tool-contest.eu/2016/dataflow#//ConditionalExpression/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConditionalExpression class
        /// </summary>
        public class ConditionalExpressionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConditionalExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConditionalExpressionChildrenCollection(ConditionalExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ConditionExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThenExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElseExpression != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConditionExpressionChanged += this.PropagateValueChanges;
                this._parent.ThenExpressionChanged += this.PropagateValueChanges;
                this._parent.ElseExpressionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConditionExpressionChanged -= this.PropagateValueChanges;
                this._parent.ThenExpressionChanged -= this.PropagateValueChanges;
                this._parent.ElseExpressionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ConditionExpression == null))
                {
                    IExpression conditionExpressionCasted = item.As<IExpression>();
                    if ((conditionExpressionCasted != null))
                    {
                        this._parent.ConditionExpression = conditionExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.ThenExpression == null))
                {
                    IExpression thenExpressionCasted = item.As<IExpression>();
                    if ((thenExpressionCasted != null))
                    {
                        this._parent.ThenExpression = thenExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.ElseExpression == null))
                {
                    IExpression elseExpressionCasted = item.As<IExpression>();
                    if ((elseExpressionCasted != null))
                    {
                        this._parent.ElseExpression = elseExpressionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConditionExpression = null;
                this._parent.ThenExpression = null;
                this._parent.ElseExpression = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ConditionExpression))
                {
                    return true;
                }
                if ((item == this._parent.ThenExpression))
                {
                    return true;
                }
                if ((item == this._parent.ElseExpression))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ConditionExpression != null))
                {
                    array[arrayIndex] = this._parent.ConditionExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThenExpression != null))
                {
                    array[arrayIndex] = this._parent.ThenExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElseExpression != null))
                {
                    array[arrayIndex] = this._parent.ElseExpression;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ConditionExpression == item))
                {
                    this._parent.ConditionExpression = null;
                    return true;
                }
                if ((this._parent.ThenExpression == item))
                {
                    this._parent.ThenExpression = null;
                    return true;
                }
                if ((this._parent.ElseExpression == item))
                {
                    this._parent.ElseExpression = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConditionExpression).Concat(this._parent.ThenExpression).Concat(this._parent.ElseExpression).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConditionalExpression class
        /// </summary>
        public class ConditionalExpressionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConditionalExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConditionalExpressionReferencedElementsCollection(ConditionalExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ConditionExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThenExpression != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElseExpression != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConditionExpressionChanged += this.PropagateValueChanges;
                this._parent.ThenExpressionChanged += this.PropagateValueChanges;
                this._parent.ElseExpressionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConditionExpressionChanged -= this.PropagateValueChanges;
                this._parent.ThenExpressionChanged -= this.PropagateValueChanges;
                this._parent.ElseExpressionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ConditionExpression == null))
                {
                    IExpression conditionExpressionCasted = item.As<IExpression>();
                    if ((conditionExpressionCasted != null))
                    {
                        this._parent.ConditionExpression = conditionExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.ThenExpression == null))
                {
                    IExpression thenExpressionCasted = item.As<IExpression>();
                    if ((thenExpressionCasted != null))
                    {
                        this._parent.ThenExpression = thenExpressionCasted;
                        return;
                    }
                }
                if ((this._parent.ElseExpression == null))
                {
                    IExpression elseExpressionCasted = item.As<IExpression>();
                    if ((elseExpressionCasted != null))
                    {
                        this._parent.ElseExpression = elseExpressionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConditionExpression = null;
                this._parent.ThenExpression = null;
                this._parent.ElseExpression = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ConditionExpression))
                {
                    return true;
                }
                if ((item == this._parent.ThenExpression))
                {
                    return true;
                }
                if ((item == this._parent.ElseExpression))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ConditionExpression != null))
                {
                    array[arrayIndex] = this._parent.ConditionExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThenExpression != null))
                {
                    array[arrayIndex] = this._parent.ThenExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElseExpression != null))
                {
                    array[arrayIndex] = this._parent.ElseExpression;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ConditionExpression == item))
                {
                    this._parent.ConditionExpression = null;
                    return true;
                }
                if ((this._parent.ThenExpression == item))
                {
                    this._parent.ThenExpression = null;
                    return true;
                }
                if ((this._parent.ElseExpression == item))
                {
                    this._parent.ElseExpression = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConditionExpression).Concat(this._parent.ThenExpression).Concat(this._parent.ElseExpression).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the conditionExpression property
        /// </summary>
        private sealed class ConditionExpressionProxy : ModelPropertyChange<IConditionalExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConditionExpressionProxy(IConditionalExpression modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.ConditionExpression;
                }
                set
                {
                    this.ModelElement.ConditionExpression = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConditionExpressionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConditionExpressionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the thenExpression property
        /// </summary>
        private sealed class ThenExpressionProxy : ModelPropertyChange<IConditionalExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThenExpressionProxy(IConditionalExpression modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.ThenExpression;
                }
                set
                {
                    this.ModelElement.ThenExpression = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThenExpressionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ThenExpressionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the elseExpression property
        /// </summary>
        private sealed class ElseExpressionProxy : ModelPropertyChange<IConditionalExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElseExpressionProxy(IConditionalExpression modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.ElseExpression;
                }
                set
                {
                    this.ModelElement.ElseExpression = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ElseExpressionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ElseExpressionChanged -= handler;
            }
        }
    }
}

