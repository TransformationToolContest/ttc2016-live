//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2016.LiveContest.Dataflow
{
    
    
    /// <summary>
    /// The default implementation of the ForEach class
    /// </summary>
    [XmlNamespaceAttribute("http://transformation-tool-contest.eu/2016/dataflow")]
    [XmlNamespacePrefixAttribute("df")]
    [ModelRepresentationClassAttribute("http://transformation-tool-contest.eu/2016/dataflow#//ForEach/")]
    [DebuggerDisplayAttribute("ForEach {Name}")]
    public class ForEach : Element, IForEach, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ListField property
        /// </summary>
        private string _listField;
        
        /// <summary>
        /// The backing field for the ItemField property
        /// </summary>
        private string _itemField;
        
        /// <summary>
        /// The backing field for the PositionField property
        /// </summary>
        private string _positionField;
        
        /// <summary>
        /// The listField property
        /// </summary>
        [XmlElementNameAttribute("listField")]
        [XmlAttributeAttribute(true)]
        public virtual string ListField
        {
            get
            {
                return this._listField;
            }
            set
            {
                if ((this._listField != value))
                {
                    string old = this._listField;
                    this._listField = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnListFieldChanged(e);
                    this.OnPropertyChanged("ListField", e);
                }
            }
        }
        
        /// <summary>
        /// The itemField property
        /// </summary>
        [XmlElementNameAttribute("itemField")]
        [XmlAttributeAttribute(true)]
        public virtual string ItemField
        {
            get
            {
                return this._itemField;
            }
            set
            {
                if ((this._itemField != value))
                {
                    string old = this._itemField;
                    this._itemField = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnItemFieldChanged(e);
                    this.OnPropertyChanged("ItemField", e);
                }
            }
        }
        
        /// <summary>
        /// The positionField property
        /// </summary>
        [XmlElementNameAttribute("positionField")]
        [XmlAttributeAttribute(true)]
        public virtual string PositionField
        {
            get
            {
                return this._positionField;
            }
            set
            {
                if ((this._positionField != value))
                {
                    string old = this._positionField;
                    this._positionField = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPositionFieldChanged(e);
                    this.OnPropertyChanged("PositionField", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://transformation-tool-contest.eu/2016/dataflow#//ForEach/");
            }
        }
        
        /// <summary>
        /// Gets fired when the ListField property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ListFieldChanged;
        
        /// <summary>
        /// Gets fired when the ItemField property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ItemFieldChanged;
        
        /// <summary>
        /// Gets fired when the PositionField property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PositionFieldChanged;
        
        /// <summary>
        /// Raises the ListFieldChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnListFieldChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ListFieldChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ItemFieldChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnItemFieldChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ItemFieldChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PositionFieldChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositionFieldChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PositionFieldChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LISTFIELD"))
            {
                return this.ListField;
            }
            if ((attribute == "ITEMFIELD"))
            {
                return this.ItemField;
            }
            if ((attribute == "POSITIONFIELD"))
            {
                return this.PositionField;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LISTFIELD"))
            {
                this.ListField = ((string)(value));
                return;
            }
            if ((feature == "ITEMFIELD"))
            {
                this.ItemField = ((string)(value));
                return;
            }
            if ((feature == "POSITIONFIELD"))
            {
                this.PositionField = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://transformation-tool-contest.eu/2016/dataflow#//ForEach/")));
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the listField property
        /// </summary>
        private sealed class ListFieldProxy : ModelPropertyChange<IForEach, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ListFieldProxy(IForEach modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ListField;
                }
                set
                {
                    this.ModelElement.ListField = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ListFieldChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ListFieldChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the itemField property
        /// </summary>
        private sealed class ItemFieldProxy : ModelPropertyChange<IForEach, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ItemFieldProxy(IForEach modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ItemField;
                }
                set
                {
                    this.ModelElement.ItemField = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ItemFieldChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ItemFieldChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the positionField property
        /// </summary>
        private sealed class PositionFieldProxy : ModelPropertyChange<IForEach, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PositionFieldProxy(IForEach modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PositionField;
                }
                set
                {
                    this.ModelElement.PositionField = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PositionFieldChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PositionFieldChanged -= handler;
            }
        }
    }
}

